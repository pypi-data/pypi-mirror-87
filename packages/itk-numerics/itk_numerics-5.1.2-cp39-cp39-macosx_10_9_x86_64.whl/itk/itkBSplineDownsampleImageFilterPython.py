# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBSplineDownsampleImageFilterPython
else:
    import _itkBSplineDownsampleImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBSplineDownsampleImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBSplineDownsampleImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
class itkBSplineDownsampleImageFilterID2ID2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_Superclass_cast)

# Register itkBSplineDownsampleImageFilterID2ID2_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_Superclass_swigregister(itkBSplineDownsampleImageFilterID2ID2_Superclass)
itkBSplineDownsampleImageFilterID2ID2_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_Superclass_cast

class itkBSplineDownsampleImageFilterID3ID3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_Superclass_cast)

# Register itkBSplineDownsampleImageFilterID3ID3_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_Superclass_swigregister(itkBSplineDownsampleImageFilterID3ID3_Superclass)
itkBSplineDownsampleImageFilterID3ID3_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_Superclass_cast

class itkBSplineDownsampleImageFilterIF2IF2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_Superclass_cast)

# Register itkBSplineDownsampleImageFilterIF2IF2_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_Superclass_swigregister(itkBSplineDownsampleImageFilterIF2IF2_Superclass)
itkBSplineDownsampleImageFilterIF2IF2_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_Superclass_cast

class itkBSplineDownsampleImageFilterIF3IF3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_Superclass_cast)

# Register itkBSplineDownsampleImageFilterIF3IF3_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_Superclass_swigregister(itkBSplineDownsampleImageFilterIF3IF3_Superclass)
itkBSplineDownsampleImageFilterIF3IF3_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_Superclass_cast

class itkBSplineDownsampleImageFilterISS2ISS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_Superclass_cast)

# Register itkBSplineDownsampleImageFilterISS2ISS2_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_Superclass_swigregister(itkBSplineDownsampleImageFilterISS2ISS2_Superclass)
itkBSplineDownsampleImageFilterISS2ISS2_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_Superclass_cast

class itkBSplineDownsampleImageFilterISS3ISS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_Superclass_cast)

# Register itkBSplineDownsampleImageFilterISS3ISS3_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_Superclass_swigregister(itkBSplineDownsampleImageFilterISS3ISS3_Superclass)
itkBSplineDownsampleImageFilterISS3ISS3_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_Superclass_cast

class itkBSplineDownsampleImageFilterIUC2IUC2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_cast)

# Register itkBSplineDownsampleImageFilterIUC2IUC2_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_swigregister(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass)
itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_cast

class itkBSplineDownsampleImageFilterIUC3IUC3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_cast)

# Register itkBSplineDownsampleImageFilterIUC3IUC3_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_swigregister(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass)
itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_cast

class itkBSplineDownsampleImageFilterIUS2IUS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_cast)

# Register itkBSplineDownsampleImageFilterIUS2IUS2_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_swigregister(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass)
itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_cast

class itkBSplineDownsampleImageFilterIUS3IUS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBSplineDownsampleImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_SetSplineOrder)
    GetSplineOrder = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_GetSplineOrder)
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_cast)

# Register itkBSplineDownsampleImageFilterIUS3IUS3_Superclass in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_swigregister(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass)
itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_cast


def itkBSplineDownsampleImageFilterID2ID2_New():
    return itkBSplineDownsampleImageFilterID2ID2.New()

class itkBSplineDownsampleImageFilterID2ID2(itkBSplineDownsampleImageFilterID2ID2_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterID2ID2
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterID2ID2

        Create a new object of the class itkBSplineDownsampleImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterID2ID2 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_swigregister(itkBSplineDownsampleImageFilterID2ID2)
itkBSplineDownsampleImageFilterID2ID2___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2___New_orig__
itkBSplineDownsampleImageFilterID2ID2_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID2ID2_cast


def itkBSplineDownsampleImageFilterID3ID3_New():
    return itkBSplineDownsampleImageFilterID3ID3.New()

class itkBSplineDownsampleImageFilterID3ID3(itkBSplineDownsampleImageFilterID3ID3_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterID3ID3
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterID3ID3

        Create a new object of the class itkBSplineDownsampleImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterID3ID3 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_swigregister(itkBSplineDownsampleImageFilterID3ID3)
itkBSplineDownsampleImageFilterID3ID3___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3___New_orig__
itkBSplineDownsampleImageFilterID3ID3_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterID3ID3_cast


def itkBSplineDownsampleImageFilterIF2IF2_New():
    return itkBSplineDownsampleImageFilterIF2IF2.New()

class itkBSplineDownsampleImageFilterIF2IF2(itkBSplineDownsampleImageFilterIF2IF2_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIF2IF2
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterIF2IF2

        Create a new object of the class itkBSplineDownsampleImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterIF2IF2 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_swigregister(itkBSplineDownsampleImageFilterIF2IF2)
itkBSplineDownsampleImageFilterIF2IF2___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2___New_orig__
itkBSplineDownsampleImageFilterIF2IF2_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF2IF2_cast


def itkBSplineDownsampleImageFilterIF3IF3_New():
    return itkBSplineDownsampleImageFilterIF3IF3.New()

class itkBSplineDownsampleImageFilterIF3IF3(itkBSplineDownsampleImageFilterIF3IF3_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIF3IF3
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterIF3IF3

        Create a new object of the class itkBSplineDownsampleImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterIF3IF3 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_swigregister(itkBSplineDownsampleImageFilterIF3IF3)
itkBSplineDownsampleImageFilterIF3IF3___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3___New_orig__
itkBSplineDownsampleImageFilterIF3IF3_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIF3IF3_cast


def itkBSplineDownsampleImageFilterISS2ISS2_New():
    return itkBSplineDownsampleImageFilterISS2ISS2.New()

class itkBSplineDownsampleImageFilterISS2ISS2(itkBSplineDownsampleImageFilterISS2ISS2_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterISS2ISS2

        Create a new object of the class itkBSplineDownsampleImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterISS2ISS2 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_swigregister(itkBSplineDownsampleImageFilterISS2ISS2)
itkBSplineDownsampleImageFilterISS2ISS2___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2___New_orig__
itkBSplineDownsampleImageFilterISS2ISS2_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS2ISS2_cast


def itkBSplineDownsampleImageFilterISS3ISS3_New():
    return itkBSplineDownsampleImageFilterISS3ISS3.New()

class itkBSplineDownsampleImageFilterISS3ISS3(itkBSplineDownsampleImageFilterISS3ISS3_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterISS3ISS3

        Create a new object of the class itkBSplineDownsampleImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterISS3ISS3 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_swigregister(itkBSplineDownsampleImageFilterISS3ISS3)
itkBSplineDownsampleImageFilterISS3ISS3___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3___New_orig__
itkBSplineDownsampleImageFilterISS3ISS3_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterISS3ISS3_cast


def itkBSplineDownsampleImageFilterIUC2IUC2_New():
    return itkBSplineDownsampleImageFilterIUC2IUC2.New()

class itkBSplineDownsampleImageFilterIUC2IUC2(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterIUC2IUC2

        Create a new object of the class itkBSplineDownsampleImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterIUC2IUC2 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_swigregister(itkBSplineDownsampleImageFilterIUC2IUC2)
itkBSplineDownsampleImageFilterIUC2IUC2___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2___New_orig__
itkBSplineDownsampleImageFilterIUC2IUC2_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC2IUC2_cast


def itkBSplineDownsampleImageFilterIUC3IUC3_New():
    return itkBSplineDownsampleImageFilterIUC3IUC3.New()

class itkBSplineDownsampleImageFilterIUC3IUC3(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterIUC3IUC3

        Create a new object of the class itkBSplineDownsampleImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterIUC3IUC3 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_swigregister(itkBSplineDownsampleImageFilterIUC3IUC3)
itkBSplineDownsampleImageFilterIUC3IUC3___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3___New_orig__
itkBSplineDownsampleImageFilterIUC3IUC3_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUC3IUC3_cast


def itkBSplineDownsampleImageFilterIUS2IUS2_New():
    return itkBSplineDownsampleImageFilterIUS2IUS2.New()

class itkBSplineDownsampleImageFilterIUS2IUS2(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterIUS2IUS2

        Create a new object of the class itkBSplineDownsampleImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterIUS2IUS2 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_swigregister(itkBSplineDownsampleImageFilterIUS2IUS2)
itkBSplineDownsampleImageFilterIUS2IUS2___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2___New_orig__
itkBSplineDownsampleImageFilterIUS2IUS2_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS2IUS2_cast


def itkBSplineDownsampleImageFilterIUS3IUS3_New():
    return itkBSplineDownsampleImageFilterIUS3IUS3.New()

class itkBSplineDownsampleImageFilterIUS3IUS3(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass):
    r"""


    Down-samples an image by a factor of 2 using B-Spline filter
    interpolation.

    This class is the public interface for spline down-sampling as defined
    by the ResamplerType. Requires the use of a resampler type. If in
    doubt, the basic itkBSplineResampleImageFilterBase should work fine
    for most applications.

    This class may also be used to create a smoother by combining it with
    the upSampler as in the following example: using ResamplerType =
    itk::BSplineResampleImageFilterBase<ImageType2D, ImageType2D>; using
    DownsamplerType2D = itk::BSplineDownsampleImageFilter<ImageType2D,Imag
    eType2D,ResamplerType>; using UpsamplerType2D = itk::BSplineUpsampleIm
    ageFilter<ImageType2D,ImageType2D,ResamplerType>;

    DownsamplerType2D::Pointer downSampler = DownsamplerType2D::New();
    UpsamplerType2D::Pointer upSampler = UpsamplerType2D::New(); int
    splineOrder = 3; downSampler->SetSplineOrder(splineOrder);
    upSampler->SetSplineOrder(splineOrder);

    downSampler->SetInput(image); downSampler->Update();

    upSampler->SetInput( downSampler->GetOutput() ); // output of
    downSampler is input to upSampler upSampler->Update();

    ImageTypePtr2D outImage2 = upSampler->GetOutput(); // outImage2 is the
    smoothed imaged

    Limitations: This class requires specification of a resampler type
    which may be one of: itkBSplineResampleImageFilterBase,
    itkBSplineL2ResampleImageFilterBase
    itkBSplineSplineCenteredResampleImageFilterBase,
    itkBSplineCenteredL2ResampleImageFilterBase The limitations of these
    resampler types will apply to this filter. Downsamples only by a
    factor of 2.

    See:  itkBSplineDownsampleImageFilter

    See:  itkBSplineL2ResampleImageFilter

    See:  itkBSplineResampleImageFilterBase

    See:  itkBSplineCenteredResampleImageFilterBase

    See:  itkBSplineCenteredL2ResampleImageFilterBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_Clone)
    GenerateOutputInformation = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    DoubleConvertibleToOutputCheck = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBSplineDownsampleImageFilterPython.delete_itkBSplineDownsampleImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBSplineDownsampleImageFilterIUS3IUS3

        Create a new object of the class itkBSplineDownsampleImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBSplineDownsampleImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBSplineDownsampleImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBSplineDownsampleImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBSplineDownsampleImageFilterIUS3IUS3 in _itkBSplineDownsampleImageFilterPython:
_itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_swigregister(itkBSplineDownsampleImageFilterIUS3IUS3)
itkBSplineDownsampleImageFilterIUS3IUS3___New_orig__ = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3___New_orig__
itkBSplineDownsampleImageFilterIUS3IUS3_cast = _itkBSplineDownsampleImageFilterPython.itkBSplineDownsampleImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def b_spline_resample_image_filter_base(*args, **kwargs):
    """Procedural interface for BSplineResampleImageFilterBase"""
    import itk
    instance = itk.BSplineResampleImageFilterBase.New(*args, **kwargs)
    return instance.__internal_call__()

def b_spline_resample_image_filter_base_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BSplineResampleImageFilterBase, itkTemplate.itkTemplate):
        filter_object = itk.BSplineResampleImageFilterBase.values()[0]
    else:
        filter_object = itk.BSplineResampleImageFilterBase

    b_spline_resample_image_filter_base.__doc__ = filter_object.__doc__
    b_spline_resample_image_filter_base.__doc__ += "\n Args are Input(s) to the filter.\n"
    b_spline_resample_image_filter_base.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BSplineResampleImageFilterBase, itkTemplate.itkTemplate):
        b_spline_resample_image_filter_base.__doc__ += itkHelpers.filter_args(filter_object)[0]
        b_spline_resample_image_filter_base.__doc__ += "\n"
        b_spline_resample_image_filter_base.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        b_spline_resample_image_filter_base.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def b_spline_downsample_image_filter(*args, **kwargs):
    """Procedural interface for BSplineDownsampleImageFilter"""
    import itk
    instance = itk.BSplineDownsampleImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def b_spline_downsample_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BSplineDownsampleImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BSplineDownsampleImageFilter.values()[0]
    else:
        filter_object = itk.BSplineDownsampleImageFilter

    b_spline_downsample_image_filter.__doc__ = filter_object.__doc__
    b_spline_downsample_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    b_spline_downsample_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BSplineDownsampleImageFilter, itkTemplate.itkTemplate):
        b_spline_downsample_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        b_spline_downsample_image_filter.__doc__ += "\n"
        b_spline_downsample_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        b_spline_downsample_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



