# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkContourMeanDistanceImageFilterPython
else:
    import _itkContourMeanDistanceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkContourMeanDistanceImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkContourMeanDistanceImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkContourMeanDistanceImageFilterID2ID2_New():
    return itkContourMeanDistanceImageFilterID2ID2.New()

class itkContourMeanDistanceImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterID2ID2
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterID2ID2

        Create a new object of the class itkContourMeanDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterID2ID2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_swigregister(itkContourMeanDistanceImageFilterID2ID2)
itkContourMeanDistanceImageFilterID2ID2___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2___New_orig__
itkContourMeanDistanceImageFilterID2ID2_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID2ID2_cast


def itkContourMeanDistanceImageFilterID3ID3_New():
    return itkContourMeanDistanceImageFilterID3ID3.New()

class itkContourMeanDistanceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterID3ID3
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterID3ID3

        Create a new object of the class itkContourMeanDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterID3ID3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_swigregister(itkContourMeanDistanceImageFilterID3ID3)
itkContourMeanDistanceImageFilterID3ID3___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3___New_orig__
itkContourMeanDistanceImageFilterID3ID3_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterID3ID3_cast


def itkContourMeanDistanceImageFilterIF2IF2_New():
    return itkContourMeanDistanceImageFilterIF2IF2.New()

class itkContourMeanDistanceImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIF2IF2
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIF2IF2

        Create a new object of the class itkContourMeanDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIF2IF2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_swigregister(itkContourMeanDistanceImageFilterIF2IF2)
itkContourMeanDistanceImageFilterIF2IF2___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2___New_orig__
itkContourMeanDistanceImageFilterIF2IF2_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF2IF2_cast


def itkContourMeanDistanceImageFilterIF3IF3_New():
    return itkContourMeanDistanceImageFilterIF3IF3.New()

class itkContourMeanDistanceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIF3IF3
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIF3IF3

        Create a new object of the class itkContourMeanDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIF3IF3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_swigregister(itkContourMeanDistanceImageFilterIF3IF3)
itkContourMeanDistanceImageFilterIF3IF3___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3___New_orig__
itkContourMeanDistanceImageFilterIF3IF3_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIF3IF3_cast


def itkContourMeanDistanceImageFilterISS2ISS2_New():
    return itkContourMeanDistanceImageFilterISS2ISS2.New()

class itkContourMeanDistanceImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterISS2ISS2

        Create a new object of the class itkContourMeanDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterISS2ISS2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_swigregister(itkContourMeanDistanceImageFilterISS2ISS2)
itkContourMeanDistanceImageFilterISS2ISS2___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2___New_orig__
itkContourMeanDistanceImageFilterISS2ISS2_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS2ISS2_cast


def itkContourMeanDistanceImageFilterISS3ISS3_New():
    return itkContourMeanDistanceImageFilterISS3ISS3.New()

class itkContourMeanDistanceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterISS3ISS3

        Create a new object of the class itkContourMeanDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterISS3ISS3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_swigregister(itkContourMeanDistanceImageFilterISS3ISS3)
itkContourMeanDistanceImageFilterISS3ISS3___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3___New_orig__
itkContourMeanDistanceImageFilterISS3ISS3_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterISS3ISS3_cast


def itkContourMeanDistanceImageFilterIUC2ID2_New():
    return itkContourMeanDistanceImageFilterIUC2ID2.New()

class itkContourMeanDistanceImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC2ID2

        Create a new object of the class itkContourMeanDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC2ID2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_swigregister(itkContourMeanDistanceImageFilterIUC2ID2)
itkContourMeanDistanceImageFilterIUC2ID2___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2___New_orig__
itkContourMeanDistanceImageFilterIUC2ID2_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2ID2_cast


def itkContourMeanDistanceImageFilterIUC2IF2_New():
    return itkContourMeanDistanceImageFilterIUC2IF2.New()

class itkContourMeanDistanceImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC2IF2

        Create a new object of the class itkContourMeanDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC2IF2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_swigregister(itkContourMeanDistanceImageFilterIUC2IF2)
itkContourMeanDistanceImageFilterIUC2IF2___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2___New_orig__
itkContourMeanDistanceImageFilterIUC2IF2_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC2IF2_cast


def itkContourMeanDistanceImageFilterIUC3ID3_New():
    return itkContourMeanDistanceImageFilterIUC3ID3.New()

class itkContourMeanDistanceImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC3ID3

        Create a new object of the class itkContourMeanDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC3ID3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_swigregister(itkContourMeanDistanceImageFilterIUC3ID3)
itkContourMeanDistanceImageFilterIUC3ID3___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3___New_orig__
itkContourMeanDistanceImageFilterIUC3ID3_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3ID3_cast


def itkContourMeanDistanceImageFilterIUC3IF3_New():
    return itkContourMeanDistanceImageFilterIUC3IF3.New()

class itkContourMeanDistanceImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUC3IF3

        Create a new object of the class itkContourMeanDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUC3IF3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_swigregister(itkContourMeanDistanceImageFilterIUC3IF3)
itkContourMeanDistanceImageFilterIUC3IF3___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3___New_orig__
itkContourMeanDistanceImageFilterIUC3IF3_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUC3IF3_cast


def itkContourMeanDistanceImageFilterIUS2ID2_New():
    return itkContourMeanDistanceImageFilterIUS2ID2.New()

class itkContourMeanDistanceImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS2ID2

        Create a new object of the class itkContourMeanDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS2ID2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_swigregister(itkContourMeanDistanceImageFilterIUS2ID2)
itkContourMeanDistanceImageFilterIUS2ID2___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2___New_orig__
itkContourMeanDistanceImageFilterIUS2ID2_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2ID2_cast


def itkContourMeanDistanceImageFilterIUS2IF2_New():
    return itkContourMeanDistanceImageFilterIUS2IF2.New()

class itkContourMeanDistanceImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS2IF2

        Create a new object of the class itkContourMeanDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS2IF2 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_swigregister(itkContourMeanDistanceImageFilterIUS2IF2)
itkContourMeanDistanceImageFilterIUS2IF2___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2___New_orig__
itkContourMeanDistanceImageFilterIUS2IF2_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS2IF2_cast


def itkContourMeanDistanceImageFilterIUS3ID3_New():
    return itkContourMeanDistanceImageFilterIUS3ID3.New()

class itkContourMeanDistanceImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS3ID3

        Create a new object of the class itkContourMeanDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS3ID3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_swigregister(itkContourMeanDistanceImageFilterIUS3ID3)
itkContourMeanDistanceImageFilterIUS3ID3___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3___New_orig__
itkContourMeanDistanceImageFilterIUS3ID3_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3ID3_cast


def itkContourMeanDistanceImageFilterIUS3IF3_New():
    return itkContourMeanDistanceImageFilterIUS3IF3.New()

class itkContourMeanDistanceImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the Mean distance between the boundaries of non-zero regions
    of two images.

    ContourMeanDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) =
    \\mathrm{mean}_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] is the dir ected Mean distance and $A$ and $B$ are respectively
    the set of non-zero pixels in the first and second input images.

    In particular, this filter uses the ContourDirectedMeanImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Mean distance measures the degree of mismatch between two sets and
    behaves like a metric over the set of all closed bounded sets - with
    properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:   ContourDirectedMeanDistanceImageFilter

    Teo Popa, ISIS Center, Georgetown University
    example{Filtering/DistanceMap/MeanDistanceBetweenAllPointsOnTwoCur
    ves,Mean Distance Between All Points On Two Curves} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_GetInput2)
    GetMeanDistance = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_GetMeanDistance)
    SetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_GetUseImageSpacing)
    InputHasNumericTraitsCheck = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkContourMeanDistanceImageFilterPython.delete_itkContourMeanDistanceImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkContourMeanDistanceImageFilterIUS3IF3

        Create a new object of the class itkContourMeanDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkContourMeanDistanceImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkContourMeanDistanceImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkContourMeanDistanceImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkContourMeanDistanceImageFilterIUS3IF3 in _itkContourMeanDistanceImageFilterPython:
_itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_swigregister(itkContourMeanDistanceImageFilterIUS3IF3)
itkContourMeanDistanceImageFilterIUS3IF3___New_orig__ = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3___New_orig__
itkContourMeanDistanceImageFilterIUS3IF3_cast = _itkContourMeanDistanceImageFilterPython.itkContourMeanDistanceImageFilterIUS3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def contour_mean_distance_image_filter(*args, **kwargs):
    """Procedural interface for ContourMeanDistanceImageFilter"""
    import itk
    instance = itk.ContourMeanDistanceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def contour_mean_distance_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ContourMeanDistanceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ContourMeanDistanceImageFilter.values()[0]
    else:
        filter_object = itk.ContourMeanDistanceImageFilter

    contour_mean_distance_image_filter.__doc__ = filter_object.__doc__
    contour_mean_distance_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    contour_mean_distance_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ContourMeanDistanceImageFilter, itkTemplate.itkTemplate):
        contour_mean_distance_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        contour_mean_distance_image_filter.__doc__ += "\n"
        contour_mean_distance_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        contour_mean_distance_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



