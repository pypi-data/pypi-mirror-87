# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaussianDerivativeOperatorPython
else:
    import _itkGaussianDerivativeOperatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGaussianDerivativeOperatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGaussianDerivativeOperatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkNeighborhoodOperatorPython
import itk.itkNeighborhoodPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
class itkGaussianDerivativeOperatorD2(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2):
    r"""


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete derivative Gaussian kernel.

    GaussianDerivativeOperator can be used to calculate Gaussian
    derivatives by taking its inner product with to a Neighborhood
    (NeighborhooIterator) that is swept across an image region. It is a
    directional operator. N successive applications oriented along each
    dimensional direction will calculate separable, efficient, N-D
    Gaussian derivatives of an image region.

    GaussianDerivativeOperator takes three parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The order of the derivative to be calculated (zero order means it
    performs only smoothing as a standard itk::GaussianOperator)

    (3) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation is derived from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    GaussianDerivativeOperator does not have any user-declared "special
    member function", following the C++ Rule of Zero: the compiler will
    generate them if necessary.

    See:   GaussianOperator

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_NormalizeAcrossScaleOff)
    SetVariance = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetVariance)
    GetVariance = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetVariance)
    SetSpacing = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetSpacing)
    SetMaximumError = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetMaximumKernelWidth)
    SetOrder = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_GetOrder)
    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorD2

    def __init__(self, *args):
        r"""
        __init__(itkGaussianDerivativeOperatorD2 self) -> itkGaussianDerivativeOperatorD2
        __init__(itkGaussianDerivativeOperatorD2 self, itkGaussianDerivativeOperatorD2 arg0) -> itkGaussianDerivativeOperatorD2


        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete derivative Gaussian kernel.

        GaussianDerivativeOperator can be used to calculate Gaussian
        derivatives by taking its inner product with to a Neighborhood
        (NeighborhooIterator) that is swept across an image region. It is a
        directional operator. N successive applications oriented along each
        dimensional direction will calculate separable, efficient, N-D
        Gaussian derivatives of an image region.

        GaussianDerivativeOperator takes three parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The order of the derivative to be calculated (zero order means it
        performs only smoothing as a standard itk::GaussianOperator)

        (3) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
        implementation is derived from the Insight Journal
        paper:https://hdl.handle.net/1926/1290

        GaussianDerivativeOperator does not have any user-declared "special
        member function", following the C++ Rule of Zero: the compiler will
        generate them if necessary.

        See:   GaussianOperator

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood 
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorD2(*args))

# Register itkGaussianDerivativeOperatorD2 in _itkGaussianDerivativeOperatorPython:
_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD2_swigregister(itkGaussianDerivativeOperatorD2)

class itkGaussianDerivativeOperatorD3(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3):
    r"""


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete derivative Gaussian kernel.

    GaussianDerivativeOperator can be used to calculate Gaussian
    derivatives by taking its inner product with to a Neighborhood
    (NeighborhooIterator) that is swept across an image region. It is a
    directional operator. N successive applications oriented along each
    dimensional direction will calculate separable, efficient, N-D
    Gaussian derivatives of an image region.

    GaussianDerivativeOperator takes three parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The order of the derivative to be calculated (zero order means it
    performs only smoothing as a standard itk::GaussianOperator)

    (3) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation is derived from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    GaussianDerivativeOperator does not have any user-declared "special
    member function", following the C++ Rule of Zero: the compiler will
    generate them if necessary.

    See:   GaussianOperator

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_NormalizeAcrossScaleOff)
    SetVariance = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetVariance)
    GetVariance = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetVariance)
    SetSpacing = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetSpacing)
    SetMaximumError = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetMaximumKernelWidth)
    SetOrder = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_GetOrder)
    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorD3

    def __init__(self, *args):
        r"""
        __init__(itkGaussianDerivativeOperatorD3 self) -> itkGaussianDerivativeOperatorD3
        __init__(itkGaussianDerivativeOperatorD3 self, itkGaussianDerivativeOperatorD3 arg0) -> itkGaussianDerivativeOperatorD3


        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete derivative Gaussian kernel.

        GaussianDerivativeOperator can be used to calculate Gaussian
        derivatives by taking its inner product with to a Neighborhood
        (NeighborhooIterator) that is swept across an image region. It is a
        directional operator. N successive applications oriented along each
        dimensional direction will calculate separable, efficient, N-D
        Gaussian derivatives of an image region.

        GaussianDerivativeOperator takes three parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The order of the derivative to be calculated (zero order means it
        performs only smoothing as a standard itk::GaussianOperator)

        (3) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
        implementation is derived from the Insight Journal
        paper:https://hdl.handle.net/1926/1290

        GaussianDerivativeOperator does not have any user-declared "special
        member function", following the C++ Rule of Zero: the compiler will
        generate them if necessary.

        See:   GaussianOperator

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood 
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorD3(*args))

# Register itkGaussianDerivativeOperatorD3 in _itkGaussianDerivativeOperatorPython:
_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorD3_swigregister(itkGaussianDerivativeOperatorD3)

class itkGaussianDerivativeOperatorEnums(object):
    r"""Proxy of C++ itkGaussianDerivativeOperatorEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    InterpolationMode_NearestNeighbourInterpolation = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorEnums_InterpolationMode_NearestNeighbourInterpolation
    
    InterpolationMode_LinearInterpolation = _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorEnums_InterpolationMode_LinearInterpolation
    

    def __init__(self, *args):
        r"""
        __init__(itkGaussianDerivativeOperatorEnums self) -> itkGaussianDerivativeOperatorEnums
        __init__(itkGaussianDerivativeOperatorEnums self, itkGaussianDerivativeOperatorEnums arg0) -> itkGaussianDerivativeOperatorEnums
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorEnums_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorEnums(*args))
    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorEnums

# Register itkGaussianDerivativeOperatorEnums in _itkGaussianDerivativeOperatorPython:
_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorEnums_swigregister(itkGaussianDerivativeOperatorEnums)

class itkGaussianDerivativeOperatorF2(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2):
    r"""


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete derivative Gaussian kernel.

    GaussianDerivativeOperator can be used to calculate Gaussian
    derivatives by taking its inner product with to a Neighborhood
    (NeighborhooIterator) that is swept across an image region. It is a
    directional operator. N successive applications oriented along each
    dimensional direction will calculate separable, efficient, N-D
    Gaussian derivatives of an image region.

    GaussianDerivativeOperator takes three parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The order of the derivative to be calculated (zero order means it
    performs only smoothing as a standard itk::GaussianOperator)

    (3) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation is derived from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    GaussianDerivativeOperator does not have any user-declared "special
    member function", following the C++ Rule of Zero: the compiler will
    generate them if necessary.

    See:   GaussianOperator

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_NormalizeAcrossScaleOff)
    SetVariance = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetVariance)
    GetVariance = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetVariance)
    SetSpacing = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetSpacing)
    SetMaximumError = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetMaximumKernelWidth)
    SetOrder = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_GetOrder)
    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorF2

    def __init__(self, *args):
        r"""
        __init__(itkGaussianDerivativeOperatorF2 self) -> itkGaussianDerivativeOperatorF2
        __init__(itkGaussianDerivativeOperatorF2 self, itkGaussianDerivativeOperatorF2 arg0) -> itkGaussianDerivativeOperatorF2


        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete derivative Gaussian kernel.

        GaussianDerivativeOperator can be used to calculate Gaussian
        derivatives by taking its inner product with to a Neighborhood
        (NeighborhooIterator) that is swept across an image region. It is a
        directional operator. N successive applications oriented along each
        dimensional direction will calculate separable, efficient, N-D
        Gaussian derivatives of an image region.

        GaussianDerivativeOperator takes three parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The order of the derivative to be calculated (zero order means it
        performs only smoothing as a standard itk::GaussianOperator)

        (3) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
        implementation is derived from the Insight Journal
        paper:https://hdl.handle.net/1926/1290

        GaussianDerivativeOperator does not have any user-declared "special
        member function", following the C++ Rule of Zero: the compiler will
        generate them if necessary.

        See:   GaussianOperator

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood 
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorF2(*args))

# Register itkGaussianDerivativeOperatorF2 in _itkGaussianDerivativeOperatorPython:
_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF2_swigregister(itkGaussianDerivativeOperatorF2)

class itkGaussianDerivativeOperatorF3(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3):
    r"""


    A NeighborhoodOperator whose coefficients are a one dimensional,
    discrete derivative Gaussian kernel.

    GaussianDerivativeOperator can be used to calculate Gaussian
    derivatives by taking its inner product with to a Neighborhood
    (NeighborhooIterator) that is swept across an image region. It is a
    directional operator. N successive applications oriented along each
    dimensional direction will calculate separable, efficient, N-D
    Gaussian derivatives of an image region.

    GaussianDerivativeOperator takes three parameters:

    (1) The floating-point variance of the desired Gaussian function.

    (2) The order of the derivative to be calculated (zero order means it
    performs only smoothing as a standard itk::GaussianOperator)

    (3) The "maximum error" allowed in the discrete Gaussian function.
    "Maximum errror" is defined as the difference between the area under
    the discrete Gaussian curve and the area under the continuous
    Gaussian. Maximum error affects the Gaussian operator size. Care
    should be taken not to make this value too small relative to the
    variance lest the operator size become unreasonably large.

    References: The Gaussian kernel contained in this operator was
    described by Tony Lindeberg (Discrete Scale-Space Theory and the
    Scale-Space Primal Sketch. Dissertation. Royal Institute of
    Technology, Stockholm, Sweden. May 1991.).

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation is derived from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    GaussianDerivativeOperator does not have any user-declared "special
    member function", following the C++ Rule of Zero: the compiler will
    generate them if necessary.

    See:   GaussianOperator

    See:   NeighborhoodOperator

    See:  NeighborhoodIterator

    See:   Neighborhood 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_NormalizeAcrossScaleOff)
    SetVariance = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetVariance)
    GetVariance = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetVariance)
    SetSpacing = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetSpacing)
    SetMaximumError = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetMaximumKernelWidth)
    SetOrder = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_GetOrder)
    __swig_destroy__ = _itkGaussianDerivativeOperatorPython.delete_itkGaussianDerivativeOperatorF3

    def __init__(self, *args):
        r"""
        __init__(itkGaussianDerivativeOperatorF3 self) -> itkGaussianDerivativeOperatorF3
        __init__(itkGaussianDerivativeOperatorF3 self, itkGaussianDerivativeOperatorF3 arg0) -> itkGaussianDerivativeOperatorF3


        A NeighborhoodOperator whose coefficients are a one dimensional,
        discrete derivative Gaussian kernel.

        GaussianDerivativeOperator can be used to calculate Gaussian
        derivatives by taking its inner product with to a Neighborhood
        (NeighborhooIterator) that is swept across an image region. It is a
        directional operator. N successive applications oriented along each
        dimensional direction will calculate separable, efficient, N-D
        Gaussian derivatives of an image region.

        GaussianDerivativeOperator takes three parameters:

        (1) The floating-point variance of the desired Gaussian function.

        (2) The order of the derivative to be calculated (zero order means it
        performs only smoothing as a standard itk::GaussianOperator)

        (3) The "maximum error" allowed in the discrete Gaussian function.
        "Maximum errror" is defined as the difference between the area under
        the discrete Gaussian curve and the area under the continuous
        Gaussian. Maximum error affects the Gaussian operator size. Care
        should be taken not to make this value too small relative to the
        variance lest the operator size become unreasonably large.

        References: The Gaussian kernel contained in this operator was
        described by Tony Lindeberg (Discrete Scale-Space Theory and the
        Scale-Space Primal Sketch. Dissertation. Royal Institute of
        Technology, Stockholm, Sweden. May 1991.).

        Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
        implementation is derived from the Insight Journal
        paper:https://hdl.handle.net/1926/1290

        GaussianDerivativeOperator does not have any user-declared "special
        member function", following the C++ Rule of Zero: the compiler will
        generate them if necessary.

        See:   GaussianOperator

        See:   NeighborhoodOperator

        See:  NeighborhoodIterator

        See:   Neighborhood 
        """
        _itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_swiginit(self, _itkGaussianDerivativeOperatorPython.new_itkGaussianDerivativeOperatorF3(*args))

# Register itkGaussianDerivativeOperatorF3 in _itkGaussianDerivativeOperatorPython:
_itkGaussianDerivativeOperatorPython.itkGaussianDerivativeOperatorF3_swigregister(itkGaussianDerivativeOperatorF3)



