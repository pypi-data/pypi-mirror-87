# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSignedMaurerDistanceMapImageFilterPython
else:
    import _itkSignedMaurerDistanceMapImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSignedMaurerDistanceMapImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSignedMaurerDistanceMapImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkSignedMaurerDistanceMapImageFilterID2ID2_New():
    return itkSignedMaurerDistanceMapImageFilterID2ID2.New()

class itkSignedMaurerDistanceMapImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterID2ID2
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterID2ID2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterID2ID2 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_swigregister(itkSignedMaurerDistanceMapImageFilterID2ID2)
itkSignedMaurerDistanceMapImageFilterID2ID2___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2___New_orig__
itkSignedMaurerDistanceMapImageFilterID2ID2_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID2ID2_cast


def itkSignedMaurerDistanceMapImageFilterID3ID3_New():
    return itkSignedMaurerDistanceMapImageFilterID3ID3.New()

class itkSignedMaurerDistanceMapImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterID3ID3
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterID3ID3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterID3ID3 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_swigregister(itkSignedMaurerDistanceMapImageFilterID3ID3)
itkSignedMaurerDistanceMapImageFilterID3ID3___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3___New_orig__
itkSignedMaurerDistanceMapImageFilterID3ID3_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterID3ID3_cast


def itkSignedMaurerDistanceMapImageFilterIF2IF2_New():
    return itkSignedMaurerDistanceMapImageFilterIF2IF2.New()

class itkSignedMaurerDistanceMapImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIF2IF2
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIF2IF2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIF2IF2 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_swigregister(itkSignedMaurerDistanceMapImageFilterIF2IF2)
itkSignedMaurerDistanceMapImageFilterIF2IF2___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2___New_orig__
itkSignedMaurerDistanceMapImageFilterIF2IF2_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF2IF2_cast


def itkSignedMaurerDistanceMapImageFilterIF3IF3_New():
    return itkSignedMaurerDistanceMapImageFilterIF3IF3.New()

class itkSignedMaurerDistanceMapImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIF3IF3
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIF3IF3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIF3IF3 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_swigregister(itkSignedMaurerDistanceMapImageFilterIF3IF3)
itkSignedMaurerDistanceMapImageFilterIF3IF3___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3___New_orig__
itkSignedMaurerDistanceMapImageFilterIF3IF3_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIF3IF3_cast


def itkSignedMaurerDistanceMapImageFilterISS2ISS2_New():
    return itkSignedMaurerDistanceMapImageFilterISS2ISS2.New()

class itkSignedMaurerDistanceMapImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterISS2ISS2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterISS2ISS2 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_swigregister(itkSignedMaurerDistanceMapImageFilterISS2ISS2)
itkSignedMaurerDistanceMapImageFilterISS2ISS2___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2___New_orig__
itkSignedMaurerDistanceMapImageFilterISS2ISS2_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS2ISS2_cast


def itkSignedMaurerDistanceMapImageFilterISS3ISS3_New():
    return itkSignedMaurerDistanceMapImageFilterISS3ISS3.New()

class itkSignedMaurerDistanceMapImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterISS3ISS3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterISS3ISS3 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_swigregister(itkSignedMaurerDistanceMapImageFilterISS3ISS3)
itkSignedMaurerDistanceMapImageFilterISS3ISS3___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3___New_orig__
itkSignedMaurerDistanceMapImageFilterISS3ISS3_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterISS3ISS3_cast


def itkSignedMaurerDistanceMapImageFilterIUC2ID2_New():
    return itkSignedMaurerDistanceMapImageFilterIUC2ID2.New()

class itkSignedMaurerDistanceMapImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ID2):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUC2ID2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIUC2ID2 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_swigregister(itkSignedMaurerDistanceMapImageFilterIUC2ID2)
itkSignedMaurerDistanceMapImageFilterIUC2ID2___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2___New_orig__
itkSignedMaurerDistanceMapImageFilterIUC2ID2_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2ID2_cast


def itkSignedMaurerDistanceMapImageFilterIUC2IF2_New():
    return itkSignedMaurerDistanceMapImageFilterIUC2IF2.New()

class itkSignedMaurerDistanceMapImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IF2):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUC2IF2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIUC2IF2 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_swigregister(itkSignedMaurerDistanceMapImageFilterIUC2IF2)
itkSignedMaurerDistanceMapImageFilterIUC2IF2___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2___New_orig__
itkSignedMaurerDistanceMapImageFilterIUC2IF2_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC2IF2_cast


def itkSignedMaurerDistanceMapImageFilterIUC3ID3_New():
    return itkSignedMaurerDistanceMapImageFilterIUC3ID3.New()

class itkSignedMaurerDistanceMapImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ID3):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUC3ID3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIUC3ID3 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_swigregister(itkSignedMaurerDistanceMapImageFilterIUC3ID3)
itkSignedMaurerDistanceMapImageFilterIUC3ID3___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3___New_orig__
itkSignedMaurerDistanceMapImageFilterIUC3ID3_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3ID3_cast


def itkSignedMaurerDistanceMapImageFilterIUC3IF3_New():
    return itkSignedMaurerDistanceMapImageFilterIUC3IF3.New()

class itkSignedMaurerDistanceMapImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IF3):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUC3IF3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIUC3IF3 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_swigregister(itkSignedMaurerDistanceMapImageFilterIUC3IF3)
itkSignedMaurerDistanceMapImageFilterIUC3IF3___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3___New_orig__
itkSignedMaurerDistanceMapImageFilterIUC3IF3_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUC3IF3_cast


def itkSignedMaurerDistanceMapImageFilterIUS2ID2_New():
    return itkSignedMaurerDistanceMapImageFilterIUS2ID2.New()

class itkSignedMaurerDistanceMapImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ID2):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUS2ID2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIUS2ID2 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_swigregister(itkSignedMaurerDistanceMapImageFilterIUS2ID2)
itkSignedMaurerDistanceMapImageFilterIUS2ID2___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2___New_orig__
itkSignedMaurerDistanceMapImageFilterIUS2ID2_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2ID2_cast


def itkSignedMaurerDistanceMapImageFilterIUS2IF2_New():
    return itkSignedMaurerDistanceMapImageFilterIUS2IF2.New()

class itkSignedMaurerDistanceMapImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IF2):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUS2IF2

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIUS2IF2 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_swigregister(itkSignedMaurerDistanceMapImageFilterIUS2IF2)
itkSignedMaurerDistanceMapImageFilterIUS2IF2___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2___New_orig__
itkSignedMaurerDistanceMapImageFilterIUS2IF2_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS2IF2_cast


def itkSignedMaurerDistanceMapImageFilterIUS3ID3_New():
    return itkSignedMaurerDistanceMapImageFilterIUS3ID3.New()

class itkSignedMaurerDistanceMapImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ID3):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUS3ID3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIUS3ID3 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_swigregister(itkSignedMaurerDistanceMapImageFilterIUS3ID3)
itkSignedMaurerDistanceMapImageFilterIUS3ID3___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3___New_orig__
itkSignedMaurerDistanceMapImageFilterIUS3ID3_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3ID3_cast


def itkSignedMaurerDistanceMapImageFilterIUS3IF3_New():
    return itkSignedMaurerDistanceMapImageFilterIUS3IF3.New()

class itkSignedMaurerDistanceMapImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IF3):
    r"""


    This filter calculates the Euclidean distance transform of a binary
    image in linear time for arbitrary dimensions.

    Inputs and Outputs This is an image-to-image filter. The
    dimensionality is arbitrary. The only dimensionality constraint is
    that the input and output images be of the same dimensions and size.
    To maintain integer arithmetic within the filter, the default output
    is the signed squared distance. This implies that the input image
    should be of type "unsigned int" or "int" whereas the output image
    is of type "int". Obviously, if the user wishes to utilize the image
    spacing or to have a filter with the Euclidean distance (as opposed to
    the squared distance), output image types of float or double should be
    used.  The inside is considered as having negative distances. Outside
    is treated as having positive distances. To change the convention, use
    the InsideIsPositive(bool) function.

    Parameters Set/GetBackgroundValue specifies the background of the
    value of the input binary image. Normally this is zero and, as such,
    zero is the default value. Other than that, the usage is completely
    analogous to the itk::DanielssonDistanceImageFilter class except it
    does not return the Voronoi map.  Reference: C. R. Maurer, Jr., R. Qi,
    and V. Raghavan, "A Linear Time Algorithm for Computing Exact
    Euclidean Distance Transforms of Binary Images in Arbitrary
    Dimensions", IEEE - Transactions on Pattern Analysis and Machine
    Intelligence, 25(2): 265-270, 2003.

    example{Filtering/DistanceMap/MaurerDistanceMapOfBinary,Maurer
    Distance Map Of Binary Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_Clone)
    SetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetSquaredDistance)
    GetSquaredDistance = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetSquaredDistance)
    SquaredDistanceOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SquaredDistanceOn)
    SquaredDistanceOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SquaredDistanceOff)
    SetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetInsideIsPositive)
    GetInsideIsPositive = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetInsideIsPositive)
    InsideIsPositiveOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_InsideIsPositiveOn)
    InsideIsPositiveOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_InsideIsPositiveOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_UseImageSpacingOff)
    SetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_GetBackgroundValue)
    __swig_destroy__ = _itkSignedMaurerDistanceMapImageFilterPython.delete_itkSignedMaurerDistanceMapImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSignedMaurerDistanceMapImageFilterIUS3IF3

        Create a new object of the class itkSignedMaurerDistanceMapImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSignedMaurerDistanceMapImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSignedMaurerDistanceMapImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSignedMaurerDistanceMapImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSignedMaurerDistanceMapImageFilterIUS3IF3 in _itkSignedMaurerDistanceMapImageFilterPython:
_itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_swigregister(itkSignedMaurerDistanceMapImageFilterIUS3IF3)
itkSignedMaurerDistanceMapImageFilterIUS3IF3___New_orig__ = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3___New_orig__
itkSignedMaurerDistanceMapImageFilterIUS3IF3_cast = _itkSignedMaurerDistanceMapImageFilterPython.itkSignedMaurerDistanceMapImageFilterIUS3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def signed_maurer_distance_map_image_filter(*args, **kwargs):
    """Procedural interface for SignedMaurerDistanceMapImageFilter"""
    import itk
    instance = itk.SignedMaurerDistanceMapImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def signed_maurer_distance_map_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.SignedMaurerDistanceMapImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.SignedMaurerDistanceMapImageFilter.values()[0]
    else:
        filter_object = itk.SignedMaurerDistanceMapImageFilter

    signed_maurer_distance_map_image_filter.__doc__ = filter_object.__doc__
    signed_maurer_distance_map_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    signed_maurer_distance_map_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.SignedMaurerDistanceMapImageFilter, itkTemplate.itkTemplate):
        signed_maurer_distance_map_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        signed_maurer_distance_map_image_filter.__doc__ += "\n"
        signed_maurer_distance_map_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        signed_maurer_distance_map_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



