# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFastMarchingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFastMarchingExtensionImageFilterPython
else:
    import _itkFastMarchingExtensionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFastMarchingExtensionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFastMarchingExtensionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorContainerPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkFastMarchingImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.ITKFastMarchingBasePython
import itk.itkLevelSetNodePython
import itk.itkNodePairPython
import itk.itkFastMarchingStoppingCriterionBasePython

def itkFastMarchingExtensionImageFilterID2UC1ID2_New():
    return itkFastMarchingExtensionImageFilterID2UC1ID2.New()

class itkFastMarchingExtensionImageFilterID2UC1ID2(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID2ID2):
    r"""


    Extend auxiliary variables smoothly using Fast Marching.

    Fast marching can be used to extend auxiliary variables smoothly from
    the zero level set. Starting from an initial position on the front,
    this class simultaneously calculate the signed distance and extend a
    set of auxiliary values.

    This class is templated over the level set image type, the auxiliary
    variable type and the number of auxiliary variables to extended. The
    initial front is specified by two containers: one containing the known
    points and one containing the trial points. The auxiliary variables on
    the front are represented by two auxiliary variable containers: one
    containing the value of the variables at the know points and on
    containing the value of the variables at the trail points.

    Implementation of this class is based on Chapter 11 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    For an alternative implementation, see
    itk::FastMarchingExtensionImageFilterBase.

    See:  FastMarchingExtensionImageFilterBase

    See:   FastMarchingImageFilter

    See:  LevelSetTypeDefault

    See:  AuxVarTypeDefault 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_Clone)
    GetAuxiliaryImage = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_GetAuxiliaryImage)
    SetAuxiliaryAliveValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_SetAuxiliaryAliveValues)
    GetAuxiliaryAliveValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_GetAuxiliaryAliveValues)
    SetAuxiliaryTrialValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_SetAuxiliaryTrialValues)
    GetAuxiliaryTrialValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_GetAuxiliaryTrialValues)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterID2UC1ID2
    cast = _swig_new_static_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterID2UC1ID2

        Create a new object of the class itkFastMarchingExtensionImageFilterID2UC1ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterID2UC1ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterID2UC1ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterID2UC1ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterID2UC1ID2 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_swigregister(itkFastMarchingExtensionImageFilterID2UC1ID2)
itkFastMarchingExtensionImageFilterID2UC1ID2___New_orig__ = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2___New_orig__
itkFastMarchingExtensionImageFilterID2UC1ID2_cast = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID2UC1ID2_cast


def itkFastMarchingExtensionImageFilterID3UC1ID3_New():
    return itkFastMarchingExtensionImageFilterID3UC1ID3.New()

class itkFastMarchingExtensionImageFilterID3UC1ID3(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterID3ID3):
    r"""


    Extend auxiliary variables smoothly using Fast Marching.

    Fast marching can be used to extend auxiliary variables smoothly from
    the zero level set. Starting from an initial position on the front,
    this class simultaneously calculate the signed distance and extend a
    set of auxiliary values.

    This class is templated over the level set image type, the auxiliary
    variable type and the number of auxiliary variables to extended. The
    initial front is specified by two containers: one containing the known
    points and one containing the trial points. The auxiliary variables on
    the front are represented by two auxiliary variable containers: one
    containing the value of the variables at the know points and on
    containing the value of the variables at the trail points.

    Implementation of this class is based on Chapter 11 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    For an alternative implementation, see
    itk::FastMarchingExtensionImageFilterBase.

    See:  FastMarchingExtensionImageFilterBase

    See:   FastMarchingImageFilter

    See:  LevelSetTypeDefault

    See:  AuxVarTypeDefault 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_Clone)
    GetAuxiliaryImage = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_GetAuxiliaryImage)
    SetAuxiliaryAliveValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_SetAuxiliaryAliveValues)
    GetAuxiliaryAliveValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_GetAuxiliaryAliveValues)
    SetAuxiliaryTrialValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_SetAuxiliaryTrialValues)
    GetAuxiliaryTrialValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_GetAuxiliaryTrialValues)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterID3UC1ID3
    cast = _swig_new_static_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterID3UC1ID3

        Create a new object of the class itkFastMarchingExtensionImageFilterID3UC1ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterID3UC1ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterID3UC1ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterID3UC1ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterID3UC1ID3 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_swigregister(itkFastMarchingExtensionImageFilterID3UC1ID3)
itkFastMarchingExtensionImageFilterID3UC1ID3___New_orig__ = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3___New_orig__
itkFastMarchingExtensionImageFilterID3UC1ID3_cast = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterID3UC1ID3_cast


def itkFastMarchingExtensionImageFilterIF2UC1IF2_New():
    return itkFastMarchingExtensionImageFilterIF2UC1IF2.New()

class itkFastMarchingExtensionImageFilterIF2UC1IF2(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF2IF2):
    r"""


    Extend auxiliary variables smoothly using Fast Marching.

    Fast marching can be used to extend auxiliary variables smoothly from
    the zero level set. Starting from an initial position on the front,
    this class simultaneously calculate the signed distance and extend a
    set of auxiliary values.

    This class is templated over the level set image type, the auxiliary
    variable type and the number of auxiliary variables to extended. The
    initial front is specified by two containers: one containing the known
    points and one containing the trial points. The auxiliary variables on
    the front are represented by two auxiliary variable containers: one
    containing the value of the variables at the know points and on
    containing the value of the variables at the trail points.

    Implementation of this class is based on Chapter 11 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    For an alternative implementation, see
    itk::FastMarchingExtensionImageFilterBase.

    See:  FastMarchingExtensionImageFilterBase

    See:   FastMarchingImageFilter

    See:  LevelSetTypeDefault

    See:  AuxVarTypeDefault 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_Clone)
    GetAuxiliaryImage = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_GetAuxiliaryImage)
    SetAuxiliaryAliveValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_SetAuxiliaryAliveValues)
    GetAuxiliaryAliveValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_GetAuxiliaryAliveValues)
    SetAuxiliaryTrialValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_SetAuxiliaryTrialValues)
    GetAuxiliaryTrialValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_GetAuxiliaryTrialValues)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterIF2UC1IF2
    cast = _swig_new_static_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterIF2UC1IF2

        Create a new object of the class itkFastMarchingExtensionImageFilterIF2UC1IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterIF2UC1IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterIF2UC1IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterIF2UC1IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterIF2UC1IF2 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_swigregister(itkFastMarchingExtensionImageFilterIF2UC1IF2)
itkFastMarchingExtensionImageFilterIF2UC1IF2___New_orig__ = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2___New_orig__
itkFastMarchingExtensionImageFilterIF2UC1IF2_cast = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF2UC1IF2_cast


def itkFastMarchingExtensionImageFilterIF3UC1IF3_New():
    return itkFastMarchingExtensionImageFilterIF3UC1IF3.New()

class itkFastMarchingExtensionImageFilterIF3UC1IF3(itk.itkFastMarchingImageFilterPython.itkFastMarchingImageFilterIF3IF3):
    r"""


    Extend auxiliary variables smoothly using Fast Marching.

    Fast marching can be used to extend auxiliary variables smoothly from
    the zero level set. Starting from an initial position on the front,
    this class simultaneously calculate the signed distance and extend a
    set of auxiliary values.

    This class is templated over the level set image type, the auxiliary
    variable type and the number of auxiliary variables to extended. The
    initial front is specified by two containers: one containing the known
    points and one containing the trial points. The auxiliary variables on
    the front are represented by two auxiliary variable containers: one
    containing the value of the variables at the know points and on
    containing the value of the variables at the trail points.

    Implementation of this class is based on Chapter 11 of "Level Set
    Methods and Fast Marching Methods", J.A. Sethian, Cambridge Press,
    Second edition, 1999.

    For an alternative implementation, see
    itk::FastMarchingExtensionImageFilterBase.

    See:  FastMarchingExtensionImageFilterBase

    See:   FastMarchingImageFilter

    See:  LevelSetTypeDefault

    See:  AuxVarTypeDefault 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_Clone)
    GetAuxiliaryImage = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_GetAuxiliaryImage)
    SetAuxiliaryAliveValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_SetAuxiliaryAliveValues)
    GetAuxiliaryAliveValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_GetAuxiliaryAliveValues)
    SetAuxiliaryTrialValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_SetAuxiliaryTrialValues)
    GetAuxiliaryTrialValues = _swig_new_instance_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_GetAuxiliaryTrialValues)
    AuxValueHasNumericTraitsCheck = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_AuxValueHasNumericTraitsCheck
    
    __swig_destroy__ = _itkFastMarchingExtensionImageFilterPython.delete_itkFastMarchingExtensionImageFilterIF3UC1IF3
    cast = _swig_new_static_method(_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_cast)

    def New(*args, **kargs):
        """New() -> itkFastMarchingExtensionImageFilterIF3UC1IF3

        Create a new object of the class itkFastMarchingExtensionImageFilterIF3UC1IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFastMarchingExtensionImageFilterIF3UC1IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFastMarchingExtensionImageFilterIF3UC1IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFastMarchingExtensionImageFilterIF3UC1IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFastMarchingExtensionImageFilterIF3UC1IF3 in _itkFastMarchingExtensionImageFilterPython:
_itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_swigregister(itkFastMarchingExtensionImageFilterIF3UC1IF3)
itkFastMarchingExtensionImageFilterIF3UC1IF3___New_orig__ = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3___New_orig__
itkFastMarchingExtensionImageFilterIF3UC1IF3_cast = _itkFastMarchingExtensionImageFilterPython.itkFastMarchingExtensionImageFilterIF3UC1IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fast_marching_extension_image_filter(*args, **kwargs):
    """Procedural interface for FastMarchingExtensionImageFilter"""
    import itk
    instance = itk.FastMarchingExtensionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fast_marching_extension_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FastMarchingExtensionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FastMarchingExtensionImageFilter.values()[0]
    else:
        filter_object = itk.FastMarchingExtensionImageFilter

    fast_marching_extension_image_filter.__doc__ = filter_object.__doc__
    fast_marching_extension_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fast_marching_extension_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FastMarchingExtensionImageFilter, itkTemplate.itkTemplate):
        fast_marching_extension_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fast_marching_extension_image_filter.__doc__ += "\n"
        fast_marching_extension_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fast_marching_extension_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



