# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMathematicalMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDoubleThresholdImageFilterPython
else:
    import _itkDoubleThresholdImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDoubleThresholdImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDoubleThresholdImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkDoubleThresholdImageFilterID2ID2_New():
    return itkDoubleThresholdImageFilterID2ID2.New()

class itkDoubleThresholdImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterID2ID2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterID2ID2

        Create a new object of the class itkDoubleThresholdImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterID2ID2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_swigregister(itkDoubleThresholdImageFilterID2ID2)
itkDoubleThresholdImageFilterID2ID2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2___New_orig__
itkDoubleThresholdImageFilterID2ID2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2ID2_cast


def itkDoubleThresholdImageFilterID2IUC2_New():
    return itkDoubleThresholdImageFilterID2IUC2.New()

class itkDoubleThresholdImageFilterID2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterID2IUC2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterID2IUC2

        Create a new object of the class itkDoubleThresholdImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterID2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterID2IUC2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_swigregister(itkDoubleThresholdImageFilterID2IUC2)
itkDoubleThresholdImageFilterID2IUC2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2___New_orig__
itkDoubleThresholdImageFilterID2IUC2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUC2_cast


def itkDoubleThresholdImageFilterID2IUS2_New():
    return itkDoubleThresholdImageFilterID2IUS2.New()

class itkDoubleThresholdImageFilterID2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterID2IUS2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterID2IUS2

        Create a new object of the class itkDoubleThresholdImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterID2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterID2IUS2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_swigregister(itkDoubleThresholdImageFilterID2IUS2)
itkDoubleThresholdImageFilterID2IUS2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2___New_orig__
itkDoubleThresholdImageFilterID2IUS2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID2IUS2_cast


def itkDoubleThresholdImageFilterID3ID3_New():
    return itkDoubleThresholdImageFilterID3ID3.New()

class itkDoubleThresholdImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterID3ID3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterID3ID3

        Create a new object of the class itkDoubleThresholdImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterID3ID3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_swigregister(itkDoubleThresholdImageFilterID3ID3)
itkDoubleThresholdImageFilterID3ID3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3___New_orig__
itkDoubleThresholdImageFilterID3ID3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3ID3_cast


def itkDoubleThresholdImageFilterID3IUC3_New():
    return itkDoubleThresholdImageFilterID3IUC3.New()

class itkDoubleThresholdImageFilterID3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterID3IUC3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterID3IUC3

        Create a new object of the class itkDoubleThresholdImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterID3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterID3IUC3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_swigregister(itkDoubleThresholdImageFilterID3IUC3)
itkDoubleThresholdImageFilterID3IUC3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3___New_orig__
itkDoubleThresholdImageFilterID3IUC3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUC3_cast


def itkDoubleThresholdImageFilterID3IUS3_New():
    return itkDoubleThresholdImageFilterID3IUS3.New()

class itkDoubleThresholdImageFilterID3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterID3IUS3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterID3IUS3

        Create a new object of the class itkDoubleThresholdImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterID3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterID3IUS3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_swigregister(itkDoubleThresholdImageFilterID3IUS3)
itkDoubleThresholdImageFilterID3IUS3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3___New_orig__
itkDoubleThresholdImageFilterID3IUS3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterID3IUS3_cast


def itkDoubleThresholdImageFilterIF2IF2_New():
    return itkDoubleThresholdImageFilterIF2IF2.New()

class itkDoubleThresholdImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIF2IF2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIF2IF2

        Create a new object of the class itkDoubleThresholdImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIF2IF2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_swigregister(itkDoubleThresholdImageFilterIF2IF2)
itkDoubleThresholdImageFilterIF2IF2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2___New_orig__
itkDoubleThresholdImageFilterIF2IF2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IF2_cast


def itkDoubleThresholdImageFilterIF2IUC2_New():
    return itkDoubleThresholdImageFilterIF2IUC2.New()

class itkDoubleThresholdImageFilterIF2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIF2IUC2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIF2IUC2

        Create a new object of the class itkDoubleThresholdImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIF2IUC2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_swigregister(itkDoubleThresholdImageFilterIF2IUC2)
itkDoubleThresholdImageFilterIF2IUC2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2___New_orig__
itkDoubleThresholdImageFilterIF2IUC2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUC2_cast


def itkDoubleThresholdImageFilterIF2IUS2_New():
    return itkDoubleThresholdImageFilterIF2IUS2.New()

class itkDoubleThresholdImageFilterIF2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIF2IUS2

        Create a new object of the class itkDoubleThresholdImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIF2IUS2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_swigregister(itkDoubleThresholdImageFilterIF2IUS2)
itkDoubleThresholdImageFilterIF2IUS2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2___New_orig__
itkDoubleThresholdImageFilterIF2IUS2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF2IUS2_cast


def itkDoubleThresholdImageFilterIF3IF3_New():
    return itkDoubleThresholdImageFilterIF3IF3.New()

class itkDoubleThresholdImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIF3IF3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIF3IF3

        Create a new object of the class itkDoubleThresholdImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIF3IF3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_swigregister(itkDoubleThresholdImageFilterIF3IF3)
itkDoubleThresholdImageFilterIF3IF3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3___New_orig__
itkDoubleThresholdImageFilterIF3IF3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IF3_cast


def itkDoubleThresholdImageFilterIF3IUC3_New():
    return itkDoubleThresholdImageFilterIF3IUC3.New()

class itkDoubleThresholdImageFilterIF3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIF3IUC3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIF3IUC3

        Create a new object of the class itkDoubleThresholdImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIF3IUC3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_swigregister(itkDoubleThresholdImageFilterIF3IUC3)
itkDoubleThresholdImageFilterIF3IUC3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3___New_orig__
itkDoubleThresholdImageFilterIF3IUC3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUC3_cast


def itkDoubleThresholdImageFilterIF3IUS3_New():
    return itkDoubleThresholdImageFilterIF3IUS3.New()

class itkDoubleThresholdImageFilterIF3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIF3IUS3

        Create a new object of the class itkDoubleThresholdImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIF3IUS3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_swigregister(itkDoubleThresholdImageFilterIF3IUS3)
itkDoubleThresholdImageFilterIF3IUS3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3___New_orig__
itkDoubleThresholdImageFilterIF3IUS3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIF3IUS3_cast


def itkDoubleThresholdImageFilterISS2ISS2_New():
    return itkDoubleThresholdImageFilterISS2ISS2.New()

class itkDoubleThresholdImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterISS2ISS2

        Create a new object of the class itkDoubleThresholdImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterISS2ISS2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_swigregister(itkDoubleThresholdImageFilterISS2ISS2)
itkDoubleThresholdImageFilterISS2ISS2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2___New_orig__
itkDoubleThresholdImageFilterISS2ISS2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS2ISS2_cast


def itkDoubleThresholdImageFilterISS3ISS3_New():
    return itkDoubleThresholdImageFilterISS3ISS3.New()

class itkDoubleThresholdImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterISS3ISS3

        Create a new object of the class itkDoubleThresholdImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterISS3ISS3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_swigregister(itkDoubleThresholdImageFilterISS3ISS3)
itkDoubleThresholdImageFilterISS3ISS3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3___New_orig__
itkDoubleThresholdImageFilterISS3ISS3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterISS3ISS3_cast


def itkDoubleThresholdImageFilterIUC2IUC2_New():
    return itkDoubleThresholdImageFilterIUC2IUC2.New()

class itkDoubleThresholdImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIUC2IUC2

        Create a new object of the class itkDoubleThresholdImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIUC2IUC2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_swigregister(itkDoubleThresholdImageFilterIUC2IUC2)
itkDoubleThresholdImageFilterIUC2IUC2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2___New_orig__
itkDoubleThresholdImageFilterIUC2IUC2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC2IUC2_cast


def itkDoubleThresholdImageFilterIUC3IUC3_New():
    return itkDoubleThresholdImageFilterIUC3IUC3.New()

class itkDoubleThresholdImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIUC3IUC3

        Create a new object of the class itkDoubleThresholdImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIUC3IUC3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_swigregister(itkDoubleThresholdImageFilterIUC3IUC3)
itkDoubleThresholdImageFilterIUC3IUC3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3___New_orig__
itkDoubleThresholdImageFilterIUC3IUC3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUC3IUC3_cast


def itkDoubleThresholdImageFilterIUS2IUS2_New():
    return itkDoubleThresholdImageFilterIUS2IUS2.New()

class itkDoubleThresholdImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIUS2IUS2

        Create a new object of the class itkDoubleThresholdImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIUS2IUS2 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_swigregister(itkDoubleThresholdImageFilterIUS2IUS2)
itkDoubleThresholdImageFilterIUS2IUS2___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2___New_orig__
itkDoubleThresholdImageFilterIUS2IUS2_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS2IUS2_cast


def itkDoubleThresholdImageFilterIUS3IUS3_New():
    return itkDoubleThresholdImageFilterIUS3IUS3.New()

class itkDoubleThresholdImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Binarize an input image using double thresholding.

    Double threshold addresses the difficulty in selecting a threshold
    that will select the objects of interest without selecting extraneous
    objects. Double threshold considers two threshold ranges: a narrow
    range and a wide range (where the wide range encompasses the narrow
    range). If the wide range was used for a traditional threshold (where
    values inside the range map to the foreground and values outside the
    range map to the background), many extraneous pixels may survive the
    threshold operation. If the narrow range was used for a traditional
    threshold, then too few pixels may survive the threshold.

    Double threshold uses the narrow threshold image as a marker image and
    the wide threshold image as a mask image in the geodesic dilation.
    Essentially, the marker image (narrow threshold) is dilated but
    constrained to lie within the mask image (wide threshold). Thus, only
    the objects of interest (those pixels that survived the narrow
    threshold) are extracted but the those objects appear in the final
    image as they would have if the wide threshold was used.

    See:   GrayscaleGeodesicDilateImageFilter

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_GetInsideValue)
    SetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_SetThreshold1)
    SetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_SetThreshold2)
    SetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_SetThreshold3)
    SetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_SetThreshold4)
    GetThreshold1 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_GetThreshold1)
    GetThreshold2 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_GetThreshold2)
    GetThreshold3 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_GetThreshold3)
    GetThreshold4 = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_GetThreshold4)
    SetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_FullyConnectedOff)
    OutputEqualityComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_OutputEqualityComparableCheck
    
    InputComparableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_InputComparableCheck
    
    InputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkDoubleThresholdImageFilterPython.delete_itkDoubleThresholdImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkDoubleThresholdImageFilterIUS3IUS3

        Create a new object of the class itkDoubleThresholdImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDoubleThresholdImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDoubleThresholdImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDoubleThresholdImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDoubleThresholdImageFilterIUS3IUS3 in _itkDoubleThresholdImageFilterPython:
_itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_swigregister(itkDoubleThresholdImageFilterIUS3IUS3)
itkDoubleThresholdImageFilterIUS3IUS3___New_orig__ = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3___New_orig__
itkDoubleThresholdImageFilterIUS3IUS3_cast = _itkDoubleThresholdImageFilterPython.itkDoubleThresholdImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def double_threshold_image_filter(*args, **kwargs):
    """Procedural interface for DoubleThresholdImageFilter"""
    import itk
    instance = itk.DoubleThresholdImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def double_threshold_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DoubleThresholdImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DoubleThresholdImageFilter.values()[0]
    else:
        filter_object = itk.DoubleThresholdImageFilter

    double_threshold_image_filter.__doc__ = filter_object.__doc__
    double_threshold_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    double_threshold_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DoubleThresholdImageFilter, itkTemplate.itkTemplate):
        double_threshold_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        double_threshold_image_filter.__doc__ += "\n"
        double_threshold_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        double_threshold_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



