# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToEntropyImageFilterPython
else:
    import _itkHistogramToEntropyImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHistogramToEntropyImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHistogramToEntropyImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkArrayPython

def itkHistogramToEntropyImageFilterHDID2_Superclass_New():
    return itkHistogramToEntropyImageFilterHDID2_Superclass.New()

class itkHistogramToEntropyImageFilterHDID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID2_Superclass
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID2_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_swigregister(itkHistogramToEntropyImageFilterHDID2_Superclass)
itkHistogramToEntropyImageFilterHDID2_Superclass___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass___New_orig__
itkHistogramToEntropyImageFilterHDID2_Superclass_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Superclass_cast


def itkHistogramToEntropyImageFilterHDID3_Superclass_New():
    return itkHistogramToEntropyImageFilterHDID3_Superclass.New()

class itkHistogramToEntropyImageFilterHDID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID3_Superclass
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID3_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_swigregister(itkHistogramToEntropyImageFilterHDID3_Superclass)
itkHistogramToEntropyImageFilterHDID3_Superclass___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass___New_orig__
itkHistogramToEntropyImageFilterHDID3_Superclass_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Superclass_cast


def itkHistogramToEntropyImageFilterHDIF2_Superclass_New():
    return itkHistogramToEntropyImageFilterHDIF2_Superclass.New()

class itkHistogramToEntropyImageFilterHDIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF2_Superclass
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF2_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_swigregister(itkHistogramToEntropyImageFilterHDIF2_Superclass)
itkHistogramToEntropyImageFilterHDIF2_Superclass___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass___New_orig__
itkHistogramToEntropyImageFilterHDIF2_Superclass_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Superclass_cast


def itkHistogramToEntropyImageFilterHDIF3_Superclass_New():
    return itkHistogramToEntropyImageFilterHDIF3_Superclass.New()

class itkHistogramToEntropyImageFilterHDIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHDIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF3_Superclass
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF3_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_swigregister(itkHistogramToEntropyImageFilterHDIF3_Superclass)
itkHistogramToEntropyImageFilterHDIF3_Superclass___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass___New_orig__
itkHistogramToEntropyImageFilterHDIF3_Superclass_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Superclass_cast


def itkHistogramToEntropyImageFilterHFID2_Superclass_New():
    return itkHistogramToEntropyImageFilterHFID2_Superclass.New()

class itkHistogramToEntropyImageFilterHFID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID2_Superclass
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID2_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_swigregister(itkHistogramToEntropyImageFilterHFID2_Superclass)
itkHistogramToEntropyImageFilterHFID2_Superclass___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass___New_orig__
itkHistogramToEntropyImageFilterHFID2_Superclass_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Superclass_cast


def itkHistogramToEntropyImageFilterHFID3_Superclass_New():
    return itkHistogramToEntropyImageFilterHFID3_Superclass.New()

class itkHistogramToEntropyImageFilterHFID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID3_Superclass
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID3_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_swigregister(itkHistogramToEntropyImageFilterHFID3_Superclass)
itkHistogramToEntropyImageFilterHFID3_Superclass___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass___New_orig__
itkHistogramToEntropyImageFilterHFID3_Superclass_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Superclass_cast


def itkHistogramToEntropyImageFilterHFIF2_Superclass_New():
    return itkHistogramToEntropyImageFilterHFIF2_Superclass.New()

class itkHistogramToEntropyImageFilterHFIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF2_Superclass
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF2_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_swigregister(itkHistogramToEntropyImageFilterHFIF2_Superclass)
itkHistogramToEntropyImageFilterHFIF2_Superclass___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass___New_orig__
itkHistogramToEntropyImageFilterHFIF2_Superclass_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Superclass_cast


def itkHistogramToEntropyImageFilterHFIF3_Superclass_New():
    return itkHistogramToEntropyImageFilterHFIF3_Superclass.New()

class itkHistogramToEntropyImageFilterHFIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToEntropyImageFilterHFIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF3_Superclass
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF3_Superclass in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_swigregister(itkHistogramToEntropyImageFilterHFIF3_Superclass)
itkHistogramToEntropyImageFilterHFIF3_Superclass___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass___New_orig__
itkHistogramToEntropyImageFilterHFIF3_Superclass_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Superclass_cast


def itkHistogramToEntropyImageFilterHDID2_New():
    return itkHistogramToEntropyImageFilterHDID2.New()

class itkHistogramToEntropyImageFilterHDID2(itkHistogramToEntropyImageFilterHDID2_Superclass):
    r"""


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_Clone)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID2
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID2

        Create a new object of the class itkHistogramToEntropyImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID2 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_swigregister(itkHistogramToEntropyImageFilterHDID2)
itkHistogramToEntropyImageFilterHDID2___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2___New_orig__
itkHistogramToEntropyImageFilterHDID2_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID2_cast


def itkHistogramToEntropyImageFilterHDID3_New():
    return itkHistogramToEntropyImageFilterHDID3.New()

class itkHistogramToEntropyImageFilterHDID3(itkHistogramToEntropyImageFilterHDID3_Superclass):
    r"""


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_Clone)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDID3
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDID3

        Create a new object of the class itkHistogramToEntropyImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDID3 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_swigregister(itkHistogramToEntropyImageFilterHDID3)
itkHistogramToEntropyImageFilterHDID3___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3___New_orig__
itkHistogramToEntropyImageFilterHDID3_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDID3_cast


def itkHistogramToEntropyImageFilterHDIF2_New():
    return itkHistogramToEntropyImageFilterHDIF2.New()

class itkHistogramToEntropyImageFilterHDIF2(itkHistogramToEntropyImageFilterHDIF2_Superclass):
    r"""


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_Clone)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF2
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF2

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF2 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_swigregister(itkHistogramToEntropyImageFilterHDIF2)
itkHistogramToEntropyImageFilterHDIF2___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2___New_orig__
itkHistogramToEntropyImageFilterHDIF2_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF2_cast


def itkHistogramToEntropyImageFilterHDIF3_New():
    return itkHistogramToEntropyImageFilterHDIF3.New()

class itkHistogramToEntropyImageFilterHDIF3(itkHistogramToEntropyImageFilterHDIF3_Superclass):
    r"""


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_Clone)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHDIF3
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHDIF3

        Create a new object of the class itkHistogramToEntropyImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHDIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHDIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHDIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHDIF3 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_swigregister(itkHistogramToEntropyImageFilterHDIF3)
itkHistogramToEntropyImageFilterHDIF3___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3___New_orig__
itkHistogramToEntropyImageFilterHDIF3_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHDIF3_cast


def itkHistogramToEntropyImageFilterHFID2_New():
    return itkHistogramToEntropyImageFilterHFID2.New()

class itkHistogramToEntropyImageFilterHFID2(itkHistogramToEntropyImageFilterHFID2_Superclass):
    r"""


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_Clone)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID2
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID2

        Create a new object of the class itkHistogramToEntropyImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID2 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_swigregister(itkHistogramToEntropyImageFilterHFID2)
itkHistogramToEntropyImageFilterHFID2___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2___New_orig__
itkHistogramToEntropyImageFilterHFID2_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID2_cast


def itkHistogramToEntropyImageFilterHFID3_New():
    return itkHistogramToEntropyImageFilterHFID3.New()

class itkHistogramToEntropyImageFilterHFID3(itkHistogramToEntropyImageFilterHFID3_Superclass):
    r"""


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_Clone)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFID3
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFID3

        Create a new object of the class itkHistogramToEntropyImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFID3 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_swigregister(itkHistogramToEntropyImageFilterHFID3)
itkHistogramToEntropyImageFilterHFID3___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3___New_orig__
itkHistogramToEntropyImageFilterHFID3_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFID3_cast


def itkHistogramToEntropyImageFilterHFIF2_New():
    return itkHistogramToEntropyImageFilterHFIF2.New()

class itkHistogramToEntropyImageFilterHFIF2(itkHistogramToEntropyImageFilterHFIF2_Superclass):
    r"""


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_Clone)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF2
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF2

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF2 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_swigregister(itkHistogramToEntropyImageFilterHFIF2)
itkHistogramToEntropyImageFilterHFIF2___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2___New_orig__
itkHistogramToEntropyImageFilterHFIF2_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF2_cast


def itkHistogramToEntropyImageFilterHFIF3_New():
    return itkHistogramToEntropyImageFilterHFIF3.New()

class itkHistogramToEntropyImageFilterHFIF3(itkHistogramToEntropyImageFilterHFIF3_Superclass):
    r"""


    The class takes a histogram as an input and gives the entropy image as
    the output. A pixel, at position I, in the output image is given by.

    \\[ f(I) = -p \\log_2 p \\]

    where \\[ p = \\frac{q_I}{\\sum_{i \\in I} q_I} \\] where
    $q_I$ is the frequency of measurement vector, I.

    $p$ is the frequency of a measurement vector by the sum of all
    frequencies = Probability of the the measurement vector

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToLogProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToProbabilityImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_Clone)
    __swig_destroy__ = _itkHistogramToEntropyImageFilterPython.delete_itkHistogramToEntropyImageFilterHFIF3
    cast = _swig_new_static_method(_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToEntropyImageFilterHFIF3

        Create a new object of the class itkHistogramToEntropyImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToEntropyImageFilterHFIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToEntropyImageFilterHFIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToEntropyImageFilterHFIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToEntropyImageFilterHFIF3 in _itkHistogramToEntropyImageFilterPython:
_itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_swigregister(itkHistogramToEntropyImageFilterHFIF3)
itkHistogramToEntropyImageFilterHFIF3___New_orig__ = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3___New_orig__
itkHistogramToEntropyImageFilterHFIF3_cast = _itkHistogramToEntropyImageFilterPython.itkHistogramToEntropyImageFilterHFIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToImageFilter"""
    import itk
    instance = itk.HistogramToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToImageFilter

    histogram_to_image_filter.__doc__ = filter_object.__doc__
    histogram_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        histogram_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        histogram_to_image_filter.__doc__ += "\n"
        histogram_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        histogram_to_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_entropy_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToEntropyImageFilter"""
    import itk
    instance = itk.HistogramToEntropyImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_entropy_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToEntropyImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToEntropyImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToEntropyImageFilter

    histogram_to_entropy_image_filter.__doc__ = filter_object.__doc__
    histogram_to_entropy_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_entropy_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HistogramToEntropyImageFilter, itkTemplate.itkTemplate):
        histogram_to_entropy_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        histogram_to_entropy_image_filter.__doc__ += "\n"
        histogram_to_entropy_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        histogram_to_entropy_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



