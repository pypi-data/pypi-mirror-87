# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormFieldSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'width': 'float',
        'is_required': 'bool',
        'use_as_folder_name': 'bool',
        'sender_email': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'width': 'width',
        'is_required': 'isRequired',
        'use_as_folder_name': 'useAsFolderName',
        'sender_email': 'senderEmail'
    }

    def __init__(self, description=None, width=None, is_required=None, use_as_folder_name=None, sender_email=None):  # noqa: E501
        """FormFieldSettings - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._width = None
        self._is_required = None
        self._use_as_folder_name = None
        self._sender_email = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if width is not None:
            self.width = width
        if is_required is not None:
            self.is_required = is_required
        if use_as_folder_name is not None:
            self.use_as_folder_name = use_as_folder_name
        if sender_email is not None:
            self.sender_email = sender_email

    @property
    def description(self):
        """Gets the description of this FormFieldSettings.  # noqa: E501

        Secondary description of field.  # noqa: E501

        :return: The description of this FormFieldSettings.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FormFieldSettings.

        Secondary description of field.  # noqa: E501

        :param description: The description of this FormFieldSettings.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def width(self):
        """Gets the width of this FormFieldSettings.  # noqa: E501

        How much of the available width the field should occupy  # noqa: E501

        :return: The width of this FormFieldSettings.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this FormFieldSettings.

        How much of the available width the field should occupy  # noqa: E501

        :param width: The width of this FormFieldSettings.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def is_required(self):
        """Gets the is_required of this FormFieldSettings.  # noqa: E501

        Whether this field must be completed before form can be submitted  # noqa: E501

        :return: The is_required of this FormFieldSettings.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this FormFieldSettings.

        Whether this field must be completed before form can be submitted  # noqa: E501

        :param is_required: The is_required of this FormFieldSettings.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def use_as_folder_name(self):
        """Gets the use_as_folder_name of this FormFieldSettings.  # noqa: E501

        Whether to place submitted files into a subfolder named the contents of this field. Only takes effect when the `fileDropCreateFolders` parameter on the receive folder is `true`. `isRequired` must be set to `true` if this setting is `true`.  # noqa: E501

        :return: The use_as_folder_name of this FormFieldSettings.  # noqa: E501
        :rtype: bool
        """
        return self._use_as_folder_name

    @use_as_folder_name.setter
    def use_as_folder_name(self, use_as_folder_name):
        """Sets the use_as_folder_name of this FormFieldSettings.

        Whether to place submitted files into a subfolder named the contents of this field. Only takes effect when the `fileDropCreateFolders` parameter on the receive folder is `true`. `isRequired` must be set to `true` if this setting is `true`.  # noqa: E501

        :param use_as_folder_name: The use_as_folder_name of this FormFieldSettings.  # noqa: E501
        :type: bool
        """

        self._use_as_folder_name = use_as_folder_name

    @property
    def sender_email(self):
        """Gets the sender_email of this FormFieldSettings.  # noqa: E501


        :return: The sender_email of this FormFieldSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sender_email

    @sender_email.setter
    def sender_email(self, sender_email):
        """Sets the sender_email of this FormFieldSettings.


        :param sender_email: The sender_email of this FormFieldSettings.  # noqa: E501
        :type: bool
        """

        self._sender_email = sender_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormFieldSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormFieldSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
