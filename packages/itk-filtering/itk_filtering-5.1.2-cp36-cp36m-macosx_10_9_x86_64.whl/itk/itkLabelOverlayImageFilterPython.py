# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFusionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelOverlayImageFilterPython
else:
    import _itkLabelOverlayImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLabelOverlayImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLabelOverlayImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkBinaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython
import itk.itkInPlaceImageFilterBPython

def itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_New():
    return itkLabelOverlayImageFilterIUC2ISS2IRGBUC2.New()

class itkLabelOverlayImageFilterIUC2ISS2IRGBUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2ISS2IRGBUC2):
    r"""


    Apply a colormap to a label image and put it on top of the input
    image.

    Apply a colormap to a label image and put it on top of the input
    image. The set of colors is a good selection of distinct colors. The
    opacity of the label image can be defined by the user. The user can
    also choose if the want to use a background and which label value is
    the background. A background label produce a gray pixel with the same
    intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This class was contributed to the Insight
    Journalhttps://hdl.handle.net/1926/172

    See:   LabelToRGBImageFilter

    See:   LabelMapOverlayImageFilter, LabelOverlayFunctor
    example{Filtering/ImageFusion/OverlayLabelMapOnImage,Overlay Label Map
    On Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_Clone)
    SetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_SetLabelImage)
    GetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_GetLabelImage)
    SetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_GetOpacity)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_GetBackgroundValue)
    OutputPixelShouldHaveValueType = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_OutputPixelShouldHaveValueType
    
    OutputPixelShouldHaveBracketOperator = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_OutputPixelShouldHaveBracketOperator
    
    ResetColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_AddColor)
    GetFunctor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_GetFunctor)
    __swig_destroy__ = _itkLabelOverlayImageFilterPython.delete_itkLabelOverlayImageFilterIUC2ISS2IRGBUC2
    cast = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelOverlayImageFilterIUC2ISS2IRGBUC2

        Create a new object of the class itkLabelOverlayImageFilterIUC2ISS2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelOverlayImageFilterIUC2ISS2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelOverlayImageFilterIUC2ISS2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelOverlayImageFilterIUC2ISS2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelOverlayImageFilterIUC2ISS2IRGBUC2 in _itkLabelOverlayImageFilterPython:
_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_swigregister(itkLabelOverlayImageFilterIUC2ISS2IRGBUC2)
itkLabelOverlayImageFilterIUC2ISS2IRGBUC2___New_orig__ = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2___New_orig__
itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_cast = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2ISS2IRGBUC2_cast


def itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_New():
    return itkLabelOverlayImageFilterIUC2IUC2IRGBUC2.New()

class itkLabelOverlayImageFilterIUC2IUC2IRGBUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IRGBUC2):
    r"""


    Apply a colormap to a label image and put it on top of the input
    image.

    Apply a colormap to a label image and put it on top of the input
    image. The set of colors is a good selection of distinct colors. The
    opacity of the label image can be defined by the user. The user can
    also choose if the want to use a background and which label value is
    the background. A background label produce a gray pixel with the same
    intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This class was contributed to the Insight
    Journalhttps://hdl.handle.net/1926/172

    See:   LabelToRGBImageFilter

    See:   LabelMapOverlayImageFilter, LabelOverlayFunctor
    example{Filtering/ImageFusion/OverlayLabelMapOnImage,Overlay Label Map
    On Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_Clone)
    SetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_SetLabelImage)
    GetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_GetLabelImage)
    SetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_GetOpacity)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_GetBackgroundValue)
    OutputPixelShouldHaveValueType = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_OutputPixelShouldHaveValueType
    
    OutputPixelShouldHaveBracketOperator = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_OutputPixelShouldHaveBracketOperator
    
    ResetColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_AddColor)
    GetFunctor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_GetFunctor)
    __swig_destroy__ = _itkLabelOverlayImageFilterPython.delete_itkLabelOverlayImageFilterIUC2IUC2IRGBUC2
    cast = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelOverlayImageFilterIUC2IUC2IRGBUC2

        Create a new object of the class itkLabelOverlayImageFilterIUC2IUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelOverlayImageFilterIUC2IUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelOverlayImageFilterIUC2IUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelOverlayImageFilterIUC2IUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelOverlayImageFilterIUC2IUC2IRGBUC2 in _itkLabelOverlayImageFilterPython:
_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_swigregister(itkLabelOverlayImageFilterIUC2IUC2IRGBUC2)
itkLabelOverlayImageFilterIUC2IUC2IRGBUC2___New_orig__ = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2___New_orig__
itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_cast = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUC2IRGBUC2_cast


def itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_New():
    return itkLabelOverlayImageFilterIUC2IUL2IRGBUC2.New()

class itkLabelOverlayImageFilterIUC2IUL2IRGBUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUL2IRGBUC2):
    r"""


    Apply a colormap to a label image and put it on top of the input
    image.

    Apply a colormap to a label image and put it on top of the input
    image. The set of colors is a good selection of distinct colors. The
    opacity of the label image can be defined by the user. The user can
    also choose if the want to use a background and which label value is
    the background. A background label produce a gray pixel with the same
    intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This class was contributed to the Insight
    Journalhttps://hdl.handle.net/1926/172

    See:   LabelToRGBImageFilter

    See:   LabelMapOverlayImageFilter, LabelOverlayFunctor
    example{Filtering/ImageFusion/OverlayLabelMapOnImage,Overlay Label Map
    On Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_Clone)
    SetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_SetLabelImage)
    GetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_GetLabelImage)
    SetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_GetOpacity)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_GetBackgroundValue)
    OutputPixelShouldHaveValueType = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_OutputPixelShouldHaveValueType
    
    OutputPixelShouldHaveBracketOperator = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_OutputPixelShouldHaveBracketOperator
    
    ResetColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_AddColor)
    GetFunctor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_GetFunctor)
    __swig_destroy__ = _itkLabelOverlayImageFilterPython.delete_itkLabelOverlayImageFilterIUC2IUL2IRGBUC2
    cast = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelOverlayImageFilterIUC2IUL2IRGBUC2

        Create a new object of the class itkLabelOverlayImageFilterIUC2IUL2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelOverlayImageFilterIUC2IUL2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelOverlayImageFilterIUC2IUL2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelOverlayImageFilterIUC2IUL2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelOverlayImageFilterIUC2IUL2IRGBUC2 in _itkLabelOverlayImageFilterPython:
_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_swigregister(itkLabelOverlayImageFilterIUC2IUL2IRGBUC2)
itkLabelOverlayImageFilterIUC2IUL2IRGBUC2___New_orig__ = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2___New_orig__
itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_cast = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUL2IRGBUC2_cast


def itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_New():
    return itkLabelOverlayImageFilterIUC2IUS2IRGBUC2.New()

class itkLabelOverlayImageFilterIUC2IUS2IRGBUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUS2IRGBUC2):
    r"""


    Apply a colormap to a label image and put it on top of the input
    image.

    Apply a colormap to a label image and put it on top of the input
    image. The set of colors is a good selection of distinct colors. The
    opacity of the label image can be defined by the user. The user can
    also choose if the want to use a background and which label value is
    the background. A background label produce a gray pixel with the same
    intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This class was contributed to the Insight
    Journalhttps://hdl.handle.net/1926/172

    See:   LabelToRGBImageFilter

    See:   LabelMapOverlayImageFilter, LabelOverlayFunctor
    example{Filtering/ImageFusion/OverlayLabelMapOnImage,Overlay Label Map
    On Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_Clone)
    SetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_SetLabelImage)
    GetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_GetLabelImage)
    SetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_GetOpacity)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_GetBackgroundValue)
    OutputPixelShouldHaveValueType = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_OutputPixelShouldHaveValueType
    
    OutputPixelShouldHaveBracketOperator = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_OutputPixelShouldHaveBracketOperator
    
    ResetColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_AddColor)
    GetFunctor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_GetFunctor)
    __swig_destroy__ = _itkLabelOverlayImageFilterPython.delete_itkLabelOverlayImageFilterIUC2IUS2IRGBUC2
    cast = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelOverlayImageFilterIUC2IUS2IRGBUC2

        Create a new object of the class itkLabelOverlayImageFilterIUC2IUS2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelOverlayImageFilterIUC2IUS2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelOverlayImageFilterIUC2IUS2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelOverlayImageFilterIUC2IUS2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelOverlayImageFilterIUC2IUS2IRGBUC2 in _itkLabelOverlayImageFilterPython:
_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_swigregister(itkLabelOverlayImageFilterIUC2IUS2IRGBUC2)
itkLabelOverlayImageFilterIUC2IUS2IRGBUC2___New_orig__ = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2___New_orig__
itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_cast = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC2IUS2IRGBUC2_cast


def itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_New():
    return itkLabelOverlayImageFilterIUC3ISS3IRGBUC3.New()

class itkLabelOverlayImageFilterIUC3ISS3IRGBUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3ISS3IRGBUC3):
    r"""


    Apply a colormap to a label image and put it on top of the input
    image.

    Apply a colormap to a label image and put it on top of the input
    image. The set of colors is a good selection of distinct colors. The
    opacity of the label image can be defined by the user. The user can
    also choose if the want to use a background and which label value is
    the background. A background label produce a gray pixel with the same
    intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This class was contributed to the Insight
    Journalhttps://hdl.handle.net/1926/172

    See:   LabelToRGBImageFilter

    See:   LabelMapOverlayImageFilter, LabelOverlayFunctor
    example{Filtering/ImageFusion/OverlayLabelMapOnImage,Overlay Label Map
    On Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_Clone)
    SetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_SetLabelImage)
    GetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_GetLabelImage)
    SetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_GetOpacity)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_GetBackgroundValue)
    OutputPixelShouldHaveValueType = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_OutputPixelShouldHaveValueType
    
    OutputPixelShouldHaveBracketOperator = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_OutputPixelShouldHaveBracketOperator
    
    ResetColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_AddColor)
    GetFunctor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_GetFunctor)
    __swig_destroy__ = _itkLabelOverlayImageFilterPython.delete_itkLabelOverlayImageFilterIUC3ISS3IRGBUC3
    cast = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelOverlayImageFilterIUC3ISS3IRGBUC3

        Create a new object of the class itkLabelOverlayImageFilterIUC3ISS3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelOverlayImageFilterIUC3ISS3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelOverlayImageFilterIUC3ISS3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelOverlayImageFilterIUC3ISS3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelOverlayImageFilterIUC3ISS3IRGBUC3 in _itkLabelOverlayImageFilterPython:
_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_swigregister(itkLabelOverlayImageFilterIUC3ISS3IRGBUC3)
itkLabelOverlayImageFilterIUC3ISS3IRGBUC3___New_orig__ = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3___New_orig__
itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_cast = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3ISS3IRGBUC3_cast


def itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_New():
    return itkLabelOverlayImageFilterIUC3IUC3IRGBUC3.New()

class itkLabelOverlayImageFilterIUC3IUC3IRGBUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IRGBUC3):
    r"""


    Apply a colormap to a label image and put it on top of the input
    image.

    Apply a colormap to a label image and put it on top of the input
    image. The set of colors is a good selection of distinct colors. The
    opacity of the label image can be defined by the user. The user can
    also choose if the want to use a background and which label value is
    the background. A background label produce a gray pixel with the same
    intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This class was contributed to the Insight
    Journalhttps://hdl.handle.net/1926/172

    See:   LabelToRGBImageFilter

    See:   LabelMapOverlayImageFilter, LabelOverlayFunctor
    example{Filtering/ImageFusion/OverlayLabelMapOnImage,Overlay Label Map
    On Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_Clone)
    SetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_SetLabelImage)
    GetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_GetLabelImage)
    SetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_GetOpacity)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_GetBackgroundValue)
    OutputPixelShouldHaveValueType = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_OutputPixelShouldHaveValueType
    
    OutputPixelShouldHaveBracketOperator = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_OutputPixelShouldHaveBracketOperator
    
    ResetColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_AddColor)
    GetFunctor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_GetFunctor)
    __swig_destroy__ = _itkLabelOverlayImageFilterPython.delete_itkLabelOverlayImageFilterIUC3IUC3IRGBUC3
    cast = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelOverlayImageFilterIUC3IUC3IRGBUC3

        Create a new object of the class itkLabelOverlayImageFilterIUC3IUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelOverlayImageFilterIUC3IUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelOverlayImageFilterIUC3IUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelOverlayImageFilterIUC3IUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelOverlayImageFilterIUC3IUC3IRGBUC3 in _itkLabelOverlayImageFilterPython:
_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_swigregister(itkLabelOverlayImageFilterIUC3IUC3IRGBUC3)
itkLabelOverlayImageFilterIUC3IUC3IRGBUC3___New_orig__ = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3___New_orig__
itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_cast = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUC3IRGBUC3_cast


def itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_New():
    return itkLabelOverlayImageFilterIUC3IUL3IRGBUC3.New()

class itkLabelOverlayImageFilterIUC3IUL3IRGBUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUL3IRGBUC3):
    r"""


    Apply a colormap to a label image and put it on top of the input
    image.

    Apply a colormap to a label image and put it on top of the input
    image. The set of colors is a good selection of distinct colors. The
    opacity of the label image can be defined by the user. The user can
    also choose if the want to use a background and which label value is
    the background. A background label produce a gray pixel with the same
    intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This class was contributed to the Insight
    Journalhttps://hdl.handle.net/1926/172

    See:   LabelToRGBImageFilter

    See:   LabelMapOverlayImageFilter, LabelOverlayFunctor
    example{Filtering/ImageFusion/OverlayLabelMapOnImage,Overlay Label Map
    On Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_Clone)
    SetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_SetLabelImage)
    GetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_GetLabelImage)
    SetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_GetOpacity)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_GetBackgroundValue)
    OutputPixelShouldHaveValueType = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_OutputPixelShouldHaveValueType
    
    OutputPixelShouldHaveBracketOperator = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_OutputPixelShouldHaveBracketOperator
    
    ResetColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_AddColor)
    GetFunctor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_GetFunctor)
    __swig_destroy__ = _itkLabelOverlayImageFilterPython.delete_itkLabelOverlayImageFilterIUC3IUL3IRGBUC3
    cast = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelOverlayImageFilterIUC3IUL3IRGBUC3

        Create a new object of the class itkLabelOverlayImageFilterIUC3IUL3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelOverlayImageFilterIUC3IUL3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelOverlayImageFilterIUC3IUL3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelOverlayImageFilterIUC3IUL3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelOverlayImageFilterIUC3IUL3IRGBUC3 in _itkLabelOverlayImageFilterPython:
_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_swigregister(itkLabelOverlayImageFilterIUC3IUL3IRGBUC3)
itkLabelOverlayImageFilterIUC3IUL3IRGBUC3___New_orig__ = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3___New_orig__
itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_cast = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUL3IRGBUC3_cast


def itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_New():
    return itkLabelOverlayImageFilterIUC3IUS3IRGBUC3.New()

class itkLabelOverlayImageFilterIUC3IUS3IRGBUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUS3IRGBUC3):
    r"""


    Apply a colormap to a label image and put it on top of the input
    image.

    Apply a colormap to a label image and put it on top of the input
    image. The set of colors is a good selection of distinct colors. The
    opacity of the label image can be defined by the user. The user can
    also choose if the want to use a background and which label value is
    the background. A background label produce a gray pixel with the same
    intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This class was contributed to the Insight
    Journalhttps://hdl.handle.net/1926/172

    See:   LabelToRGBImageFilter

    See:   LabelMapOverlayImageFilter, LabelOverlayFunctor
    example{Filtering/ImageFusion/OverlayLabelMapOnImage,Overlay Label Map
    On Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_Clone)
    SetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_SetLabelImage)
    GetLabelImage = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_GetLabelImage)
    SetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_GetOpacity)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_GetBackgroundValue)
    OutputPixelShouldHaveValueType = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_OutputPixelShouldHaveValueType
    
    OutputPixelShouldHaveBracketOperator = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_OutputPixelShouldHaveBracketOperator
    
    ResetColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_AddColor)
    GetFunctor = _swig_new_instance_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_GetFunctor)
    __swig_destroy__ = _itkLabelOverlayImageFilterPython.delete_itkLabelOverlayImageFilterIUC3IUS3IRGBUC3
    cast = _swig_new_static_method(_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelOverlayImageFilterIUC3IUS3IRGBUC3

        Create a new object of the class itkLabelOverlayImageFilterIUC3IUS3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelOverlayImageFilterIUC3IUS3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelOverlayImageFilterIUC3IUS3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelOverlayImageFilterIUC3IUS3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelOverlayImageFilterIUC3IUS3IRGBUC3 in _itkLabelOverlayImageFilterPython:
_itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_swigregister(itkLabelOverlayImageFilterIUC3IUS3IRGBUC3)
itkLabelOverlayImageFilterIUC3IUS3IRGBUC3___New_orig__ = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3___New_orig__
itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_cast = _itkLabelOverlayImageFilterPython.itkLabelOverlayImageFilterIUC3IUS3IRGBUC3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def label_overlay_image_filter(*args, **kwargs):
    """Procedural interface for LabelOverlayImageFilter"""
    import itk
    instance = itk.LabelOverlayImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def label_overlay_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LabelOverlayImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LabelOverlayImageFilter.values()[0]
    else:
        filter_object = itk.LabelOverlayImageFilter

    label_overlay_image_filter.__doc__ = filter_object.__doc__
    label_overlay_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    label_overlay_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LabelOverlayImageFilter, itkTemplate.itkTemplate):
        label_overlay_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        label_overlay_image_filter.__doc__ += "\n"
        label_overlay_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        label_overlay_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



