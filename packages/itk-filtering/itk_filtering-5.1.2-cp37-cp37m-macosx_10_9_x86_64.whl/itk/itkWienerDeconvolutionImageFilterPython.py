# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkWienerDeconvolutionImageFilterPython
else:
    import _itkWienerDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkWienerDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkWienerDeconvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkInverseDeconvolutionImageFilterPython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageBoundaryConditionPython

def itkWienerDeconvolutionImageFilterID2ID2_New():
    return itkWienerDeconvolutionImageFilterID2ID2.New()

class itkWienerDeconvolutionImageFilterID2ID2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterID2ID2

        Create a new object of the class itkWienerDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterID2ID2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_swigregister(itkWienerDeconvolutionImageFilterID2ID2)
itkWienerDeconvolutionImageFilterID2ID2___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2___New_orig__
itkWienerDeconvolutionImageFilterID2ID2_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID2ID2_cast


def itkWienerDeconvolutionImageFilterID3ID3_New():
    return itkWienerDeconvolutionImageFilterID3ID3.New()

class itkWienerDeconvolutionImageFilterID3ID3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterID3ID3

        Create a new object of the class itkWienerDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterID3ID3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_swigregister(itkWienerDeconvolutionImageFilterID3ID3)
itkWienerDeconvolutionImageFilterID3ID3___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3___New_orig__
itkWienerDeconvolutionImageFilterID3ID3_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterID3ID3_cast


def itkWienerDeconvolutionImageFilterIF2IF2_New():
    return itkWienerDeconvolutionImageFilterIF2IF2.New()

class itkWienerDeconvolutionImageFilterIF2IF2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkWienerDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIF2IF2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_swigregister(itkWienerDeconvolutionImageFilterIF2IF2)
itkWienerDeconvolutionImageFilterIF2IF2___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2___New_orig__
itkWienerDeconvolutionImageFilterIF2IF2_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF2IF2_cast


def itkWienerDeconvolutionImageFilterIF3IF3_New():
    return itkWienerDeconvolutionImageFilterIF3IF3.New()

class itkWienerDeconvolutionImageFilterIF3IF3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkWienerDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIF3IF3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_swigregister(itkWienerDeconvolutionImageFilterIF3IF3)
itkWienerDeconvolutionImageFilterIF3IF3___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3___New_orig__
itkWienerDeconvolutionImageFilterIF3IF3_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIF3IF3_cast


def itkWienerDeconvolutionImageFilterISS2ISS2_New():
    return itkWienerDeconvolutionImageFilterISS2ISS2.New()

class itkWienerDeconvolutionImageFilterISS2ISS2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkWienerDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterISS2ISS2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_swigregister(itkWienerDeconvolutionImageFilterISS2ISS2)
itkWienerDeconvolutionImageFilterISS2ISS2___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2___New_orig__
itkWienerDeconvolutionImageFilterISS2ISS2_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS2ISS2_cast


def itkWienerDeconvolutionImageFilterISS3ISS3_New():
    return itkWienerDeconvolutionImageFilterISS3ISS3.New()

class itkWienerDeconvolutionImageFilterISS3ISS3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkWienerDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterISS3ISS3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_swigregister(itkWienerDeconvolutionImageFilterISS3ISS3)
itkWienerDeconvolutionImageFilterISS3ISS3___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3___New_orig__
itkWienerDeconvolutionImageFilterISS3ISS3_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterISS3ISS3_cast


def itkWienerDeconvolutionImageFilterIUC2IUC2_New():
    return itkWienerDeconvolutionImageFilterIUC2IUC2.New()

class itkWienerDeconvolutionImageFilterIUC2IUC2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkWienerDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUC2IUC2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_swigregister(itkWienerDeconvolutionImageFilterIUC2IUC2)
itkWienerDeconvolutionImageFilterIUC2IUC2___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2___New_orig__
itkWienerDeconvolutionImageFilterIUC2IUC2_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC2IUC2_cast


def itkWienerDeconvolutionImageFilterIUC3IUC3_New():
    return itkWienerDeconvolutionImageFilterIUC3IUC3.New()

class itkWienerDeconvolutionImageFilterIUC3IUC3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkWienerDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUC3IUC3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_swigregister(itkWienerDeconvolutionImageFilterIUC3IUC3)
itkWienerDeconvolutionImageFilterIUC3IUC3___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3___New_orig__
itkWienerDeconvolutionImageFilterIUC3IUC3_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUC3IUC3_cast


def itkWienerDeconvolutionImageFilterIUS2IUS2_New():
    return itkWienerDeconvolutionImageFilterIUS2IUS2.New()

class itkWienerDeconvolutionImageFilterIUS2IUS2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkWienerDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUS2IUS2 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_swigregister(itkWienerDeconvolutionImageFilterIUS2IUS2)
itkWienerDeconvolutionImageFilterIUS2IUS2___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2___New_orig__
itkWienerDeconvolutionImageFilterIUS2IUS2_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS2IUS2_cast


def itkWienerDeconvolutionImageFilterIUS3IUS3_New():
    return itkWienerDeconvolutionImageFilterIUS3IUS3.New()

class itkWienerDeconvolutionImageFilterIUS3IUS3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3):
    r"""


    The Wiener deconvolution image filter is designed to restore an image
    convolved with a blurring kernel while keeping noise enhancement to a
    minimum.

    The Wiener filter aims to minimize noise enhancement induced by
    frequencies with low signal-to-noise ratio. The Wiener filter kernel
    is defined in the frequency domain as $W(\\omega) = H^*(\\omega) /
    (|H(\\omega)|^2 + (1 / SNR(\\omega)))$ where $H(\\omega)$ is the
    Fourier transform of the blurring kernel with which the original image
    was convolved and the signal-to-noise ratio $SNR(\\omega)$.
    $SNR(\\omega)$ is defined by $P_f(\\omega) / P_n(\\omega)$ where
    $P_f(\\omega)$ is the power spectral density of the uncorrupted
    signal and $P_n(\\omega)$ is the power spectral density of the
    noise. When applied to the input blurred image, this filter produces
    an estimate $\\hat{f}(x)$ of the true underlying signal $f(x)$ that
    minimizes the expected error between $\\hat{f}(x)$ and $f(x)$.

    This filter requires two inputs, the image to be deconvolved and the
    blurring kernel. These two inputs can be set using the methods
    SetInput() and SetKernelImage(), respectively.

    The power spectral densities of the signal and noise are typically
    unavailable for a given problem. In particular, $P_f(\\omega)$
    cannot be computed from $f(x)$ because this unknown signal is
    precisely the signal that this filter aims to recover. Nevertheless,
    it is common for the noise to have a power spectral density that is
    flat or decreasing significantly more slowly than the power spectral
    density of a typical image as the frequency $\\omega$ increases.
    Hence, $P_n(\\omega)$ can typically be approximated with a constant,
    and this filter makes this assumption (see the NoiseVariance member
    variable). $P_f(\\omega)$, on the other hand, will vary with input.
    This filter computes the power spectral density of the input blurred
    image, subtracts the power spectral density of the noise, and uses the
    result as the estimate of $P_f(\\omega)$.

    For further information on the Wiener deconvolution filter, please see
    "Digital Signal Processing" by Kenneth R. Castleman, Prentice Hall,
    1995

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Chris Mullins, The University of North Carolina at Chapel Hill

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_Clone)
    SetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_SetNoiseVariance)
    GetNoiseVariance = _swig_new_instance_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_GetNoiseVariance)
    __swig_destroy__ = _itkWienerDeconvolutionImageFilterPython.delete_itkWienerDeconvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkWienerDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkWienerDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkWienerDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkWienerDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkWienerDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkWienerDeconvolutionImageFilterIUS3IUS3 in _itkWienerDeconvolutionImageFilterPython:
_itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_swigregister(itkWienerDeconvolutionImageFilterIUS3IUS3)
itkWienerDeconvolutionImageFilterIUS3IUS3___New_orig__ = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3___New_orig__
itkWienerDeconvolutionImageFilterIUS3IUS3_cast = _itkWienerDeconvolutionImageFilterPython.itkWienerDeconvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def wiener_deconvolution_image_filter(*args, **kwargs):
    """Procedural interface for WienerDeconvolutionImageFilter"""
    import itk
    instance = itk.WienerDeconvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def wiener_deconvolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.WienerDeconvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.WienerDeconvolutionImageFilter.values()[0]
    else:
        filter_object = itk.WienerDeconvolutionImageFilter

    wiener_deconvolution_image_filter.__doc__ = filter_object.__doc__
    wiener_deconvolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    wiener_deconvolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.WienerDeconvolutionImageFilter, itkTemplate.itkTemplate):
        wiener_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        wiener_deconvolution_image_filter.__doc__ += "\n"
        wiener_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        wiener_deconvolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



