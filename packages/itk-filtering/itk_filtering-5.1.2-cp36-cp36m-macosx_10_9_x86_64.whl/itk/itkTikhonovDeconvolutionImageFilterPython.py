# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTikhonovDeconvolutionImageFilterPython
else:
    import _itkTikhonovDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTikhonovDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTikhonovDeconvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkInverseDeconvolutionImageFilterPython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageBoundaryConditionPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkTikhonovDeconvolutionImageFilterID2ID2_New():
    return itkTikhonovDeconvolutionImageFilterID2ID2.New()

class itkTikhonovDeconvolutionImageFilterID2ID2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterID2ID2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterID2ID2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_swigregister(itkTikhonovDeconvolutionImageFilterID2ID2)
itkTikhonovDeconvolutionImageFilterID2ID2___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2___New_orig__
itkTikhonovDeconvolutionImageFilterID2ID2_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID2ID2_cast


def itkTikhonovDeconvolutionImageFilterID3ID3_New():
    return itkTikhonovDeconvolutionImageFilterID3ID3.New()

class itkTikhonovDeconvolutionImageFilterID3ID3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterID3ID3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterID3ID3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_swigregister(itkTikhonovDeconvolutionImageFilterID3ID3)
itkTikhonovDeconvolutionImageFilterID3ID3___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3___New_orig__
itkTikhonovDeconvolutionImageFilterID3ID3_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterID3ID3_cast


def itkTikhonovDeconvolutionImageFilterIF2IF2_New():
    return itkTikhonovDeconvolutionImageFilterIF2IF2.New()

class itkTikhonovDeconvolutionImageFilterIF2IF2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIF2IF2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_swigregister(itkTikhonovDeconvolutionImageFilterIF2IF2)
itkTikhonovDeconvolutionImageFilterIF2IF2___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2___New_orig__
itkTikhonovDeconvolutionImageFilterIF2IF2_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF2IF2_cast


def itkTikhonovDeconvolutionImageFilterIF3IF3_New():
    return itkTikhonovDeconvolutionImageFilterIF3IF3.New()

class itkTikhonovDeconvolutionImageFilterIF3IF3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIF3IF3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_swigregister(itkTikhonovDeconvolutionImageFilterIF3IF3)
itkTikhonovDeconvolutionImageFilterIF3IF3___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3___New_orig__
itkTikhonovDeconvolutionImageFilterIF3IF3_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIF3IF3_cast


def itkTikhonovDeconvolutionImageFilterISS2ISS2_New():
    return itkTikhonovDeconvolutionImageFilterISS2ISS2.New()

class itkTikhonovDeconvolutionImageFilterISS2ISS2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterISS2ISS2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_swigregister(itkTikhonovDeconvolutionImageFilterISS2ISS2)
itkTikhonovDeconvolutionImageFilterISS2ISS2___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2___New_orig__
itkTikhonovDeconvolutionImageFilterISS2ISS2_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS2ISS2_cast


def itkTikhonovDeconvolutionImageFilterISS3ISS3_New():
    return itkTikhonovDeconvolutionImageFilterISS3ISS3.New()

class itkTikhonovDeconvolutionImageFilterISS3ISS3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterISS3ISS3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_swigregister(itkTikhonovDeconvolutionImageFilterISS3ISS3)
itkTikhonovDeconvolutionImageFilterISS3ISS3___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3___New_orig__
itkTikhonovDeconvolutionImageFilterISS3ISS3_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterISS3ISS3_cast


def itkTikhonovDeconvolutionImageFilterIUC2IUC2_New():
    return itkTikhonovDeconvolutionImageFilterIUC2IUC2.New()

class itkTikhonovDeconvolutionImageFilterIUC2IUC2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUC2IUC2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_swigregister(itkTikhonovDeconvolutionImageFilterIUC2IUC2)
itkTikhonovDeconvolutionImageFilterIUC2IUC2___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2___New_orig__
itkTikhonovDeconvolutionImageFilterIUC2IUC2_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC2IUC2_cast


def itkTikhonovDeconvolutionImageFilterIUC3IUC3_New():
    return itkTikhonovDeconvolutionImageFilterIUC3IUC3.New()

class itkTikhonovDeconvolutionImageFilterIUC3IUC3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUC3IUC3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_swigregister(itkTikhonovDeconvolutionImageFilterIUC3IUC3)
itkTikhonovDeconvolutionImageFilterIUC3IUC3___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3___New_orig__
itkTikhonovDeconvolutionImageFilterIUC3IUC3_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUC3IUC3_cast


def itkTikhonovDeconvolutionImageFilterIUS2IUS2_New():
    return itkTikhonovDeconvolutionImageFilterIUS2IUS2.New()

class itkTikhonovDeconvolutionImageFilterIUS2IUS2(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUS2IUS2 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_swigregister(itkTikhonovDeconvolutionImageFilterIUS2IUS2)
itkTikhonovDeconvolutionImageFilterIUS2IUS2___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2___New_orig__
itkTikhonovDeconvolutionImageFilterIUS2IUS2_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS2IUS2_cast


def itkTikhonovDeconvolutionImageFilterIUS3IUS3_New():
    return itkTikhonovDeconvolutionImageFilterIUS3IUS3.New()

class itkTikhonovDeconvolutionImageFilterIUS3IUS3(itk.itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3):
    r"""


    An inverse deconvolution filter regularized in the Tikhonov sense.

    The Tikhonov deconvolution filter is the inverse deconvolution filter
    with a regularization term added to the denominator. The filter
    minimizes the equation \\[ ||\\hat{f} \\otimes h - g||_{L_2}^2 +
    \\mu||\\hat{f}||^2 \\] where $\\hat{f}$ is the estimate of the
    unblurred image, $h$ is the blurring kernel, $g$ is the blurred image,
    and $\\mu$ is a non-negative real regularization function.

    The filter applies a kernel described in the Fourier domain as
    $H^*(\\omega) / (|H(\\omega)|^2 + \\mu)$ where $H(\\omega)$ is
    the Fourier transform of $h$. The term $\\mu$ is called
    RegularizationConstant in this filter. If $\\mu$ is set to zero,
    this filter is equivalent to the InverseDeconvolutionImageFilter.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_Clone)
    SetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_SetRegularizationConstant)
    GetRegularizationConstant = _swig_new_instance_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_GetRegularizationConstant)
    __swig_destroy__ = _itkTikhonovDeconvolutionImageFilterPython.delete_itkTikhonovDeconvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkTikhonovDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkTikhonovDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTikhonovDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTikhonovDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTikhonovDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTikhonovDeconvolutionImageFilterIUS3IUS3 in _itkTikhonovDeconvolutionImageFilterPython:
_itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_swigregister(itkTikhonovDeconvolutionImageFilterIUS3IUS3)
itkTikhonovDeconvolutionImageFilterIUS3IUS3___New_orig__ = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3___New_orig__
itkTikhonovDeconvolutionImageFilterIUS3IUS3_cast = _itkTikhonovDeconvolutionImageFilterPython.itkTikhonovDeconvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def tikhonov_deconvolution_image_filter(*args, **kwargs):
    """Procedural interface for TikhonovDeconvolutionImageFilter"""
    import itk
    instance = itk.TikhonovDeconvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def tikhonov_deconvolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TikhonovDeconvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.TikhonovDeconvolutionImageFilter.values()[0]
    else:
        filter_object = itk.TikhonovDeconvolutionImageFilter

    tikhonov_deconvolution_image_filter.__doc__ = filter_object.__doc__
    tikhonov_deconvolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    tikhonov_deconvolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.TikhonovDeconvolutionImageFilter, itkTemplate.itkTemplate):
        tikhonov_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        tikhonov_deconvolution_image_filter.__doc__ += "\n"
        tikhonov_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        tikhonov_deconvolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



