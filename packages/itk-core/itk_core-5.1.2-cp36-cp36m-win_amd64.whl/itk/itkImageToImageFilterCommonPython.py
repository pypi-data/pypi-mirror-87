# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageToImageFilterCommonPython
else:
    import _itkImageToImageFilterCommonPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageToImageFilterCommonPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageToImageFilterCommonPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.pyBasePython
class itkImageToImageFilterCommon(object):
    r"""


    Secondary base class of ImageToImageFilter common between templates.

    This class provides common non-templated code which can be compiled
    and used by all templated versions of ImageToImageFilter.

    This class must be inherited privately, and light-weight adapting of
    methods is required for virtual methods or non-private methods for the
    ImageToImageFilter interface. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SetGlobalDefaultCoordinateTolerance = _swig_new_static_method(_itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_SetGlobalDefaultCoordinateTolerance)
    GetGlobalDefaultCoordinateTolerance = _swig_new_static_method(_itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_GetGlobalDefaultCoordinateTolerance)
    SetGlobalDefaultDirectionTolerance = _swig_new_static_method(_itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_SetGlobalDefaultDirectionTolerance)
    GetGlobalDefaultDirectionTolerance = _swig_new_static_method(_itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_GetGlobalDefaultDirectionTolerance)

    def __init__(self, *args):
        r"""
        __init__(itkImageToImageFilterCommon self) -> itkImageToImageFilterCommon
        __init__(itkImageToImageFilterCommon self, itkImageToImageFilterCommon arg0) -> itkImageToImageFilterCommon


        Secondary base class of ImageToImageFilter common between templates.

        This class provides common non-templated code which can be compiled
        and used by all templated versions of ImageToImageFilter.

        This class must be inherited privately, and light-weight adapting of
        methods is required for virtual methods or non-private methods for the
        ImageToImageFilter interface. 
        """
        _itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_swiginit(self, _itkImageToImageFilterCommonPython.new_itkImageToImageFilterCommon(*args))
    __swig_destroy__ = _itkImageToImageFilterCommonPython.delete_itkImageToImageFilterCommon

# Register itkImageToImageFilterCommon in _itkImageToImageFilterCommonPython:
_itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_swigregister(itkImageToImageFilterCommon)
itkImageToImageFilterCommon_SetGlobalDefaultCoordinateTolerance = _itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_SetGlobalDefaultCoordinateTolerance
itkImageToImageFilterCommon_GetGlobalDefaultCoordinateTolerance = _itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_GetGlobalDefaultCoordinateTolerance
itkImageToImageFilterCommon_SetGlobalDefaultDirectionTolerance = _itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_SetGlobalDefaultDirectionTolerance
itkImageToImageFilterCommon_GetGlobalDefaultDirectionTolerance = _itkImageToImageFilterCommonPython.itkImageToImageFilterCommon_GetGlobalDefaultDirectionTolerance



