# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageComparePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAbsoluteValueDifferenceImageFilterPython
else:
    import _itkAbsoluteValueDifferenceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAbsoluteValueDifferenceImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAbsoluteValueDifferenceImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkBinaryGeneratorImageFilterPython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.stdcomplexPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkArrayPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkAbsoluteValueDifferenceImageFilterID2ID2ID2_New():
    return itkAbsoluteValueDifferenceImageFilterID2ID2ID2.New()

class itkAbsoluteValueDifferenceImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterID2ID2ID2
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterID2ID2ID2

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterID2ID2ID2 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2_swigregister(itkAbsoluteValueDifferenceImageFilterID2ID2ID2)
itkAbsoluteValueDifferenceImageFilterID2ID2ID2___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2___New_orig__
itkAbsoluteValueDifferenceImageFilterID2ID2ID2_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID2ID2ID2_cast


def itkAbsoluteValueDifferenceImageFilterID3ID3ID3_New():
    return itkAbsoluteValueDifferenceImageFilterID3ID3ID3.New()

class itkAbsoluteValueDifferenceImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterID3ID3ID3
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterID3ID3ID3

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterID3ID3ID3 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3_swigregister(itkAbsoluteValueDifferenceImageFilterID3ID3ID3)
itkAbsoluteValueDifferenceImageFilterID3ID3ID3___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3___New_orig__
itkAbsoluteValueDifferenceImageFilterID3ID3ID3_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterID3ID3ID3_cast


def itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_New():
    return itkAbsoluteValueDifferenceImageFilterIF2IF2IF2.New()

class itkAbsoluteValueDifferenceImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterIF2IF2IF2
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterIF2IF2IF2

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterIF2IF2IF2 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_swigregister(itkAbsoluteValueDifferenceImageFilterIF2IF2IF2)
itkAbsoluteValueDifferenceImageFilterIF2IF2IF2___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2___New_orig__
itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF2IF2IF2_cast


def itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_New():
    return itkAbsoluteValueDifferenceImageFilterIF3IF3IF3.New()

class itkAbsoluteValueDifferenceImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterIF3IF3IF3
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterIF3IF3IF3

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterIF3IF3IF3 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_swigregister(itkAbsoluteValueDifferenceImageFilterIF3IF3IF3)
itkAbsoluteValueDifferenceImageFilterIF3IF3IF3___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3___New_orig__
itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIF3IF3IF3_cast


def itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_New():
    return itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2.New()

class itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_swigregister(itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2)
itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2___New_orig__
itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS2ISS2ISS2_cast


def itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_New():
    return itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3.New()

class itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_swigregister(itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3)
itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3___New_orig__
itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterISS3ISS3ISS3_cast


def itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_New():
    return itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2.New()

class itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_swigregister(itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2)
itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2___New_orig__
itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC2IUC2IUC2_cast


def itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_New():
    return itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3.New()

class itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_swigregister(itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3)
itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3___New_orig__
itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUC3IUC3IUC3_cast


def itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_New():
    return itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2.New()

class itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_swigregister(itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2)
itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2___New_orig__
itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS2IUS2IUS2_cast


def itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_New():
    return itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3.New()

class itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""


    Implements pixel-wise the computation of absolute value difference.

    This filter is parameterized over the types of the two input images
    and the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    Cast the input 1 pixel value to double.

    Cast the input 2 pixel value to double.

    Compute the difference of the two pixel values.

    Compute the absolute value of the difference.

    Cast the double value resulting from the absolute value to the pixel
    type of the output image.

    Store the casted value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND).

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_Clone)
    Input1CovertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_Input1CovertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_Input2ConvertibleToDoubleCheck
    
    DoubleCovertibleToOutputCheck = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_DoubleCovertibleToOutputCheck
    
    __swig_destroy__ = _itkAbsoluteValueDifferenceImageFilterPython.delete_itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3
    cast = _swig_new_static_method(_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3

        Create a new object of the class itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3 in _itkAbsoluteValueDifferenceImageFilterPython:
_itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_swigregister(itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3)
itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3___New_orig__ = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3___New_orig__
itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_cast = _itkAbsoluteValueDifferenceImageFilterPython.itkAbsoluteValueDifferenceImageFilterIUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def absolute_value_difference_image_filter(*args, **kwargs):
    """Procedural interface for AbsoluteValueDifferenceImageFilter"""
    import itk
    instance = itk.AbsoluteValueDifferenceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def absolute_value_difference_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AbsoluteValueDifferenceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AbsoluteValueDifferenceImageFilter.values()[0]
    else:
        filter_object = itk.AbsoluteValueDifferenceImageFilter

    absolute_value_difference_image_filter.__doc__ = filter_object.__doc__
    absolute_value_difference_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    absolute_value_difference_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.AbsoluteValueDifferenceImageFilter, itkTemplate.itkTemplate):
        absolute_value_difference_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        absolute_value_difference_image_filter.__doc__ += "\n"
        absolute_value_difference_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        absolute_value_difference_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



