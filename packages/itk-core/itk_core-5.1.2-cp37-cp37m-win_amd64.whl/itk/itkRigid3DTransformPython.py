# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKTransformPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRigid3DTransformPython
else:
    import _itkRigid3DTransformPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkRigid3DTransformPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkRigid3DTransformPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkMatrixOffsetTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.ITKCommonBasePython
import itk.itkTransformBasePython
import itk.itkArrayPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython

def itkRigid3DTransformD_New():
    return itkRigid3DTransformD.New()

class itkRigid3DTransformD(itk.itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33):
    r"""


    Rigid3DTransform of a vector space (e.g. space coordinates)

    This transform applies a rotation and translation in 3D space. The
    transform is specified as a rotation matrix around a arbitrary center
    and is followed by a translation.

    The parameters for this transform can be set either using individual
    Set methods or in serialized form using SetParameters() and
    SetFixedParameters().

    The serialization of the optimizable parameters is an array of 12
    elements. The first 9 parameters represents the rotation matrix in
    row-major order (where the column index varies the fastest). The last
    3 parameters defines the translation in each dimension.

    The serialization of the fixed parameters is an array of 3 elements
    defining the center of rotation in each dimension.

    The Rigid3DTransform is intended to be a base class that defines a
    consistent family of transform types that respect rigid
    transformations. Only classes that derive from Rigid3DTransform should
    be used.

    See:   Euler3DTransform

    See:   QuaternionRigidTransform

    See:   VersorTransform 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRigid3DTransformPython.itkRigid3DTransformD___New_orig__)
    Clone = _swig_new_instance_method(_itkRigid3DTransformPython.itkRigid3DTransformD_Clone)
    SetMatrix = _swig_new_instance_method(_itkRigid3DTransformPython.itkRigid3DTransformD_SetMatrix)
    Translate = _swig_new_instance_method(_itkRigid3DTransformPython.itkRigid3DTransformD_Translate)
    MatrixIsOrthogonal = _swig_new_instance_method(_itkRigid3DTransformPython.itkRigid3DTransformD_MatrixIsOrthogonal)
    __swig_destroy__ = _itkRigid3DTransformPython.delete_itkRigid3DTransformD
    cast = _swig_new_static_method(_itkRigid3DTransformPython.itkRigid3DTransformD_cast)

    def New(*args, **kargs):
        """New() -> itkRigid3DTransformD

        Create a new object of the class itkRigid3DTransformD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRigid3DTransformD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRigid3DTransformD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRigid3DTransformD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRigid3DTransformD in _itkRigid3DTransformPython:
_itkRigid3DTransformPython.itkRigid3DTransformD_swigregister(itkRigid3DTransformD)
itkRigid3DTransformD___New_orig__ = _itkRigid3DTransformPython.itkRigid3DTransformD___New_orig__
itkRigid3DTransformD_cast = _itkRigid3DTransformPython.itkRigid3DTransformD_cast



