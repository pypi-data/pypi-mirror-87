# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHausdorffDistanceImageFilterPython
else:
    import _itkHausdorffDistanceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHausdorffDistanceImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHausdorffDistanceImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkHausdorffDistanceImageFilterID2ID2_New():
    return itkHausdorffDistanceImageFilterID2ID2.New()

class itkHausdorffDistanceImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterID2ID2
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterID2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterID2ID2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_swigregister(itkHausdorffDistanceImageFilterID2ID2)
itkHausdorffDistanceImageFilterID2ID2___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2___New_orig__
itkHausdorffDistanceImageFilterID2ID2_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID2ID2_cast


def itkHausdorffDistanceImageFilterID3ID3_New():
    return itkHausdorffDistanceImageFilterID3ID3.New()

class itkHausdorffDistanceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterID3ID3
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterID3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterID3ID3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_swigregister(itkHausdorffDistanceImageFilterID3ID3)
itkHausdorffDistanceImageFilterID3ID3___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3___New_orig__
itkHausdorffDistanceImageFilterID3ID3_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterID3ID3_cast


def itkHausdorffDistanceImageFilterIF2IF2_New():
    return itkHausdorffDistanceImageFilterIF2IF2.New()

class itkHausdorffDistanceImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIF2IF2
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIF2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIF2IF2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_swigregister(itkHausdorffDistanceImageFilterIF2IF2)
itkHausdorffDistanceImageFilterIF2IF2___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2___New_orig__
itkHausdorffDistanceImageFilterIF2IF2_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF2IF2_cast


def itkHausdorffDistanceImageFilterIF3IF3_New():
    return itkHausdorffDistanceImageFilterIF3IF3.New()

class itkHausdorffDistanceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIF3IF3
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIF3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIF3IF3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_swigregister(itkHausdorffDistanceImageFilterIF3IF3)
itkHausdorffDistanceImageFilterIF3IF3___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3___New_orig__
itkHausdorffDistanceImageFilterIF3IF3_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIF3IF3_cast


def itkHausdorffDistanceImageFilterISS2ISS2_New():
    return itkHausdorffDistanceImageFilterISS2ISS2.New()

class itkHausdorffDistanceImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterISS2ISS2

        Create a new object of the class itkHausdorffDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterISS2ISS2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_swigregister(itkHausdorffDistanceImageFilterISS2ISS2)
itkHausdorffDistanceImageFilterISS2ISS2___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2___New_orig__
itkHausdorffDistanceImageFilterISS2ISS2_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS2ISS2_cast


def itkHausdorffDistanceImageFilterISS3ISS3_New():
    return itkHausdorffDistanceImageFilterISS3ISS3.New()

class itkHausdorffDistanceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterISS3ISS3

        Create a new object of the class itkHausdorffDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterISS3ISS3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_swigregister(itkHausdorffDistanceImageFilterISS3ISS3)
itkHausdorffDistanceImageFilterISS3ISS3___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3___New_orig__
itkHausdorffDistanceImageFilterISS3ISS3_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterISS3ISS3_cast


def itkHausdorffDistanceImageFilterIUC2ID2_New():
    return itkHausdorffDistanceImageFilterIUC2ID2.New()

class itkHausdorffDistanceImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC2ID2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_swigregister(itkHausdorffDistanceImageFilterIUC2ID2)
itkHausdorffDistanceImageFilterIUC2ID2___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2___New_orig__
itkHausdorffDistanceImageFilterIUC2ID2_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2ID2_cast


def itkHausdorffDistanceImageFilterIUC2IF2_New():
    return itkHausdorffDistanceImageFilterIUC2IF2.New()

class itkHausdorffDistanceImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC2IF2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_swigregister(itkHausdorffDistanceImageFilterIUC2IF2)
itkHausdorffDistanceImageFilterIUC2IF2___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2___New_orig__
itkHausdorffDistanceImageFilterIUC2IF2_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC2IF2_cast


def itkHausdorffDistanceImageFilterIUC3ID3_New():
    return itkHausdorffDistanceImageFilterIUC3ID3.New()

class itkHausdorffDistanceImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC3ID3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_swigregister(itkHausdorffDistanceImageFilterIUC3ID3)
itkHausdorffDistanceImageFilterIUC3ID3___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3___New_orig__
itkHausdorffDistanceImageFilterIUC3ID3_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3ID3_cast


def itkHausdorffDistanceImageFilterIUC3IF3_New():
    return itkHausdorffDistanceImageFilterIUC3IF3.New()

class itkHausdorffDistanceImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUC3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUC3IF3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_swigregister(itkHausdorffDistanceImageFilterIUC3IF3)
itkHausdorffDistanceImageFilterIUC3IF3___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3___New_orig__
itkHausdorffDistanceImageFilterIUC3IF3_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUC3IF3_cast


def itkHausdorffDistanceImageFilterIUS2ID2_New():
    return itkHausdorffDistanceImageFilterIUS2ID2.New()

class itkHausdorffDistanceImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS2ID2

        Create a new object of the class itkHausdorffDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS2ID2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_swigregister(itkHausdorffDistanceImageFilterIUS2ID2)
itkHausdorffDistanceImageFilterIUS2ID2___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2___New_orig__
itkHausdorffDistanceImageFilterIUS2ID2_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2ID2_cast


def itkHausdorffDistanceImageFilterIUS2IF2_New():
    return itkHausdorffDistanceImageFilterIUS2IF2.New()

class itkHausdorffDistanceImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS2IF2

        Create a new object of the class itkHausdorffDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS2IF2 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_swigregister(itkHausdorffDistanceImageFilterIUS2IF2)
itkHausdorffDistanceImageFilterIUS2IF2___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2___New_orig__
itkHausdorffDistanceImageFilterIUS2IF2_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS2IF2_cast


def itkHausdorffDistanceImageFilterIUS3ID3_New():
    return itkHausdorffDistanceImageFilterIUS3ID3.New()

class itkHausdorffDistanceImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS3ID3

        Create a new object of the class itkHausdorffDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS3ID3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_swigregister(itkHausdorffDistanceImageFilterIUS3ID3)
itkHausdorffDistanceImageFilterIUS3ID3___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3___New_orig__
itkHausdorffDistanceImageFilterIUS3ID3_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3ID3_cast


def itkHausdorffDistanceImageFilterIUS3IF3_New():
    return itkHausdorffDistanceImageFilterIUS3IF3.New()

class itkHausdorffDistanceImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the Hausdorff distance between the set of non-zero pixels of
    two images.

    HausdorffDistanceImageFilter computes the distance between the set
    non-zero pixels of two images using the following formula: \\[
    H(A,B) = \\max(h(A,B),h(B,A)) \\] where \\[ h(A,B) = \\max_{a
    \\in A} \\min_{b \\in B} \\| a - b\\| \\] is the directed
    Hausdorff distance and $A$ and $B$ are respectively the set of non-
    zero pixels in the first and second input images.

    In particular, this filter uses the DirectedHausdorffImageFilter
    inside to compute the two directed distances and then select the
    largest of the two.

    The Hausdorff distance measures the degree of mismatch between two
    sets and behaves like a metric over the set of all closed bounded sets
    - with properties of identity, symmetry and triangle inequality.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two inputs and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image types. It assume
    both images have the same number of dimensions.

    See:   DirectedHausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetUseImageSpacing)
    GetHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_GetAverageHausdorffDistance)
    Input1HasNumericTraitsCheck = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_Input1HasNumericTraitsCheck
    
    __swig_destroy__ = _itkHausdorffDistanceImageFilterPython.delete_itkHausdorffDistanceImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkHausdorffDistanceImageFilterIUS3IF3

        Create a new object of the class itkHausdorffDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHausdorffDistanceImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHausdorffDistanceImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHausdorffDistanceImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHausdorffDistanceImageFilterIUS3IF3 in _itkHausdorffDistanceImageFilterPython:
_itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_swigregister(itkHausdorffDistanceImageFilterIUS3IF3)
itkHausdorffDistanceImageFilterIUS3IF3___New_orig__ = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3___New_orig__
itkHausdorffDistanceImageFilterIUS3IF3_cast = _itkHausdorffDistanceImageFilterPython.itkHausdorffDistanceImageFilterIUS3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def hausdorff_distance_image_filter(*args, **kwargs):
    """Procedural interface for HausdorffDistanceImageFilter"""
    import itk
    instance = itk.HausdorffDistanceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def hausdorff_distance_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HausdorffDistanceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HausdorffDistanceImageFilter.values()[0]
    else:
        filter_object = itk.HausdorffDistanceImageFilter

    hausdorff_distance_image_filter.__doc__ = filter_object.__doc__
    hausdorff_distance_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    hausdorff_distance_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HausdorffDistanceImageFilter, itkTemplate.itkTemplate):
        hausdorff_distance_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        hausdorff_distance_image_filter.__doc__ += "\n"
        hausdorff_distance_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        hausdorff_distance_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



