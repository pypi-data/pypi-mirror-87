# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVariableLengthVectorPython
else:
    import _itkVariableLengthVectorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVariableLengthVectorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVariableLengthVectorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.stdcomplexPython
import itk.pyBasePython
class itkVariableLengthVectorCF(object):
    r"""


    Represents an array whose length can be defined at run-time.

    This class is templated over the data type. This data-type is meant to
    be a scalar, such as float, double etc...

    ITK itself provides several classes that can serve as Arrays.
    FixedArray - Compile time fixed length arrays that's intended to
    represent an enumerated collection of n entities.

    Array - Run time resizeable array that is intended to hold a
    collection of n entities

    Vector - Compile time fixed length array that is intended to hold a
    collection of n data types. A vector usually has a mathematical
    meaning. It should only be used when mathematical operations such as
    addition, multiplication by a scalar, product etc make sense.

    VariableLengthVector - Run time array that is intended to hold a
    collection of scalar data types. Again, it should be used only when
    mathematical operations on it are relevant. If not, use an Array.

    Point - Represents the spatial coordinates of a spatial location.
    Operators on Point reflect geometrical concepts.

    For the reasons listed above, you cannot instantiate .

    Design Considerations: We do not derive from vnl_vector to avoid being
    limited by the explicit template instantiations of vnl_vector and
    other hacks that vnl folks have been forced to use.

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   CovariantVector

    See:   SymmetricSecondRankTensor

    See:   RGBPixel

    See:   DiffusionTensor3D

    If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
    null or pointing to something with no elements. i.e. m_NumElements may
    be 0 and yet m_Data may be not null.) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkVariableLengthVectorCF self) -> itkVariableLengthVectorCF
        __init__(itkVariableLengthVectorCF self, unsigned int dimension) -> itkVariableLengthVectorCF
        __init__(itkVariableLengthVectorCF self, stdcomplexF data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorCF
        __init__(itkVariableLengthVectorCF self, stdcomplexF data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorCF
        __init__(itkVariableLengthVectorCF self, itkVariableLengthVectorCF v) -> itkVariableLengthVectorCF


        Represents an array whose length can be defined at run-time.

        This class is templated over the data type. This data-type is meant to
        be a scalar, such as float, double etc...

        ITK itself provides several classes that can serve as Arrays.
        FixedArray - Compile time fixed length arrays that's intended to
        represent an enumerated collection of n entities.

        Array - Run time resizeable array that is intended to hold a
        collection of n entities

        Vector - Compile time fixed length array that is intended to hold a
        collection of n data types. A vector usually has a mathematical
        meaning. It should only be used when mathematical operations such as
        addition, multiplication by a scalar, product etc make sense.

        VariableLengthVector - Run time array that is intended to hold a
        collection of scalar data types. Again, it should be used only when
        mathematical operations on it are relevant. If not, use an Array.

        Point - Represents the spatial coordinates of a spatial location.
        Operators on Point reflect geometrical concepts.

        For the reasons listed above, you cannot instantiate .

        Design Considerations: We do not derive from vnl_vector to avoid being
        limited by the explicit template instantiations of vnl_vector and
        other hacks that vnl folks have been forced to use.

        This work is part of the National Alliance for Medical Image Computing
        (NAMIC), funded by the National Institutes of Health through the NIH
        Roadmap for Medical Research, Grant U54 EB005149.

        See:   CovariantVector

        See:   SymmetricSecondRankTensor

        See:   RGBPixel

        See:   DiffusionTensor3D

        If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
        null or pointing to something with no elements. i.e. m_NumElements may
        be 0 and yet m_Data may be not null.) 
        """
        _itkVariableLengthVectorPython.itkVariableLengthVectorCF_swiginit(self, _itkVariableLengthVectorPython.new_itkVariableLengthVectorCF(*args))
    Swap = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_Swap)
    Fill = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_Fill)
    FastAssign = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_FastAssign)
    Size = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_Size)
    GetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_GetSize)
    GetNumberOfElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_GetElement)
    SetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_SetElement)
    SetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_SetSize)
    DestroyExistingData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_DestroyExistingData)
    SetData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_SetData)
    __swig_destroy__ = _itkVariableLengthVectorPython.delete_itkVariableLengthVectorCF
    Reserve = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_Reserve)
    AllocateElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_AllocateElements)
    GetDataPointer = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_GetDataPointer)
    __isub__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF___isub__)
    __iadd__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF___iadd__)
    __imul__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF___imul__)
    __neg__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF___neg__)
    __eq__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF___eq__)
    __ne__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF___ne__)
    GetNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_GetNorm)
    GetSquaredNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_GetSquaredNorm)
    IsAProxy = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorCF_IsAProxy)

# Register itkVariableLengthVectorCF in _itkVariableLengthVectorPython:
_itkVariableLengthVectorPython.itkVariableLengthVectorCF_swigregister(itkVariableLengthVectorCF)

class itkVariableLengthVectorD(object):
    r"""


    Represents an array whose length can be defined at run-time.

    This class is templated over the data type. This data-type is meant to
    be a scalar, such as float, double etc...

    ITK itself provides several classes that can serve as Arrays.
    FixedArray - Compile time fixed length arrays that's intended to
    represent an enumerated collection of n entities.

    Array - Run time resizeable array that is intended to hold a
    collection of n entities

    Vector - Compile time fixed length array that is intended to hold a
    collection of n data types. A vector usually has a mathematical
    meaning. It should only be used when mathematical operations such as
    addition, multiplication by a scalar, product etc make sense.

    VariableLengthVector - Run time array that is intended to hold a
    collection of scalar data types. Again, it should be used only when
    mathematical operations on it are relevant. If not, use an Array.

    Point - Represents the spatial coordinates of a spatial location.
    Operators on Point reflect geometrical concepts.

    For the reasons listed above, you cannot instantiate .

    Design Considerations: We do not derive from vnl_vector to avoid being
    limited by the explicit template instantiations of vnl_vector and
    other hacks that vnl folks have been forced to use.

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   CovariantVector

    See:   SymmetricSecondRankTensor

    See:   RGBPixel

    See:   DiffusionTensor3D

    If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
    null or pointing to something with no elements. i.e. m_NumElements may
    be 0 and yet m_Data may be not null.) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkVariableLengthVectorD self) -> itkVariableLengthVectorD
        __init__(itkVariableLengthVectorD self, unsigned int dimension) -> itkVariableLengthVectorD
        __init__(itkVariableLengthVectorD self, double * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorD
        __init__(itkVariableLengthVectorD self, double const * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorD
        __init__(itkVariableLengthVectorD self, itkVariableLengthVectorD v) -> itkVariableLengthVectorD


        Represents an array whose length can be defined at run-time.

        This class is templated over the data type. This data-type is meant to
        be a scalar, such as float, double etc...

        ITK itself provides several classes that can serve as Arrays.
        FixedArray - Compile time fixed length arrays that's intended to
        represent an enumerated collection of n entities.

        Array - Run time resizeable array that is intended to hold a
        collection of n entities

        Vector - Compile time fixed length array that is intended to hold a
        collection of n data types. A vector usually has a mathematical
        meaning. It should only be used when mathematical operations such as
        addition, multiplication by a scalar, product etc make sense.

        VariableLengthVector - Run time array that is intended to hold a
        collection of scalar data types. Again, it should be used only when
        mathematical operations on it are relevant. If not, use an Array.

        Point - Represents the spatial coordinates of a spatial location.
        Operators on Point reflect geometrical concepts.

        For the reasons listed above, you cannot instantiate .

        Design Considerations: We do not derive from vnl_vector to avoid being
        limited by the explicit template instantiations of vnl_vector and
        other hacks that vnl folks have been forced to use.

        This work is part of the National Alliance for Medical Image Computing
        (NAMIC), funded by the National Institutes of Health through the NIH
        Roadmap for Medical Research, Grant U54 EB005149.

        See:   CovariantVector

        See:   SymmetricSecondRankTensor

        See:   RGBPixel

        See:   DiffusionTensor3D

        If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
        null or pointing to something with no elements. i.e. m_NumElements may
        be 0 and yet m_Data may be not null.) 
        """
        _itkVariableLengthVectorPython.itkVariableLengthVectorD_swiginit(self, _itkVariableLengthVectorPython.new_itkVariableLengthVectorD(*args))
    Swap = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_Swap)
    Fill = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_Fill)
    FastAssign = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_FastAssign)
    Size = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_Size)
    GetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_GetSize)
    GetNumberOfElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_GetElement)
    SetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_SetElement)
    SetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_SetSize)
    DestroyExistingData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_DestroyExistingData)
    SetData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_SetData)
    __swig_destroy__ = _itkVariableLengthVectorPython.delete_itkVariableLengthVectorD
    Reserve = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_Reserve)
    AllocateElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_AllocateElements)
    GetDataPointer = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_GetDataPointer)
    __isub__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD___isub__)
    __iadd__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD___iadd__)
    __imul__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD___imul__)
    __neg__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD___neg__)
    __eq__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD___eq__)
    __ne__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD___ne__)
    GetNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_GetNorm)
    GetSquaredNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_GetSquaredNorm)
    IsAProxy = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorD_IsAProxy)

# Register itkVariableLengthVectorD in _itkVariableLengthVectorPython:
_itkVariableLengthVectorPython.itkVariableLengthVectorD_swigregister(itkVariableLengthVectorD)

class itkVariableLengthVectorF(object):
    r"""


    Represents an array whose length can be defined at run-time.

    This class is templated over the data type. This data-type is meant to
    be a scalar, such as float, double etc...

    ITK itself provides several classes that can serve as Arrays.
    FixedArray - Compile time fixed length arrays that's intended to
    represent an enumerated collection of n entities.

    Array - Run time resizeable array that is intended to hold a
    collection of n entities

    Vector - Compile time fixed length array that is intended to hold a
    collection of n data types. A vector usually has a mathematical
    meaning. It should only be used when mathematical operations such as
    addition, multiplication by a scalar, product etc make sense.

    VariableLengthVector - Run time array that is intended to hold a
    collection of scalar data types. Again, it should be used only when
    mathematical operations on it are relevant. If not, use an Array.

    Point - Represents the spatial coordinates of a spatial location.
    Operators on Point reflect geometrical concepts.

    For the reasons listed above, you cannot instantiate .

    Design Considerations: We do not derive from vnl_vector to avoid being
    limited by the explicit template instantiations of vnl_vector and
    other hacks that vnl folks have been forced to use.

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   CovariantVector

    See:   SymmetricSecondRankTensor

    See:   RGBPixel

    See:   DiffusionTensor3D

    If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
    null or pointing to something with no elements. i.e. m_NumElements may
    be 0 and yet m_Data may be not null.) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkVariableLengthVectorF self) -> itkVariableLengthVectorF
        __init__(itkVariableLengthVectorF self, unsigned int dimension) -> itkVariableLengthVectorF
        __init__(itkVariableLengthVectorF self, float * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorF
        __init__(itkVariableLengthVectorF self, float const * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorF
        __init__(itkVariableLengthVectorF self, itkVariableLengthVectorF v) -> itkVariableLengthVectorF


        Represents an array whose length can be defined at run-time.

        This class is templated over the data type. This data-type is meant to
        be a scalar, such as float, double etc...

        ITK itself provides several classes that can serve as Arrays.
        FixedArray - Compile time fixed length arrays that's intended to
        represent an enumerated collection of n entities.

        Array - Run time resizeable array that is intended to hold a
        collection of n entities

        Vector - Compile time fixed length array that is intended to hold a
        collection of n data types. A vector usually has a mathematical
        meaning. It should only be used when mathematical operations such as
        addition, multiplication by a scalar, product etc make sense.

        VariableLengthVector - Run time array that is intended to hold a
        collection of scalar data types. Again, it should be used only when
        mathematical operations on it are relevant. If not, use an Array.

        Point - Represents the spatial coordinates of a spatial location.
        Operators on Point reflect geometrical concepts.

        For the reasons listed above, you cannot instantiate .

        Design Considerations: We do not derive from vnl_vector to avoid being
        limited by the explicit template instantiations of vnl_vector and
        other hacks that vnl folks have been forced to use.

        This work is part of the National Alliance for Medical Image Computing
        (NAMIC), funded by the National Institutes of Health through the NIH
        Roadmap for Medical Research, Grant U54 EB005149.

        See:   CovariantVector

        See:   SymmetricSecondRankTensor

        See:   RGBPixel

        See:   DiffusionTensor3D

        If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
        null or pointing to something with no elements. i.e. m_NumElements may
        be 0 and yet m_Data may be not null.) 
        """
        _itkVariableLengthVectorPython.itkVariableLengthVectorF_swiginit(self, _itkVariableLengthVectorPython.new_itkVariableLengthVectorF(*args))
    Swap = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_Swap)
    Fill = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_Fill)
    FastAssign = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_FastAssign)
    Size = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_Size)
    GetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_GetSize)
    GetNumberOfElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_GetElement)
    SetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_SetElement)
    SetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_SetSize)
    DestroyExistingData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_DestroyExistingData)
    SetData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_SetData)
    __swig_destroy__ = _itkVariableLengthVectorPython.delete_itkVariableLengthVectorF
    Reserve = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_Reserve)
    AllocateElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_AllocateElements)
    GetDataPointer = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_GetDataPointer)
    __isub__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF___isub__)
    __iadd__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF___iadd__)
    __imul__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF___imul__)
    __neg__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF___neg__)
    __eq__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF___eq__)
    __ne__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF___ne__)
    GetNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_GetNorm)
    GetSquaredNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_GetSquaredNorm)
    IsAProxy = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorF_IsAProxy)

# Register itkVariableLengthVectorF in _itkVariableLengthVectorPython:
_itkVariableLengthVectorPython.itkVariableLengthVectorF_swigregister(itkVariableLengthVectorF)

class itkVariableLengthVectorSS(object):
    r"""


    Represents an array whose length can be defined at run-time.

    This class is templated over the data type. This data-type is meant to
    be a scalar, such as float, double etc...

    ITK itself provides several classes that can serve as Arrays.
    FixedArray - Compile time fixed length arrays that's intended to
    represent an enumerated collection of n entities.

    Array - Run time resizeable array that is intended to hold a
    collection of n entities

    Vector - Compile time fixed length array that is intended to hold a
    collection of n data types. A vector usually has a mathematical
    meaning. It should only be used when mathematical operations such as
    addition, multiplication by a scalar, product etc make sense.

    VariableLengthVector - Run time array that is intended to hold a
    collection of scalar data types. Again, it should be used only when
    mathematical operations on it are relevant. If not, use an Array.

    Point - Represents the spatial coordinates of a spatial location.
    Operators on Point reflect geometrical concepts.

    For the reasons listed above, you cannot instantiate .

    Design Considerations: We do not derive from vnl_vector to avoid being
    limited by the explicit template instantiations of vnl_vector and
    other hacks that vnl folks have been forced to use.

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   CovariantVector

    See:   SymmetricSecondRankTensor

    See:   RGBPixel

    See:   DiffusionTensor3D

    If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
    null or pointing to something with no elements. i.e. m_NumElements may
    be 0 and yet m_Data may be not null.) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkVariableLengthVectorSS self) -> itkVariableLengthVectorSS
        __init__(itkVariableLengthVectorSS self, unsigned int dimension) -> itkVariableLengthVectorSS
        __init__(itkVariableLengthVectorSS self, short * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorSS
        __init__(itkVariableLengthVectorSS self, short const * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorSS
        __init__(itkVariableLengthVectorSS self, itkVariableLengthVectorSS v) -> itkVariableLengthVectorSS


        Represents an array whose length can be defined at run-time.

        This class is templated over the data type. This data-type is meant to
        be a scalar, such as float, double etc...

        ITK itself provides several classes that can serve as Arrays.
        FixedArray - Compile time fixed length arrays that's intended to
        represent an enumerated collection of n entities.

        Array - Run time resizeable array that is intended to hold a
        collection of n entities

        Vector - Compile time fixed length array that is intended to hold a
        collection of n data types. A vector usually has a mathematical
        meaning. It should only be used when mathematical operations such as
        addition, multiplication by a scalar, product etc make sense.

        VariableLengthVector - Run time array that is intended to hold a
        collection of scalar data types. Again, it should be used only when
        mathematical operations on it are relevant. If not, use an Array.

        Point - Represents the spatial coordinates of a spatial location.
        Operators on Point reflect geometrical concepts.

        For the reasons listed above, you cannot instantiate .

        Design Considerations: We do not derive from vnl_vector to avoid being
        limited by the explicit template instantiations of vnl_vector and
        other hacks that vnl folks have been forced to use.

        This work is part of the National Alliance for Medical Image Computing
        (NAMIC), funded by the National Institutes of Health through the NIH
        Roadmap for Medical Research, Grant U54 EB005149.

        See:   CovariantVector

        See:   SymmetricSecondRankTensor

        See:   RGBPixel

        See:   DiffusionTensor3D

        If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
        null or pointing to something with no elements. i.e. m_NumElements may
        be 0 and yet m_Data may be not null.) 
        """
        _itkVariableLengthVectorPython.itkVariableLengthVectorSS_swiginit(self, _itkVariableLengthVectorPython.new_itkVariableLengthVectorSS(*args))
    Swap = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_Swap)
    Fill = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_Fill)
    FastAssign = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_FastAssign)
    Size = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_Size)
    GetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_GetSize)
    GetNumberOfElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_GetElement)
    SetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_SetElement)
    SetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_SetSize)
    DestroyExistingData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_DestroyExistingData)
    SetData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_SetData)
    __swig_destroy__ = _itkVariableLengthVectorPython.delete_itkVariableLengthVectorSS
    Reserve = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_Reserve)
    AllocateElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_AllocateElements)
    GetDataPointer = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_GetDataPointer)
    __isub__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS___isub__)
    __iadd__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS___iadd__)
    __imul__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS___imul__)
    __neg__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS___neg__)
    __eq__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS___eq__)
    __ne__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS___ne__)
    GetNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_GetNorm)
    GetSquaredNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_GetSquaredNorm)
    IsAProxy = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorSS_IsAProxy)

# Register itkVariableLengthVectorSS in _itkVariableLengthVectorPython:
_itkVariableLengthVectorPython.itkVariableLengthVectorSS_swigregister(itkVariableLengthVectorSS)

class itkVariableLengthVectorUC(object):
    r"""


    Represents an array whose length can be defined at run-time.

    This class is templated over the data type. This data-type is meant to
    be a scalar, such as float, double etc...

    ITK itself provides several classes that can serve as Arrays.
    FixedArray - Compile time fixed length arrays that's intended to
    represent an enumerated collection of n entities.

    Array - Run time resizeable array that is intended to hold a
    collection of n entities

    Vector - Compile time fixed length array that is intended to hold a
    collection of n data types. A vector usually has a mathematical
    meaning. It should only be used when mathematical operations such as
    addition, multiplication by a scalar, product etc make sense.

    VariableLengthVector - Run time array that is intended to hold a
    collection of scalar data types. Again, it should be used only when
    mathematical operations on it are relevant. If not, use an Array.

    Point - Represents the spatial coordinates of a spatial location.
    Operators on Point reflect geometrical concepts.

    For the reasons listed above, you cannot instantiate .

    Design Considerations: We do not derive from vnl_vector to avoid being
    limited by the explicit template instantiations of vnl_vector and
    other hacks that vnl folks have been forced to use.

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   CovariantVector

    See:   SymmetricSecondRankTensor

    See:   RGBPixel

    See:   DiffusionTensor3D

    If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
    null or pointing to something with no elements. i.e. m_NumElements may
    be 0 and yet m_Data may be not null.) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkVariableLengthVectorUC self) -> itkVariableLengthVectorUC
        __init__(itkVariableLengthVectorUC self, unsigned int dimension) -> itkVariableLengthVectorUC
        __init__(itkVariableLengthVectorUC self, unsigned char * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorUC
        __init__(itkVariableLengthVectorUC self, unsigned char const * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorUC
        __init__(itkVariableLengthVectorUC self, itkVariableLengthVectorUC v) -> itkVariableLengthVectorUC


        Represents an array whose length can be defined at run-time.

        This class is templated over the data type. This data-type is meant to
        be a scalar, such as float, double etc...

        ITK itself provides several classes that can serve as Arrays.
        FixedArray - Compile time fixed length arrays that's intended to
        represent an enumerated collection of n entities.

        Array - Run time resizeable array that is intended to hold a
        collection of n entities

        Vector - Compile time fixed length array that is intended to hold a
        collection of n data types. A vector usually has a mathematical
        meaning. It should only be used when mathematical operations such as
        addition, multiplication by a scalar, product etc make sense.

        VariableLengthVector - Run time array that is intended to hold a
        collection of scalar data types. Again, it should be used only when
        mathematical operations on it are relevant. If not, use an Array.

        Point - Represents the spatial coordinates of a spatial location.
        Operators on Point reflect geometrical concepts.

        For the reasons listed above, you cannot instantiate .

        Design Considerations: We do not derive from vnl_vector to avoid being
        limited by the explicit template instantiations of vnl_vector and
        other hacks that vnl folks have been forced to use.

        This work is part of the National Alliance for Medical Image Computing
        (NAMIC), funded by the National Institutes of Health through the NIH
        Roadmap for Medical Research, Grant U54 EB005149.

        See:   CovariantVector

        See:   SymmetricSecondRankTensor

        See:   RGBPixel

        See:   DiffusionTensor3D

        If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
        null or pointing to something with no elements. i.e. m_NumElements may
        be 0 and yet m_Data may be not null.) 
        """
        _itkVariableLengthVectorPython.itkVariableLengthVectorUC_swiginit(self, _itkVariableLengthVectorPython.new_itkVariableLengthVectorUC(*args))
    Swap = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_Swap)
    Fill = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_Fill)
    FastAssign = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_FastAssign)
    Size = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_Size)
    GetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_GetSize)
    GetNumberOfElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_GetElement)
    SetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_SetElement)
    SetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_SetSize)
    DestroyExistingData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_DestroyExistingData)
    SetData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_SetData)
    __swig_destroy__ = _itkVariableLengthVectorPython.delete_itkVariableLengthVectorUC
    Reserve = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_Reserve)
    AllocateElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_AllocateElements)
    GetDataPointer = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_GetDataPointer)
    __isub__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC___isub__)
    __iadd__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC___iadd__)
    __imul__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC___imul__)
    __neg__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC___neg__)
    __eq__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC___eq__)
    __ne__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC___ne__)
    GetNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_GetNorm)
    GetSquaredNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_GetSquaredNorm)
    IsAProxy = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUC_IsAProxy)

# Register itkVariableLengthVectorUC in _itkVariableLengthVectorPython:
_itkVariableLengthVectorPython.itkVariableLengthVectorUC_swigregister(itkVariableLengthVectorUC)

class itkVariableLengthVectorUS(object):
    r"""


    Represents an array whose length can be defined at run-time.

    This class is templated over the data type. This data-type is meant to
    be a scalar, such as float, double etc...

    ITK itself provides several classes that can serve as Arrays.
    FixedArray - Compile time fixed length arrays that's intended to
    represent an enumerated collection of n entities.

    Array - Run time resizeable array that is intended to hold a
    collection of n entities

    Vector - Compile time fixed length array that is intended to hold a
    collection of n data types. A vector usually has a mathematical
    meaning. It should only be used when mathematical operations such as
    addition, multiplication by a scalar, product etc make sense.

    VariableLengthVector - Run time array that is intended to hold a
    collection of scalar data types. Again, it should be used only when
    mathematical operations on it are relevant. If not, use an Array.

    Point - Represents the spatial coordinates of a spatial location.
    Operators on Point reflect geometrical concepts.

    For the reasons listed above, you cannot instantiate .

    Design Considerations: We do not derive from vnl_vector to avoid being
    limited by the explicit template instantiations of vnl_vector and
    other hacks that vnl folks have been forced to use.

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   CovariantVector

    See:   SymmetricSecondRankTensor

    See:   RGBPixel

    See:   DiffusionTensor3D

    If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
    null or pointing to something with no elements. i.e. m_NumElements may
    be 0 and yet m_Data may be not null.) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkVariableLengthVectorUS self) -> itkVariableLengthVectorUS
        __init__(itkVariableLengthVectorUS self, unsigned int dimension) -> itkVariableLengthVectorUS
        __init__(itkVariableLengthVectorUS self, unsigned short * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorUS
        __init__(itkVariableLengthVectorUS self, unsigned short const * data, unsigned int sz, bool LetArrayManageMemory=False) -> itkVariableLengthVectorUS
        __init__(itkVariableLengthVectorUS self, itkVariableLengthVectorUS v) -> itkVariableLengthVectorUS


        Represents an array whose length can be defined at run-time.

        This class is templated over the data type. This data-type is meant to
        be a scalar, such as float, double etc...

        ITK itself provides several classes that can serve as Arrays.
        FixedArray - Compile time fixed length arrays that's intended to
        represent an enumerated collection of n entities.

        Array - Run time resizeable array that is intended to hold a
        collection of n entities

        Vector - Compile time fixed length array that is intended to hold a
        collection of n data types. A vector usually has a mathematical
        meaning. It should only be used when mathematical operations such as
        addition, multiplication by a scalar, product etc make sense.

        VariableLengthVector - Run time array that is intended to hold a
        collection of scalar data types. Again, it should be used only when
        mathematical operations on it are relevant. If not, use an Array.

        Point - Represents the spatial coordinates of a spatial location.
        Operators on Point reflect geometrical concepts.

        For the reasons listed above, you cannot instantiate .

        Design Considerations: We do not derive from vnl_vector to avoid being
        limited by the explicit template instantiations of vnl_vector and
        other hacks that vnl folks have been forced to use.

        This work is part of the National Alliance for Medical Image Computing
        (NAMIC), funded by the National Institutes of Health through the NIH
        Roadmap for Medical Research, Grant U54 EB005149.

        See:   CovariantVector

        See:   SymmetricSecondRankTensor

        See:   RGBPixel

        See:   DiffusionTensor3D

        If m_LetArrayManageMemory is true, m_Data is deletable (whether it's
        null or pointing to something with no elements. i.e. m_NumElements may
        be 0 and yet m_Data may be not null.) 
        """
        _itkVariableLengthVectorPython.itkVariableLengthVectorUS_swiginit(self, _itkVariableLengthVectorPython.new_itkVariableLengthVectorUS(*args))
    Swap = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_Swap)
    Fill = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_Fill)
    FastAssign = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_FastAssign)
    Size = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_Size)
    GetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_GetSize)
    GetNumberOfElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_GetNumberOfElements)
    GetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_GetElement)
    SetElement = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_SetElement)
    SetSize = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_SetSize)
    DestroyExistingData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_DestroyExistingData)
    SetData = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_SetData)
    __swig_destroy__ = _itkVariableLengthVectorPython.delete_itkVariableLengthVectorUS
    Reserve = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_Reserve)
    AllocateElements = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_AllocateElements)
    GetDataPointer = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_GetDataPointer)
    __isub__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS___isub__)
    __iadd__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS___iadd__)
    __imul__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS___imul__)
    __neg__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS___neg__)
    __eq__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS___eq__)
    __ne__ = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS___ne__)
    GetNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_GetNorm)
    GetSquaredNorm = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_GetSquaredNorm)
    IsAProxy = _swig_new_instance_method(_itkVariableLengthVectorPython.itkVariableLengthVectorUS_IsAProxy)

# Register itkVariableLengthVectorUS in _itkVariableLengthVectorPython:
_itkVariableLengthVectorPython.itkVariableLengthVectorUS_swigregister(itkVariableLengthVectorUS)



