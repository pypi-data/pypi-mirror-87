# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1GitArtifact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'branch': 'str',
        'clone_directory': 'str',
        'creds': 'V1alpha1GitCreds',
        'file_path': 'str',
        'ref': 'str',
        'remote': 'V1alpha1GitRemoteConfig',
        'ssh_key_path': 'str',
        'ssh_key_secret': 'V1SecretKeySelector',
        'tag': 'str',
        'url': 'str'
    }

    attribute_map = {
        'branch': 'branch',
        'clone_directory': 'cloneDirectory',
        'creds': 'creds',
        'file_path': 'filePath',
        'ref': 'ref',
        'remote': 'remote',
        'ssh_key_path': 'sshKeyPath',
        'ssh_key_secret': 'sshKeySecret',
        'tag': 'tag',
        'url': 'url'
    }

    def __init__(self, branch=None, clone_directory=None, creds=None, file_path=None, ref=None, remote=None, ssh_key_path=None, ssh_key_secret=None, tag=None, url=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1GitArtifact - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._branch = None
        self._clone_directory = None
        self._creds = None
        self._file_path = None
        self._ref = None
        self._remote = None
        self._ssh_key_path = None
        self._ssh_key_secret = None
        self._tag = None
        self._url = None
        self.discriminator = None

        if branch is not None:
            self.branch = branch
        self.clone_directory = clone_directory
        if creds is not None:
            self.creds = creds
        self.file_path = file_path
        if ref is not None:
            self.ref = ref
        if remote is not None:
            self.remote = remote
        if ssh_key_path is not None:
            self.ssh_key_path = ssh_key_path
        if ssh_key_secret is not None:
            self.ssh_key_secret = ssh_key_secret
        if tag is not None:
            self.tag = tag
        self.url = url

    @property
    def branch(self):
        """Gets the branch of this V1alpha1GitArtifact.  # noqa: E501

        Branch to use to pull trigger resource  # noqa: E501

        :return: The branch of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this V1alpha1GitArtifact.

        Branch to use to pull trigger resource  # noqa: E501

        :param branch: The branch of this V1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._branch = branch

    @property
    def clone_directory(self):
        """Gets the clone_directory of this V1alpha1GitArtifact.  # noqa: E501

        Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.  # noqa: E501

        :return: The clone_directory of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._clone_directory

    @clone_directory.setter
    def clone_directory(self, clone_directory):
        """Sets the clone_directory of this V1alpha1GitArtifact.

        Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.  # noqa: E501

        :param clone_directory: The clone_directory of this V1alpha1GitArtifact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and clone_directory is None:  # noqa: E501
            raise ValueError("Invalid value for `clone_directory`, must not be `None`")  # noqa: E501

        self._clone_directory = clone_directory

    @property
    def creds(self):
        """Gets the creds of this V1alpha1GitArtifact.  # noqa: E501


        :return: The creds of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: V1alpha1GitCreds
        """
        return self._creds

    @creds.setter
    def creds(self, creds):
        """Sets the creds of this V1alpha1GitArtifact.


        :param creds: The creds of this V1alpha1GitArtifact.  # noqa: E501
        :type: V1alpha1GitCreds
        """

        self._creds = creds

    @property
    def file_path(self):
        """Gets the file_path of this V1alpha1GitArtifact.  # noqa: E501

        Path to file that contains trigger resource definition  # noqa: E501

        :return: The file_path of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this V1alpha1GitArtifact.

        Path to file that contains trigger resource definition  # noqa: E501

        :param file_path: The file_path of this V1alpha1GitArtifact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and file_path is None:  # noqa: E501
            raise ValueError("Invalid value for `file_path`, must not be `None`")  # noqa: E501

        self._file_path = file_path

    @property
    def ref(self):
        """Gets the ref of this V1alpha1GitArtifact.  # noqa: E501

        Ref to use to pull trigger resource. Will result in a shallow clone and fetch.  # noqa: E501

        :return: The ref of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this V1alpha1GitArtifact.

        Ref to use to pull trigger resource. Will result in a shallow clone and fetch.  # noqa: E501

        :param ref: The ref of this V1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._ref = ref

    @property
    def remote(self):
        """Gets the remote of this V1alpha1GitArtifact.  # noqa: E501


        :return: The remote of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: V1alpha1GitRemoteConfig
        """
        return self._remote

    @remote.setter
    def remote(self, remote):
        """Sets the remote of this V1alpha1GitArtifact.


        :param remote: The remote of this V1alpha1GitArtifact.  # noqa: E501
        :type: V1alpha1GitRemoteConfig
        """

        self._remote = remote

    @property
    def ssh_key_path(self):
        """Gets the ssh_key_path of this V1alpha1GitArtifact.  # noqa: E501

        DeprecatedSSHKeyPath is path to your ssh key path. Use this if you don't want to provide username and password. ssh key path must be mounted in sensor pod. DEPRECATED: use SSHKeySecret instead.  # noqa: E501

        :return: The ssh_key_path of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._ssh_key_path

    @ssh_key_path.setter
    def ssh_key_path(self, ssh_key_path):
        """Sets the ssh_key_path of this V1alpha1GitArtifact.

        DeprecatedSSHKeyPath is path to your ssh key path. Use this if you don't want to provide username and password. ssh key path must be mounted in sensor pod. DEPRECATED: use SSHKeySecret instead.  # noqa: E501

        :param ssh_key_path: The ssh_key_path of this V1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._ssh_key_path = ssh_key_path

    @property
    def ssh_key_secret(self):
        """Gets the ssh_key_secret of this V1alpha1GitArtifact.  # noqa: E501


        :return: The ssh_key_secret of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: V1SecretKeySelector
        """
        return self._ssh_key_secret

    @ssh_key_secret.setter
    def ssh_key_secret(self, ssh_key_secret):
        """Sets the ssh_key_secret of this V1alpha1GitArtifact.


        :param ssh_key_secret: The ssh_key_secret of this V1alpha1GitArtifact.  # noqa: E501
        :type: V1SecretKeySelector
        """

        self._ssh_key_secret = ssh_key_secret

    @property
    def tag(self):
        """Gets the tag of this V1alpha1GitArtifact.  # noqa: E501

        Tag to use to pull trigger resource  # noqa: E501

        :return: The tag of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this V1alpha1GitArtifact.

        Tag to use to pull trigger resource  # noqa: E501

        :param tag: The tag of this V1alpha1GitArtifact.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def url(self):
        """Gets the url of this V1alpha1GitArtifact.  # noqa: E501

        Git URL  # noqa: E501

        :return: The url of this V1alpha1GitArtifact.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V1alpha1GitArtifact.

        Git URL  # noqa: E501

        :param url: The url of this V1alpha1GitArtifact.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1GitArtifact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1GitArtifact):
            return True

        return self.to_dict() != other.to_dict()
