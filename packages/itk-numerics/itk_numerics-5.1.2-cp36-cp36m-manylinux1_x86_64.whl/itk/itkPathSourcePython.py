# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKPathPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPathSourcePython
else:
    import _itkPathSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPathSourcePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPathSourcePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkPolyLineParametricPathPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkParametricPathPython
import itk.itkIndexPython
import itk.itkPathBasePython
import itk.itkContinuousIndexPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkVectorContainerPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython

def itkPathSourcePLPP2_New():
    return itkPathSourcePLPP2.New()

class itkPathSourcePLPP2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for all process objects that output path data.

    PathSource is the base class for all process objects that output path
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output path. The class also defines some
    internal private data members that are used to manage streaming of
    data. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathSourcePython.itkPathSourcePLPP2___New_orig__)
    Clone = _swig_new_instance_method(_itkPathSourcePython.itkPathSourcePLPP2_Clone)
    GetOutput = _swig_new_instance_method(_itkPathSourcePython.itkPathSourcePLPP2_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkPathSourcePython.itkPathSourcePLPP2_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkPathSourcePython.itkPathSourcePLPP2_GraftNthOutput)
    __swig_destroy__ = _itkPathSourcePython.delete_itkPathSourcePLPP2
    cast = _swig_new_static_method(_itkPathSourcePython.itkPathSourcePLPP2_cast)

    def New(*args, **kargs):
        """New() -> itkPathSourcePLPP2

        Create a new object of the class itkPathSourcePLPP2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathSourcePLPP2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathSourcePLPP2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathSourcePLPP2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathSourcePLPP2 in _itkPathSourcePython:
_itkPathSourcePython.itkPathSourcePLPP2_swigregister(itkPathSourcePLPP2)
itkPathSourcePLPP2___New_orig__ = _itkPathSourcePython.itkPathSourcePLPP2___New_orig__
itkPathSourcePLPP2_cast = _itkPathSourcePython.itkPathSourcePLPP2_cast


def itkPathSourcePLPP3_New():
    return itkPathSourcePLPP3.New()

class itkPathSourcePLPP3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for all process objects that output path data.

    PathSource is the base class for all process objects that output path
    data. Specifically, this class defines the GetOutput() method that
    returns a pointer to the output path. The class also defines some
    internal private data members that are used to manage streaming of
    data. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPathSourcePython.itkPathSourcePLPP3___New_orig__)
    Clone = _swig_new_instance_method(_itkPathSourcePython.itkPathSourcePLPP3_Clone)
    GetOutput = _swig_new_instance_method(_itkPathSourcePython.itkPathSourcePLPP3_GetOutput)
    GraftOutput = _swig_new_instance_method(_itkPathSourcePython.itkPathSourcePLPP3_GraftOutput)
    GraftNthOutput = _swig_new_instance_method(_itkPathSourcePython.itkPathSourcePLPP3_GraftNthOutput)
    __swig_destroy__ = _itkPathSourcePython.delete_itkPathSourcePLPP3
    cast = _swig_new_static_method(_itkPathSourcePython.itkPathSourcePLPP3_cast)

    def New(*args, **kargs):
        """New() -> itkPathSourcePLPP3

        Create a new object of the class itkPathSourcePLPP3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPathSourcePLPP3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPathSourcePLPP3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPathSourcePLPP3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPathSourcePLPP3 in _itkPathSourcePython:
_itkPathSourcePython.itkPathSourcePLPP3_swigregister(itkPathSourcePLPP3)
itkPathSourcePLPP3___New_orig__ = _itkPathSourcePython.itkPathSourcePLPP3___New_orig__
itkPathSourcePLPP3_cast = _itkPathSourcePython.itkPathSourcePLPP3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def path_source(*args, **kwargs):
    """Procedural interface for PathSource"""
    import itk
    instance = itk.PathSource.New(*args, **kwargs)
    return instance.__internal_call__()

def path_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.PathSource, itkTemplate.itkTemplate):
        filter_object = itk.PathSource.values()[0]
    else:
        filter_object = itk.PathSource

    path_source.__doc__ = filter_object.__doc__
    path_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    path_source.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.PathSource, itkTemplate.itkTemplate):
        path_source.__doc__ += itkHelpers.filter_args(filter_object)[0]
        path_source.__doc__ += "\n"
        path_source.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        path_source.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



