# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHalfHermitianToRealInverseFFTImageFilterPython
else:
    import _itkHalfHermitianToRealInverseFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHalfHermitianToRealInverseFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHalfHermitianToRealInverseFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_New():
    return itkHalfHermitianToRealInverseFFTImageFilterICF2IF2.New()

class itkHalfHermitianToRealInverseFFTImageFilterICF2IF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF2IF2):
    r"""


    Base class for specialized complex-to-real inverse Fast Fourier
    Transform.

    This is a base class for the "inverse" or "reverse" Discrete
    Fourier Transform. This is an abstract base class: the actual
    implementation is provided by the best child class available on the
    system when the object is created via the object factory system.

    The input to this filter is assumed to have the same format as the
    output of the RealToHalfHermitianForwardFFTImageFilter. That is, the
    input is assumed to consist of roughly half the full complex image
    resulting from a real-to-complex discrete Fourier transform. This half
    is expected to be the first half of the image in the X-dimension.
    Because this filter assumes that the input stores only about half of
    the non-redundant complex pixels, the output is larger in the
    X-dimension than it is in the input. To determine the actual size of
    the output image, this filter needs additional information in the form
    of a flag indicating whether the output image has an odd size in the
    X-dimension. Use SetActualXDimensionIsOdd() to set this flag.

    See:   ForwardFFTImageFilter, HalfHermitianToRealInverseFFTImageFilter

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2___New_orig__)
    SetActualXDimensionIsOddInput = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_SetActualXDimensionIsOddInput)
    SetActualXDimensionIsOdd = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_SetActualXDimensionIsOdd)
    GetActualXDimensionIsOddInput = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_GetActualXDimensionIsOddInput)
    GetActualXDimensionIsOdd = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_GetActualXDimensionIsOdd)
    ActualXDimensionIsOddOn = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_ActualXDimensionIsOddOn)
    ActualXDimensionIsOddOff = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_ActualXDimensionIsOddOff)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkHalfHermitianToRealInverseFFTImageFilterPython.delete_itkHalfHermitianToRealInverseFFTImageFilterICF2IF2
    cast = _swig_new_static_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkHalfHermitianToRealInverseFFTImageFilterICF2IF2

        Create a new object of the class itkHalfHermitianToRealInverseFFTImageFilterICF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHalfHermitianToRealInverseFFTImageFilterICF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHalfHermitianToRealInverseFFTImageFilterICF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHalfHermitianToRealInverseFFTImageFilterICF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHalfHermitianToRealInverseFFTImageFilterICF2IF2 in _itkHalfHermitianToRealInverseFFTImageFilterPython:
_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_swigregister(itkHalfHermitianToRealInverseFFTImageFilterICF2IF2)
itkHalfHermitianToRealInverseFFTImageFilterICF2IF2___New_orig__ = _itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2___New_orig__
itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_cast = _itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF2IF2_cast


def itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_New():
    return itkHalfHermitianToRealInverseFFTImageFilterICF3IF3.New()

class itkHalfHermitianToRealInverseFFTImageFilterICF3IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICF3IF3):
    r"""


    Base class for specialized complex-to-real inverse Fast Fourier
    Transform.

    This is a base class for the "inverse" or "reverse" Discrete
    Fourier Transform. This is an abstract base class: the actual
    implementation is provided by the best child class available on the
    system when the object is created via the object factory system.

    The input to this filter is assumed to have the same format as the
    output of the RealToHalfHermitianForwardFFTImageFilter. That is, the
    input is assumed to consist of roughly half the full complex image
    resulting from a real-to-complex discrete Fourier transform. This half
    is expected to be the first half of the image in the X-dimension.
    Because this filter assumes that the input stores only about half of
    the non-redundant complex pixels, the output is larger in the
    X-dimension than it is in the input. To determine the actual size of
    the output image, this filter needs additional information in the form
    of a flag indicating whether the output image has an odd size in the
    X-dimension. Use SetActualXDimensionIsOdd() to set this flag.

    See:   ForwardFFTImageFilter, HalfHermitianToRealInverseFFTImageFilter

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3___New_orig__)
    SetActualXDimensionIsOddInput = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_SetActualXDimensionIsOddInput)
    SetActualXDimensionIsOdd = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_SetActualXDimensionIsOdd)
    GetActualXDimensionIsOddInput = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_GetActualXDimensionIsOddInput)
    GetActualXDimensionIsOdd = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_GetActualXDimensionIsOdd)
    ActualXDimensionIsOddOn = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_ActualXDimensionIsOddOn)
    ActualXDimensionIsOddOff = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_ActualXDimensionIsOddOff)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_GetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkHalfHermitianToRealInverseFFTImageFilterPython.delete_itkHalfHermitianToRealInverseFFTImageFilterICF3IF3
    cast = _swig_new_static_method(_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkHalfHermitianToRealInverseFFTImageFilterICF3IF3

        Create a new object of the class itkHalfHermitianToRealInverseFFTImageFilterICF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHalfHermitianToRealInverseFFTImageFilterICF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHalfHermitianToRealInverseFFTImageFilterICF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHalfHermitianToRealInverseFFTImageFilterICF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHalfHermitianToRealInverseFFTImageFilterICF3IF3 in _itkHalfHermitianToRealInverseFFTImageFilterPython:
_itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_swigregister(itkHalfHermitianToRealInverseFFTImageFilterICF3IF3)
itkHalfHermitianToRealInverseFFTImageFilterICF3IF3___New_orig__ = _itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3___New_orig__
itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_cast = _itkHalfHermitianToRealInverseFFTImageFilterPython.itkHalfHermitianToRealInverseFFTImageFilterICF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def half_hermitian_to_real_inverse_fft_image_filter(*args, **kwargs):
    """Procedural interface for HalfHermitianToRealInverseFFTImageFilter"""
    import itk
    instance = itk.HalfHermitianToRealInverseFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def half_hermitian_to_real_inverse_fft_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HalfHermitianToRealInverseFFTImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HalfHermitianToRealInverseFFTImageFilter.values()[0]
    else:
        filter_object = itk.HalfHermitianToRealInverseFFTImageFilter

    half_hermitian_to_real_inverse_fft_image_filter.__doc__ = filter_object.__doc__
    half_hermitian_to_real_inverse_fft_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    half_hermitian_to_real_inverse_fft_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HalfHermitianToRealInverseFFTImageFilter, itkTemplate.itkTemplate):
        half_hermitian_to_real_inverse_fft_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        half_hermitian_to_real_inverse_fft_image_filter.__doc__ += "\n"
        half_hermitian_to_real_inverse_fft_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        half_hermitian_to_real_inverse_fft_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



