# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1NativeStrategy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'anti_affinity': 'bool',
        'auth': 'str',
        'container_template': 'V1alpha1ContainerTemplate',
        'max_age': 'str',
        'metadata': 'CommonMetadata',
        'metrics_container_template': 'V1alpha1ContainerTemplate',
        'node_selector': 'dict(str, str)',
        'persistence': 'V1alpha1PersistenceStrategy',
        'replicas': 'int',
        'security_context': 'V1PodSecurityContext',
        'tolerations': 'list[V1Toleration]'
    }

    attribute_map = {
        'anti_affinity': 'antiAffinity',
        'auth': 'auth',
        'container_template': 'containerTemplate',
        'max_age': 'maxAge',
        'metadata': 'metadata',
        'metrics_container_template': 'metricsContainerTemplate',
        'node_selector': 'nodeSelector',
        'persistence': 'persistence',
        'replicas': 'replicas',
        'security_context': 'securityContext',
        'tolerations': 'tolerations'
    }

    def __init__(self, anti_affinity=None, auth=None, container_template=None, max_age=None, metadata=None, metrics_container_template=None, node_selector=None, persistence=None, replicas=None, security_context=None, tolerations=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1NativeStrategy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._anti_affinity = None
        self._auth = None
        self._container_template = None
        self._max_age = None
        self._metadata = None
        self._metrics_container_template = None
        self._node_selector = None
        self._persistence = None
        self._replicas = None
        self._security_context = None
        self._tolerations = None
        self.discriminator = None

        if anti_affinity is not None:
            self.anti_affinity = anti_affinity
        if auth is not None:
            self.auth = auth
        if container_template is not None:
            self.container_template = container_template
        if max_age is not None:
            self.max_age = max_age
        if metadata is not None:
            self.metadata = metadata
        if metrics_container_template is not None:
            self.metrics_container_template = metrics_container_template
        if node_selector is not None:
            self.node_selector = node_selector
        if persistence is not None:
            self.persistence = persistence
        if replicas is not None:
            self.replicas = replicas
        if security_context is not None:
            self.security_context = security_context
        if tolerations is not None:
            self.tolerations = tolerations

    @property
    def anti_affinity(self):
        """Gets the anti_affinity of this V1alpha1NativeStrategy.  # noqa: E501


        :return: The anti_affinity of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: bool
        """
        return self._anti_affinity

    @anti_affinity.setter
    def anti_affinity(self, anti_affinity):
        """Sets the anti_affinity of this V1alpha1NativeStrategy.


        :param anti_affinity: The anti_affinity of this V1alpha1NativeStrategy.  # noqa: E501
        :type: bool
        """

        self._anti_affinity = anti_affinity

    @property
    def auth(self):
        """Gets the auth of this V1alpha1NativeStrategy.  # noqa: E501


        :return: The auth of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: str
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this V1alpha1NativeStrategy.


        :param auth: The auth of this V1alpha1NativeStrategy.  # noqa: E501
        :type: str
        """

        self._auth = auth

    @property
    def container_template(self):
        """Gets the container_template of this V1alpha1NativeStrategy.  # noqa: E501


        :return: The container_template of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: V1alpha1ContainerTemplate
        """
        return self._container_template

    @container_template.setter
    def container_template(self, container_template):
        """Sets the container_template of this V1alpha1NativeStrategy.


        :param container_template: The container_template of this V1alpha1NativeStrategy.  # noqa: E501
        :type: V1alpha1ContainerTemplate
        """

        self._container_template = container_template

    @property
    def max_age(self):
        """Gets the max_age of this V1alpha1NativeStrategy.  # noqa: E501

        Max Age of existing messages, i.e. \"72h\", “4h35m”  # noqa: E501

        :return: The max_age of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: str
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this V1alpha1NativeStrategy.

        Max Age of existing messages, i.e. \"72h\", “4h35m”  # noqa: E501

        :param max_age: The max_age of this V1alpha1NativeStrategy.  # noqa: E501
        :type: str
        """

        self._max_age = max_age

    @property
    def metadata(self):
        """Gets the metadata of this V1alpha1NativeStrategy.  # noqa: E501


        :return: The metadata of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: CommonMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1alpha1NativeStrategy.


        :param metadata: The metadata of this V1alpha1NativeStrategy.  # noqa: E501
        :type: CommonMetadata
        """

        self._metadata = metadata

    @property
    def metrics_container_template(self):
        """Gets the metrics_container_template of this V1alpha1NativeStrategy.  # noqa: E501


        :return: The metrics_container_template of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: V1alpha1ContainerTemplate
        """
        return self._metrics_container_template

    @metrics_container_template.setter
    def metrics_container_template(self, metrics_container_template):
        """Sets the metrics_container_template of this V1alpha1NativeStrategy.


        :param metrics_container_template: The metrics_container_template of this V1alpha1NativeStrategy.  # noqa: E501
        :type: V1alpha1ContainerTemplate
        """

        self._metrics_container_template = metrics_container_template

    @property
    def node_selector(self):
        """Gets the node_selector of this V1alpha1NativeStrategy.  # noqa: E501

        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/  # noqa: E501

        :return: The node_selector of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this V1alpha1NativeStrategy.

        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/  # noqa: E501

        :param node_selector: The node_selector of this V1alpha1NativeStrategy.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def persistence(self):
        """Gets the persistence of this V1alpha1NativeStrategy.  # noqa: E501


        :return: The persistence of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: V1alpha1PersistenceStrategy
        """
        return self._persistence

    @persistence.setter
    def persistence(self, persistence):
        """Sets the persistence of this V1alpha1NativeStrategy.


        :param persistence: The persistence of this V1alpha1NativeStrategy.  # noqa: E501
        :type: V1alpha1PersistenceStrategy
        """

        self._persistence = persistence

    @property
    def replicas(self):
        """Gets the replicas of this V1alpha1NativeStrategy.  # noqa: E501

        Size is the NATS StatefulSet size  # noqa: E501

        :return: The replicas of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this V1alpha1NativeStrategy.

        Size is the NATS StatefulSet size  # noqa: E501

        :param replicas: The replicas of this V1alpha1NativeStrategy.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def security_context(self):
        """Gets the security_context of this V1alpha1NativeStrategy.  # noqa: E501


        :return: The security_context of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: V1PodSecurityContext
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this V1alpha1NativeStrategy.


        :param security_context: The security_context of this V1alpha1NativeStrategy.  # noqa: E501
        :type: V1PodSecurityContext
        """

        self._security_context = security_context

    @property
    def tolerations(self):
        """Gets the tolerations of this V1alpha1NativeStrategy.  # noqa: E501

        If specified, the pod's tolerations.  # noqa: E501

        :return: The tolerations of this V1alpha1NativeStrategy.  # noqa: E501
        :rtype: list[V1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this V1alpha1NativeStrategy.

        If specified, the pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this V1alpha1NativeStrategy.  # noqa: E501
        :type: list[V1Toleration]
        """

        self._tolerations = tolerations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1NativeStrategy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1NativeStrategy):
            return True

        return self.to_dict() != other.to_dict()
