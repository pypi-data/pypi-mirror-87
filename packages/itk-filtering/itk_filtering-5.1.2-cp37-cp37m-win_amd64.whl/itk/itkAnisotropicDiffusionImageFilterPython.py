# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKAnisotropicSmoothingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAnisotropicDiffusionImageFilterPython
else:
    import _itkAnisotropicDiffusionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAnisotropicDiffusionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAnisotropicDiffusionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython
class itkAnisotropicDiffusionImageFilterICVF22ICVF22(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF22ICVF22):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF22ICVF22
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast)

# Register itkAnisotropicDiffusionImageFilterICVF22ICVF22 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_swigregister(itkAnisotropicDiffusionImageFilterICVF22ICVF22)
itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF22ICVF22_cast

class itkAnisotropicDiffusionImageFilterICVF23ICVF23(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF23ICVF23):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF23ICVF23
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast)

# Register itkAnisotropicDiffusionImageFilterICVF23ICVF23 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_swigregister(itkAnisotropicDiffusionImageFilterICVF23ICVF23)
itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF23ICVF23_cast

class itkAnisotropicDiffusionImageFilterICVF32ICVF32(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF32ICVF32):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF32ICVF32
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast)

# Register itkAnisotropicDiffusionImageFilterICVF32ICVF32 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_swigregister(itkAnisotropicDiffusionImageFilterICVF32ICVF32)
itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF32ICVF32_cast

class itkAnisotropicDiffusionImageFilterICVF33ICVF33(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF33ICVF33):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF33ICVF33
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast)

# Register itkAnisotropicDiffusionImageFilterICVF33ICVF33 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_swigregister(itkAnisotropicDiffusionImageFilterICVF33ICVF33)
itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF33ICVF33_cast

class itkAnisotropicDiffusionImageFilterICVF42ICVF42(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF42ICVF42):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF42ICVF42
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast)

# Register itkAnisotropicDiffusionImageFilterICVF42ICVF42 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_swigregister(itkAnisotropicDiffusionImageFilterICVF42ICVF42)
itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF42ICVF42_cast

class itkAnisotropicDiffusionImageFilterICVF43ICVF43(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterICVF43ICVF43):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterICVF43ICVF43
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast)

# Register itkAnisotropicDiffusionImageFilterICVF43ICVF43 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_swigregister(itkAnisotropicDiffusionImageFilterICVF43ICVF43)
itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterICVF43ICVF43_cast

class itkAnisotropicDiffusionImageFilterID2ID2(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterID2ID2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_cast)

# Register itkAnisotropicDiffusionImageFilterID2ID2 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_swigregister(itkAnisotropicDiffusionImageFilterID2ID2)
itkAnisotropicDiffusionImageFilterID2ID2_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID2ID2_cast

class itkAnisotropicDiffusionImageFilterID3ID3(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterID3ID3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_cast)

# Register itkAnisotropicDiffusionImageFilterID3ID3 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_swigregister(itkAnisotropicDiffusionImageFilterID3ID3)
itkAnisotropicDiffusionImageFilterID3ID3_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterID3ID3_cast

class itkAnisotropicDiffusionImageFilterIF2IF2(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_cast)

# Register itkAnisotropicDiffusionImageFilterIF2IF2 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_swigregister(itkAnisotropicDiffusionImageFilterIF2IF2)
itkAnisotropicDiffusionImageFilterIF2IF2_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF2IF2_cast

class itkAnisotropicDiffusionImageFilterIF3IF3(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_cast)

# Register itkAnisotropicDiffusionImageFilterIF3IF3 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_swigregister(itkAnisotropicDiffusionImageFilterIF3IF3)
itkAnisotropicDiffusionImageFilterIF3IF3_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIF3IF3_cast

class itkAnisotropicDiffusionImageFilterIVF22IVF22(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_cast)

# Register itkAnisotropicDiffusionImageFilterIVF22IVF22 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_swigregister(itkAnisotropicDiffusionImageFilterIVF22IVF22)
itkAnisotropicDiffusionImageFilterIVF22IVF22_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF22IVF22_cast

class itkAnisotropicDiffusionImageFilterIVF23IVF23(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF23IVF23):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_cast)

# Register itkAnisotropicDiffusionImageFilterIVF23IVF23 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_swigregister(itkAnisotropicDiffusionImageFilterIVF23IVF23)
itkAnisotropicDiffusionImageFilterIVF23IVF23_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF23IVF23_cast

class itkAnisotropicDiffusionImageFilterIVF32IVF32(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF32IVF32):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_cast)

# Register itkAnisotropicDiffusionImageFilterIVF32IVF32 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_swigregister(itkAnisotropicDiffusionImageFilterIVF32IVF32)
itkAnisotropicDiffusionImageFilterIVF32IVF32_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF32IVF32_cast

class itkAnisotropicDiffusionImageFilterIVF33IVF33(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_cast)

# Register itkAnisotropicDiffusionImageFilterIVF33IVF33 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_swigregister(itkAnisotropicDiffusionImageFilterIVF33IVF33)
itkAnisotropicDiffusionImageFilterIVF33IVF33_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF33IVF33_cast

class itkAnisotropicDiffusionImageFilterIVF42IVF42(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF42IVF42):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_cast)

# Register itkAnisotropicDiffusionImageFilterIVF42IVF42 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_swigregister(itkAnisotropicDiffusionImageFilterIVF42IVF42)
itkAnisotropicDiffusionImageFilterIVF42IVF42_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF42IVF42_cast

class itkAnisotropicDiffusionImageFilterIVF43IVF43(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF43IVF43):
    r"""


    This filter is the base class for a set of filters that iteratively
    diffuse images by solving non-linear partial differential equations
    based on the classical heat equation. For an overview of the diffusion
    algorithm, see AnisotropicImageFunction.
    AnisotropicDiffusionImageFilter is a subclass of
    itkFiniteDifferenceImageFilter and is part of the finite difference
    solver hierarchy.

    Inputs and Outputs This is an image-to-image filter. The requirements
    for data types and dimensionality of the input and output are defined
    by subclasses. In general, these filters expect images of real-valued
    types. This means pixel types of floats, doubles, or a user-defined
    type with floating point accuracy and arithmetic operations.
    Parameters Set/GetNumberOfIterations specifies the number of
    iterations (time- step updates) that the solver will perform to
    produce a solution image. The appropriate number of iterations is
    dependent on the application and the image being processed. As a
    general rule, the more iterations performed, the more diffused the
    image will become.

    Set/GetTimeStep sets the time step to be used for each iteration
    (update). This parameter is described in detail in
    itkAnisotropicDiffusionFunction. The time step is constrained at run-
    time to keep the solution stable. In general, the time step should be
    at or below $(PixelSpacing)/2^{N+1}$, where $N$ is the dimensionality
    of the image.

    Set/GetConductanceParameter set a common parameter used by subclasses
    of itkAnisotropicDiffusionFunction. See
    itkAnisotropicDiffusionFunction for detailed information. How to use
    this filter  AnisotropicDiffusionImageFilter must be subclassed to be
    used. This class implements a generic framework for other diffusion
    filters.

    See:   GradientAnisotropicDiffusionImageFilter

    See:   VectorGradientAnisotropicDiffusionImageFilter

    See:   CurvatureAnisotropicDiffusionImageFilter

    See:   VectorCurvatureAnisotropicDiffusionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetTimeStep)
    GetTimeStep = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetTimeStep)
    SetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceParameter)
    GetConductanceParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceParameter)
    SetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceScalingUpdateInterval)
    GetConductanceScalingUpdateInterval = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceScalingUpdateInterval)
    SetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetConductanceScalingParameter)
    GetConductanceScalingParameter = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetConductanceScalingParameter)
    SetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_SetFixedAverageGradientMagnitude)
    GetFixedAverageGradientMagnitude = _swig_new_instance_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_GetFixedAverageGradientMagnitude)
    __swig_destroy__ = _itkAnisotropicDiffusionImageFilterPython.delete_itkAnisotropicDiffusionImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_cast)

# Register itkAnisotropicDiffusionImageFilterIVF43IVF43 in _itkAnisotropicDiffusionImageFilterPython:
_itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_swigregister(itkAnisotropicDiffusionImageFilterIVF43IVF43)
itkAnisotropicDiffusionImageFilterIVF43IVF43_cast = _itkAnisotropicDiffusionImageFilterPython.itkAnisotropicDiffusionImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def anisotropic_diffusion_image_filter(*args, **kwargs):
    """Procedural interface for AnisotropicDiffusionImageFilter"""
    import itk
    instance = itk.AnisotropicDiffusionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def anisotropic_diffusion_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AnisotropicDiffusionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AnisotropicDiffusionImageFilter.values()[0]
    else:
        filter_object = itk.AnisotropicDiffusionImageFilter

    anisotropic_diffusion_image_filter.__doc__ = filter_object.__doc__
    anisotropic_diffusion_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    anisotropic_diffusion_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.AnisotropicDiffusionImageFilter, itkTemplate.itkTemplate):
        anisotropic_diffusion_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        anisotropic_diffusion_image_filter.__doc__ += "\n"
        anisotropic_diffusion_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        anisotropic_diffusion_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



