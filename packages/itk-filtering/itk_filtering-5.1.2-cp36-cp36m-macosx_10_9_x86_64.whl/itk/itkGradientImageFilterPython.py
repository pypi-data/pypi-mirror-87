# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGradientPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGradientImageFilterPython
else:
    import _itkGradientImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGradientImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGradientImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageBoundaryConditionPython

def itkGradientImageFilterID2FF_New():
    return itkGradientImageFilterID2FF.New()

class itkGradientImageFilterID2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ICVF22):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterID2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterID2FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterID2FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterID2FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterID2FF

        Create a new object of the class itkGradientImageFilterID2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterID2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterID2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterID2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterID2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterID2FF_swigregister(itkGradientImageFilterID2FF)
itkGradientImageFilterID2FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterID2FF___New_orig__
itkGradientImageFilterID2FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterID2FF_cast


def itkGradientImageFilterID3FF_New():
    return itkGradientImageFilterID3FF.New()

class itkGradientImageFilterID3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ICVF33):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterID3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterID3FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterID3FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterID3FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterID3FF

        Create a new object of the class itkGradientImageFilterID3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterID3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterID3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterID3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterID3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterID3FF_swigregister(itkGradientImageFilterID3FF)
itkGradientImageFilterID3FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterID3FF___New_orig__
itkGradientImageFilterID3FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterID3FF_cast


def itkGradientImageFilterIF2FF_New():
    return itkGradientImageFilterIF2FF.New()

class itkGradientImageFilterIF2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICVF22):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIF2FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIF2FF

        Create a new object of the class itkGradientImageFilterIF2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIF2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIF2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIF2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIF2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIF2FF_swigregister(itkGradientImageFilterIF2FF)
itkGradientImageFilterIF2FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF___New_orig__
itkGradientImageFilterIF2FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterIF2FF_cast


def itkGradientImageFilterIF3FF_New():
    return itkGradientImageFilterIF3FF.New()

class itkGradientImageFilterIF3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICVF33):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIF3FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIF3FF

        Create a new object of the class itkGradientImageFilterIF3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIF3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIF3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIF3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIF3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIF3FF_swigregister(itkGradientImageFilterIF3FF)
itkGradientImageFilterIF3FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF___New_orig__
itkGradientImageFilterIF3FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterIF3FF_cast


def itkGradientImageFilterISS2FF_New():
    return itkGradientImageFilterISS2FF.New()

class itkGradientImageFilterISS2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ICVF22):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterISS2FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterISS2FF

        Create a new object of the class itkGradientImageFilterISS2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterISS2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterISS2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterISS2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterISS2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterISS2FF_swigregister(itkGradientImageFilterISS2FF)
itkGradientImageFilterISS2FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF___New_orig__
itkGradientImageFilterISS2FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterISS2FF_cast


def itkGradientImageFilterISS3FF_New():
    return itkGradientImageFilterISS3FF.New()

class itkGradientImageFilterISS3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ICVF33):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterISS3FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterISS3FF

        Create a new object of the class itkGradientImageFilterISS3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterISS3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterISS3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterISS3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterISS3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterISS3FF_swigregister(itkGradientImageFilterISS3FF)
itkGradientImageFilterISS3FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF___New_orig__
itkGradientImageFilterISS3FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterISS3FF_cast


def itkGradientImageFilterIUC2FF_New():
    return itkGradientImageFilterIUC2FF.New()

class itkGradientImageFilterIUC2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ICVF22):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUC2FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUC2FF

        Create a new object of the class itkGradientImageFilterIUC2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUC2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUC2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUC2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUC2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_swigregister(itkGradientImageFilterIUC2FF)
itkGradientImageFilterIUC2FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF___New_orig__
itkGradientImageFilterIUC2FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterIUC2FF_cast


def itkGradientImageFilterIUC3FF_New():
    return itkGradientImageFilterIUC3FF.New()

class itkGradientImageFilterIUC3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ICVF33):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUC3FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUC3FF

        Create a new object of the class itkGradientImageFilterIUC3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUC3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUC3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUC3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUC3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_swigregister(itkGradientImageFilterIUC3FF)
itkGradientImageFilterIUC3FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF___New_orig__
itkGradientImageFilterIUC3FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterIUC3FF_cast


def itkGradientImageFilterIUS2FF_New():
    return itkGradientImageFilterIUS2FF.New()

class itkGradientImageFilterIUS2FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ICVF22):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUS2FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUS2FF

        Create a new object of the class itkGradientImageFilterIUS2FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUS2FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUS2FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUS2FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUS2FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_swigregister(itkGradientImageFilterIUS2FF)
itkGradientImageFilterIUS2FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF___New_orig__
itkGradientImageFilterIUS2FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterIUS2FF_cast


def itkGradientImageFilterIUS3FF_New():
    return itkGradientImageFilterIUS3FF.New()

class itkGradientImageFilterIUS3FF(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ICVF33):
    r"""


    Computes the gradient of an image using directional derivatives.

    Computes the gradient of an image using directional derivatives. The
    directional derivative at each pixel location is computed by
    convolution with a first-order derivative operator.

    The second template parameter defines the value type used in the
    derivative operator (defaults to float). The third template parameter
    defines the value type used for output image (defaults to float). The
    output image is defined as a covariant vector image whose value type
    is specified as this third template parameter.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    example{Filtering/ImageGradient/GradientOfVectorImage,Gradient Of
    Vector Image}
    example{Filtering/ImageGradient/ComputeAndDisplayGradient,Compute And
    Display Gradient Of Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF___New_orig__)
    Clone = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GenerateInputRequestedRegion)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageSpacingOff)
    OverrideBoundaryCondition = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_OverrideBoundaryCondition)
    InputConvertibleToOutputCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_InputConvertibleToOutputCheck
    
    OutputHasNumericTraitsCheck = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_OutputHasNumericTraitsCheck
    
    SetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_SetUseImageDirection)
    GetUseImageDirection = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_GetUseImageDirection)
    UseImageDirectionOn = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageDirectionOn)
    UseImageDirectionOff = _swig_new_instance_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_UseImageDirectionOff)
    __swig_destroy__ = _itkGradientImageFilterPython.delete_itkGradientImageFilterIUS3FF
    cast = _swig_new_static_method(_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_cast)

    def New(*args, **kargs):
        """New() -> itkGradientImageFilterIUS3FF

        Create a new object of the class itkGradientImageFilterIUS3FF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGradientImageFilterIUS3FF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGradientImageFilterIUS3FF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGradientImageFilterIUS3FF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGradientImageFilterIUS3FF in _itkGradientImageFilterPython:
_itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_swigregister(itkGradientImageFilterIUS3FF)
itkGradientImageFilterIUS3FF___New_orig__ = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF___New_orig__
itkGradientImageFilterIUS3FF_cast = _itkGradientImageFilterPython.itkGradientImageFilterIUS3FF_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def gradient_image_filter(*args, **kwargs):
    """Procedural interface for GradientImageFilter"""
    import itk
    instance = itk.GradientImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def gradient_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GradientImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.GradientImageFilter.values()[0]
    else:
        filter_object = itk.GradientImageFilter

    gradient_image_filter.__doc__ = filter_object.__doc__
    gradient_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    gradient_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.GradientImageFilter, itkTemplate.itkTemplate):
        gradient_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        gradient_image_filter.__doc__ += "\n"
        gradient_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        gradient_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



