# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkExpandImageFilterPython
else:
    import _itkExpandImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkExpandImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkExpandImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkInterpolateImageFunctionPython
import itk.itkContinuousIndexPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkArrayPython

def itkExpandImageFilterID2ID2_New():
    return itkExpandImageFilterID2ID2.New()

class itkExpandImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterID2ID2
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterID2ID2

        Create a new object of the class itkExpandImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterID2ID2 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterID2ID2_swigregister(itkExpandImageFilterID2ID2)
itkExpandImageFilterID2ID2___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterID2ID2___New_orig__
itkExpandImageFilterID2ID2_cast = _itkExpandImageFilterPython.itkExpandImageFilterID2ID2_cast


def itkExpandImageFilterID3ID3_New():
    return itkExpandImageFilterID3ID3.New()

class itkExpandImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterID3ID3
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterID3ID3

        Create a new object of the class itkExpandImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterID3ID3 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterID3ID3_swigregister(itkExpandImageFilterID3ID3)
itkExpandImageFilterID3ID3___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterID3ID3___New_orig__
itkExpandImageFilterID3ID3_cast = _itkExpandImageFilterPython.itkExpandImageFilterID3ID3_cast


def itkExpandImageFilterIF2IF2_New():
    return itkExpandImageFilterIF2IF2.New()

class itkExpandImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIF2IF2
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIF2IF2

        Create a new object of the class itkExpandImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIF2IF2 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_swigregister(itkExpandImageFilterIF2IF2)
itkExpandImageFilterIF2IF2___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2___New_orig__
itkExpandImageFilterIF2IF2_cast = _itkExpandImageFilterPython.itkExpandImageFilterIF2IF2_cast


def itkExpandImageFilterIF3IF3_New():
    return itkExpandImageFilterIF3IF3.New()

class itkExpandImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIF3IF3
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIF3IF3

        Create a new object of the class itkExpandImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIF3IF3 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_swigregister(itkExpandImageFilterIF3IF3)
itkExpandImageFilterIF3IF3___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3___New_orig__
itkExpandImageFilterIF3IF3_cast = _itkExpandImageFilterPython.itkExpandImageFilterIF3IF3_cast


def itkExpandImageFilterISS2ISS2_New():
    return itkExpandImageFilterISS2ISS2.New()

class itkExpandImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterISS2ISS2

        Create a new object of the class itkExpandImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterISS2ISS2 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_swigregister(itkExpandImageFilterISS2ISS2)
itkExpandImageFilterISS2ISS2___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2___New_orig__
itkExpandImageFilterISS2ISS2_cast = _itkExpandImageFilterPython.itkExpandImageFilterISS2ISS2_cast


def itkExpandImageFilterISS3ISS3_New():
    return itkExpandImageFilterISS3ISS3.New()

class itkExpandImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterISS3ISS3

        Create a new object of the class itkExpandImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterISS3ISS3 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_swigregister(itkExpandImageFilterISS3ISS3)
itkExpandImageFilterISS3ISS3___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3___New_orig__
itkExpandImageFilterISS3ISS3_cast = _itkExpandImageFilterPython.itkExpandImageFilterISS3ISS3_cast


def itkExpandImageFilterIUC2IUC2_New():
    return itkExpandImageFilterIUC2IUC2.New()

class itkExpandImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIUC2IUC2

        Create a new object of the class itkExpandImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIUC2IUC2 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_swigregister(itkExpandImageFilterIUC2IUC2)
itkExpandImageFilterIUC2IUC2___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2___New_orig__
itkExpandImageFilterIUC2IUC2_cast = _itkExpandImageFilterPython.itkExpandImageFilterIUC2IUC2_cast


def itkExpandImageFilterIUC3IUC3_New():
    return itkExpandImageFilterIUC3IUC3.New()

class itkExpandImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIUC3IUC3

        Create a new object of the class itkExpandImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIUC3IUC3 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_swigregister(itkExpandImageFilterIUC3IUC3)
itkExpandImageFilterIUC3IUC3___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3___New_orig__
itkExpandImageFilterIUC3IUC3_cast = _itkExpandImageFilterPython.itkExpandImageFilterIUC3IUC3_cast


def itkExpandImageFilterIUS2IUS2_New():
    return itkExpandImageFilterIUS2IUS2.New()

class itkExpandImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIUS2IUS2

        Create a new object of the class itkExpandImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIUS2IUS2 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_swigregister(itkExpandImageFilterIUS2IUS2)
itkExpandImageFilterIUS2IUS2___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2___New_orig__
itkExpandImageFilterIUS2IUS2_cast = _itkExpandImageFilterPython.itkExpandImageFilterIUS2IUS2_cast


def itkExpandImageFilterIUS3IUS3_New():
    return itkExpandImageFilterIUS3IUS3.New()

class itkExpandImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIUS3IUS3

        Create a new object of the class itkExpandImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIUS3IUS3 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_swigregister(itkExpandImageFilterIUS3IUS3)
itkExpandImageFilterIUS3IUS3___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3___New_orig__
itkExpandImageFilterIUS3IUS3_cast = _itkExpandImageFilterPython.itkExpandImageFilterIUS3IUS3_cast


def itkExpandImageFilterIVF22IVF22_New():
    return itkExpandImageFilterIVF22IVF22.New()

class itkExpandImageFilterIVF22IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF22IVF22

        Create a new object of the class itkExpandImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF22IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF22IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIVF22IVF22 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_swigregister(itkExpandImageFilterIVF22IVF22)
itkExpandImageFilterIVF22IVF22___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22___New_orig__
itkExpandImageFilterIVF22IVF22_cast = _itkExpandImageFilterPython.itkExpandImageFilterIVF22IVF22_cast


def itkExpandImageFilterIVF23IVF23_New():
    return itkExpandImageFilterIVF23IVF23.New()

class itkExpandImageFilterIVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF23IVF23

        Create a new object of the class itkExpandImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIVF23IVF23 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_swigregister(itkExpandImageFilterIVF23IVF23)
itkExpandImageFilterIVF23IVF23___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23___New_orig__
itkExpandImageFilterIVF23IVF23_cast = _itkExpandImageFilterPython.itkExpandImageFilterIVF23IVF23_cast


def itkExpandImageFilterIVF32IVF32_New():
    return itkExpandImageFilterIVF32IVF32.New()

class itkExpandImageFilterIVF32IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF32IVF32

        Create a new object of the class itkExpandImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF32IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF32IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIVF32IVF32 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_swigregister(itkExpandImageFilterIVF32IVF32)
itkExpandImageFilterIVF32IVF32___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32___New_orig__
itkExpandImageFilterIVF32IVF32_cast = _itkExpandImageFilterPython.itkExpandImageFilterIVF32IVF32_cast


def itkExpandImageFilterIVF33IVF33_New():
    return itkExpandImageFilterIVF33IVF33.New()

class itkExpandImageFilterIVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF33IVF33

        Create a new object of the class itkExpandImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIVF33IVF33 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_swigregister(itkExpandImageFilterIVF33IVF33)
itkExpandImageFilterIVF33IVF33___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33___New_orig__
itkExpandImageFilterIVF33IVF33_cast = _itkExpandImageFilterPython.itkExpandImageFilterIVF33IVF33_cast


def itkExpandImageFilterIVF42IVF42_New():
    return itkExpandImageFilterIVF42IVF42.New()

class itkExpandImageFilterIVF42IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF42IVF42

        Create a new object of the class itkExpandImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF42IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF42IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIVF42IVF42 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_swigregister(itkExpandImageFilterIVF42IVF42)
itkExpandImageFilterIVF42IVF42___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42___New_orig__
itkExpandImageFilterIVF42IVF42_cast = _itkExpandImageFilterPython.itkExpandImageFilterIVF42IVF42_cast


def itkExpandImageFilterIVF43IVF43_New():
    return itkExpandImageFilterIVF43IVF43.New()

class itkExpandImageFilterIVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""


    Expand the size of an image by an integer factor in each dimension.

    ExpandImageFilter increases the size of an image by an integer factor
    in each dimension using a interpolation method. The output image size
    in each dimension is given by:

    OutputSize[j] = InputSize[j] * ExpandFactors[j]

    The output values are obtained by interpolating the input image. The
    default interpolation type used is the LinearInterpolateImageFunction.
    The user can specify a particular interpolation function via
    SetInterpolator(). Note that the input interpolator must derive from
    base class InterpolateImageFunction.

    This filter will produce an output with different pixel spacing that
    its input image such that:

    OutputSpacing[j] = InputSpacing[j] / ExpandFactors[j]

    The filter is templated over the input image type and the output image
    type.

    This filter is implemented as a multithreaded filter and supports
    streaming.

    This filter assumes that the input and output image has the same
    number of dimensions.

    See:  InterpolateImageFunction

    See:  LinearInterpolationImageFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_Clone)
    SetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetInterpolator)
    SetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_SetExpandFactors)
    GetExpandFactors = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GetExpandFactors)
    GenerateOutputInformation = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GenerateOutputInformation)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_GenerateInputRequestedRegion)
    __swig_destroy__ = _itkExpandImageFilterPython.delete_itkExpandImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkExpandImageFilterIVF43IVF43

        Create a new object of the class itkExpandImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpandImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpandImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpandImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpandImageFilterIVF43IVF43 in _itkExpandImageFilterPython:
_itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_swigregister(itkExpandImageFilterIVF43IVF43)
itkExpandImageFilterIVF43IVF43___New_orig__ = _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43___New_orig__
itkExpandImageFilterIVF43IVF43_cast = _itkExpandImageFilterPython.itkExpandImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def expand_image_filter(*args, **kwargs):
    """Procedural interface for ExpandImageFilter"""
    import itk
    instance = itk.ExpandImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def expand_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ExpandImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ExpandImageFilter.values()[0]
    else:
        filter_object = itk.ExpandImageFilter

    expand_image_filter.__doc__ = filter_object.__doc__
    expand_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    expand_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ExpandImageFilter, itkTemplate.itkTemplate):
        expand_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        expand_image_filter.__doc__ += "\n"
        expand_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        expand_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



