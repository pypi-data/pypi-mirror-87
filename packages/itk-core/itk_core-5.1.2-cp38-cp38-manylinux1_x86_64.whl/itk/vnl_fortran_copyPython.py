# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_fortran_copyPython
else:
    import _vnl_fortran_copyPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _vnl_fortran_copyPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _vnl_fortran_copyPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
class vnl_fortran_copyCF(object):
    r"""Proxy of C++ vnl_fortran_copyCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_fortran_copyPython.delete_vnl_fortran_copyCF

    def __init__(self, *args):
        r"""
        __init__(vnl_fortran_copyCF self, vnl_matrixCF M) -> vnl_fortran_copyCF
        __init__(vnl_fortran_copyCF self, vnl_fortran_copyCF arg0) -> vnl_fortran_copyCF
        """
        _vnl_fortran_copyPython.vnl_fortran_copyCF_swiginit(self, _vnl_fortran_copyPython.new_vnl_fortran_copyCF(*args))

# Register vnl_fortran_copyCF in _vnl_fortran_copyPython:
_vnl_fortran_copyPython.vnl_fortran_copyCF_swigregister(vnl_fortran_copyCF)

class vnl_fortran_copyD(object):
    r"""Proxy of C++ vnl_fortran_copyD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_fortran_copyPython.delete_vnl_fortran_copyD

    def __init__(self, *args):
        r"""
        __init__(vnl_fortran_copyD self, vnl_matrixD M) -> vnl_fortran_copyD
        __init__(vnl_fortran_copyD self, vnl_fortran_copyD arg0) -> vnl_fortran_copyD
        """
        _vnl_fortran_copyPython.vnl_fortran_copyD_swiginit(self, _vnl_fortran_copyPython.new_vnl_fortran_copyD(*args))

# Register vnl_fortran_copyD in _vnl_fortran_copyPython:
_vnl_fortran_copyPython.vnl_fortran_copyD_swigregister(vnl_fortran_copyD)

class vnl_fortran_copyF(object):
    r"""Proxy of C++ vnl_fortran_copyF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_fortran_copyPython.delete_vnl_fortran_copyF

    def __init__(self, *args):
        r"""
        __init__(vnl_fortran_copyF self, vnl_matrixF M) -> vnl_fortran_copyF
        __init__(vnl_fortran_copyF self, vnl_fortran_copyF arg0) -> vnl_fortran_copyF
        """
        _vnl_fortran_copyPython.vnl_fortran_copyF_swiginit(self, _vnl_fortran_copyPython.new_vnl_fortran_copyF(*args))

# Register vnl_fortran_copyF in _vnl_fortran_copyPython:
_vnl_fortran_copyPython.vnl_fortran_copyF_swigregister(vnl_fortran_copyF)



