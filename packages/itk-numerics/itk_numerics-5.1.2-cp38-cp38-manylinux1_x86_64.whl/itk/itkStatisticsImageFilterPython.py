# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkStatisticsImageFilterPython
else:
    import _itkStatisticsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkStatisticsImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkStatisticsImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSimpleDataObjectDecoratorPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageSinkPython
import itk.itkImagePython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkStatisticsImageFilterID2_New():
    return itkStatisticsImageFilterID2.New()

class itkStatisticsImageFilterID2(itk.itkImageSinkPython.itkImageSinkID2):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterID2
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterID2

        Create a new object of the class itkStatisticsImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterID2 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_swigregister(itkStatisticsImageFilterID2)
itkStatisticsImageFilterID2___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterID2___New_orig__
itkStatisticsImageFilterID2_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterID2_cast


def itkStatisticsImageFilterID3_New():
    return itkStatisticsImageFilterID3.New()

class itkStatisticsImageFilterID3(itk.itkImageSinkPython.itkImageSinkID3):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterID3
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterID3

        Create a new object of the class itkStatisticsImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterID3 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_swigregister(itkStatisticsImageFilterID3)
itkStatisticsImageFilterID3___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterID3___New_orig__
itkStatisticsImageFilterID3_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterID3_cast


def itkStatisticsImageFilterIF2_New():
    return itkStatisticsImageFilterIF2.New()

class itkStatisticsImageFilterIF2(itk.itkImageSinkPython.itkImageSinkIF2):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterIF2
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterIF2

        Create a new object of the class itkStatisticsImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterIF2 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_swigregister(itkStatisticsImageFilterIF2)
itkStatisticsImageFilterIF2___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2___New_orig__
itkStatisticsImageFilterIF2_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIF2_cast


def itkStatisticsImageFilterIF3_New():
    return itkStatisticsImageFilterIF3.New()

class itkStatisticsImageFilterIF3(itk.itkImageSinkPython.itkImageSinkIF3):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterIF3
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterIF3

        Create a new object of the class itkStatisticsImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterIF3 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_swigregister(itkStatisticsImageFilterIF3)
itkStatisticsImageFilterIF3___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3___New_orig__
itkStatisticsImageFilterIF3_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIF3_cast


def itkStatisticsImageFilterISS2_New():
    return itkStatisticsImageFilterISS2.New()

class itkStatisticsImageFilterISS2(itk.itkImageSinkPython.itkImageSinkISS2):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterISS2
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterISS2

        Create a new object of the class itkStatisticsImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterISS2 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_swigregister(itkStatisticsImageFilterISS2)
itkStatisticsImageFilterISS2___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2___New_orig__
itkStatisticsImageFilterISS2_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterISS2_cast


def itkStatisticsImageFilterISS3_New():
    return itkStatisticsImageFilterISS3.New()

class itkStatisticsImageFilterISS3(itk.itkImageSinkPython.itkImageSinkISS3):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterISS3
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterISS3

        Create a new object of the class itkStatisticsImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterISS3 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_swigregister(itkStatisticsImageFilterISS3)
itkStatisticsImageFilterISS3___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3___New_orig__
itkStatisticsImageFilterISS3_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterISS3_cast


def itkStatisticsImageFilterIUC2_New():
    return itkStatisticsImageFilterIUC2.New()

class itkStatisticsImageFilterIUC2(itk.itkImageSinkPython.itkImageSinkIUC2):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterIUC2
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterIUC2

        Create a new object of the class itkStatisticsImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterIUC2 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_swigregister(itkStatisticsImageFilterIUC2)
itkStatisticsImageFilterIUC2___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2___New_orig__
itkStatisticsImageFilterIUC2_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC2_cast


def itkStatisticsImageFilterIUC3_New():
    return itkStatisticsImageFilterIUC3.New()

class itkStatisticsImageFilterIUC3(itk.itkImageSinkPython.itkImageSinkIUC3):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterIUC3
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterIUC3

        Create a new object of the class itkStatisticsImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterIUC3 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_swigregister(itkStatisticsImageFilterIUC3)
itkStatisticsImageFilterIUC3___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3___New_orig__
itkStatisticsImageFilterIUC3_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUC3_cast


def itkStatisticsImageFilterIUS2_New():
    return itkStatisticsImageFilterIUS2.New()

class itkStatisticsImageFilterIUS2(itk.itkImageSinkPython.itkImageSinkIUS2):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterIUS2
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterIUS2

        Create a new object of the class itkStatisticsImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterIUS2 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_swigregister(itkStatisticsImageFilterIUS2)
itkStatisticsImageFilterIUS2___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2___New_orig__
itkStatisticsImageFilterIUS2_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS2_cast


def itkStatisticsImageFilterIUS3_New():
    return itkStatisticsImageFilterIUS3.New()

class itkStatisticsImageFilterIUS3(itk.itkImageSinkPython.itkImageSinkIUS3):
    r"""


    Compute min, max, variance and mean of an Image.

    StatisticsImageFilter computes the minimum, maximum, sum, sum of
    squares, mean, variance sigma of an image. The filter needs all of its
    input image. It behaves as a filter with an input and output. Thus it
    can be inserted in a pipline with other filters and the statistics
    will only be recomputed if a downstream filter changes.

    This filter is automatically multi-threaded and can stream its input
    when NumberOfStreamDivisions is set to more than one. Statistics are
    independently computed for each streamed and threaded region then
    merged.

    Internally a compensated summation algorithm is used for the
    accumulation of intensities to improve accuracy for large images.

    Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_Clone)
    GetMinimumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetMinimumOutput)
    GetMinimum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetMinimum)
    GetMaximumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetMaximumOutput)
    GetMaximum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetMaximum)
    GetMeanOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetMeanOutput)
    GetMean = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetMean)
    GetSigmaOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetSigmaOutput)
    GetSigma = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetSigma)
    GetVarianceOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetVarianceOutput)
    GetVariance = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetVariance)
    GetSumOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetSumOutput)
    GetSum = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetSum)
    GetSumOfSquaresOutput = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetSumOfSquaresOutput)
    GetSumOfSquares = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetSumOfSquares)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_GetNumberOfStreamDivisions)
    InputHasNumericTraitsCheck = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkStatisticsImageFilterPython.delete_itkStatisticsImageFilterIUS3
    cast = _swig_new_static_method(_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkStatisticsImageFilterIUS3

        Create a new object of the class itkStatisticsImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStatisticsImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStatisticsImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStatisticsImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStatisticsImageFilterIUS3 in _itkStatisticsImageFilterPython:
_itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_swigregister(itkStatisticsImageFilterIUS3)
itkStatisticsImageFilterIUS3___New_orig__ = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3___New_orig__
itkStatisticsImageFilterIUS3_cast = _itkStatisticsImageFilterPython.itkStatisticsImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def statistics_image_filter(*args, **kwargs):
    """Procedural interface for StatisticsImageFilter"""
    import itk
    instance = itk.StatisticsImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def statistics_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.StatisticsImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.StatisticsImageFilter.values()[0]
    else:
        filter_object = itk.StatisticsImageFilter

    statistics_image_filter.__doc__ = filter_object.__doc__
    statistics_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    statistics_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.StatisticsImageFilter, itkTemplate.itkTemplate):
        statistics_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        statistics_image_filter.__doc__ += "\n"
        statistics_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        statistics_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



