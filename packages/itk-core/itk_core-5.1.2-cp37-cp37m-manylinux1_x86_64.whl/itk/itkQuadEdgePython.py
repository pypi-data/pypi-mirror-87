# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKQuadEdgeMeshPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkQuadEdgePython
else:
    import _itkQuadEdgePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkQuadEdgePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkQuadEdgePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.pyBasePython
class itkQuadEdge(object):
    r"""


    Base class for the implementation of a quad-edge data structure as
    proposed in "Guibas and Stolfi 1985".

    Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix  This
    implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/306

    See:  "Accessing adjacent edges." 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    BeginOnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_BeginOnext)
    EndOnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_EndOnext)

    def __init__(self, *args):
        r"""
        __init__(itkQuadEdge self) -> itkQuadEdge
        __init__(itkQuadEdge self, itkQuadEdge arg0) -> itkQuadEdge


        Base class for the implementation of a quad-edge data structure as
        proposed in "Guibas and Stolfi 1985".

        Alexandre Gouaillard, Leonardo Florez-Valencia, Eric Boix  This
        implementation was contributed as a paper to the Insight
        Journalhttps://hdl.handle.net/1926/306

        See:  "Accessing adjacent edges." 
        """
        _itkQuadEdgePython.itkQuadEdge_swiginit(self, _itkQuadEdgePython.new_itkQuadEdge(*args))
    __swig_destroy__ = _itkQuadEdgePython.delete_itkQuadEdge
    SetOnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_SetOnext)
    SetRot = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_SetRot)
    GetOnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetOnext)
    GetRot = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetRot)
    Splice = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_Splice)
    GetSym = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetSym)
    GetLnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetLnext)
    GetRnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetRnext)
    GetDnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetDnext)
    GetOprev = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetOprev)
    GetLprev = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetLprev)
    GetRprev = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetRprev)
    GetDprev = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetDprev)
    GetInvRot = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetInvRot)
    GetInvOnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetInvOnext)
    GetInvLnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetInvLnext)
    GetInvRnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetInvRnext)
    GetInvDnext = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetInvDnext)
    IsHalfEdge = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_IsHalfEdge)
    IsIsolated = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_IsIsolated)
    IsEdgeInOnextRing = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_IsEdgeInOnextRing)
    IsLnextGivenSizeCyclic = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_IsLnextGivenSizeCyclic)
    GetOrder = _swig_new_instance_method(_itkQuadEdgePython.itkQuadEdge_GetOrder)

# Register itkQuadEdge in _itkQuadEdgePython:
_itkQuadEdgePython.itkQuadEdge_swigregister(itkQuadEdge)



