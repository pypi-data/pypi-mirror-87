# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkThresholdLabelerImageFilterPython
else:
    import _itkThresholdLabelerImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkThresholdLabelerImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkThresholdLabelerImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython

def itkThresholdLabelerImageFilterID2ID2_Superclass_New():
    return itkThresholdLabelerImageFilterID2ID2_Superclass.New()

class itkThresholdLabelerImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkThresholdLabelerImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterID2ID2_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterID2ID2_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Superclass_swigregister(itkThresholdLabelerImageFilterID2ID2_Superclass)
itkThresholdLabelerImageFilterID2ID2_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Superclass___New_orig__
itkThresholdLabelerImageFilterID2ID2_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Superclass_cast


def itkThresholdLabelerImageFilterID3ID3_Superclass_New():
    return itkThresholdLabelerImageFilterID3ID3_Superclass.New()

class itkThresholdLabelerImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkThresholdLabelerImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterID3ID3_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterID3ID3_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Superclass_swigregister(itkThresholdLabelerImageFilterID3ID3_Superclass)
itkThresholdLabelerImageFilterID3ID3_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Superclass___New_orig__
itkThresholdLabelerImageFilterID3ID3_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Superclass_cast


def itkThresholdLabelerImageFilterIF2IF2_Superclass_New():
    return itkThresholdLabelerImageFilterIF2IF2_Superclass.New()

class itkThresholdLabelerImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkThresholdLabelerImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIF2IF2_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIF2IF2_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Superclass_swigregister(itkThresholdLabelerImageFilterIF2IF2_Superclass)
itkThresholdLabelerImageFilterIF2IF2_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Superclass___New_orig__
itkThresholdLabelerImageFilterIF2IF2_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Superclass_cast


def itkThresholdLabelerImageFilterIF3IF3_Superclass_New():
    return itkThresholdLabelerImageFilterIF3IF3_Superclass.New()

class itkThresholdLabelerImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkThresholdLabelerImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIF3IF3_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIF3IF3_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Superclass_swigregister(itkThresholdLabelerImageFilterIF3IF3_Superclass)
itkThresholdLabelerImageFilterIF3IF3_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Superclass___New_orig__
itkThresholdLabelerImageFilterIF3IF3_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Superclass_cast


def itkThresholdLabelerImageFilterISS2ISS2_Superclass_New():
    return itkThresholdLabelerImageFilterISS2ISS2_Superclass.New()

class itkThresholdLabelerImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkThresholdLabelerImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterISS2ISS2_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterISS2ISS2_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Superclass_swigregister(itkThresholdLabelerImageFilterISS2ISS2_Superclass)
itkThresholdLabelerImageFilterISS2ISS2_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Superclass___New_orig__
itkThresholdLabelerImageFilterISS2ISS2_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Superclass_cast


def itkThresholdLabelerImageFilterISS3ISS3_Superclass_New():
    return itkThresholdLabelerImageFilterISS3ISS3_Superclass.New()

class itkThresholdLabelerImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkThresholdLabelerImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterISS3ISS3_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterISS3ISS3_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Superclass_swigregister(itkThresholdLabelerImageFilterISS3ISS3_Superclass)
itkThresholdLabelerImageFilterISS3ISS3_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Superclass___New_orig__
itkThresholdLabelerImageFilterISS3ISS3_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Superclass_cast


def itkThresholdLabelerImageFilterIUC2IUC2_Superclass_New():
    return itkThresholdLabelerImageFilterIUC2IUC2_Superclass.New()

class itkThresholdLabelerImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkThresholdLabelerImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIUC2IUC2_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Superclass_swigregister(itkThresholdLabelerImageFilterIUC2IUC2_Superclass)
itkThresholdLabelerImageFilterIUC2IUC2_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Superclass___New_orig__
itkThresholdLabelerImageFilterIUC2IUC2_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Superclass_cast


def itkThresholdLabelerImageFilterIUC3IUC3_Superclass_New():
    return itkThresholdLabelerImageFilterIUC3IUC3_Superclass.New()

class itkThresholdLabelerImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkThresholdLabelerImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIUC3IUC3_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Superclass_swigregister(itkThresholdLabelerImageFilterIUC3IUC3_Superclass)
itkThresholdLabelerImageFilterIUC3IUC3_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Superclass___New_orig__
itkThresholdLabelerImageFilterIUC3IUC3_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Superclass_cast


def itkThresholdLabelerImageFilterIUS2IUS2_Superclass_New():
    return itkThresholdLabelerImageFilterIUS2IUS2_Superclass.New()

class itkThresholdLabelerImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkThresholdLabelerImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIUS2IUS2_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Superclass_swigregister(itkThresholdLabelerImageFilterIUS2IUS2_Superclass)
itkThresholdLabelerImageFilterIUS2IUS2_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Superclass___New_orig__
itkThresholdLabelerImageFilterIUS2IUS2_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Superclass_cast


def itkThresholdLabelerImageFilterIUS3IUS3_Superclass_New():
    return itkThresholdLabelerImageFilterIUS3IUS3_Superclass.New()

class itkThresholdLabelerImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkThresholdLabelerImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkThresholdLabelerImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIUS3IUS3_Superclass in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Superclass_swigregister(itkThresholdLabelerImageFilterIUS3IUS3_Superclass)
itkThresholdLabelerImageFilterIUS3IUS3_Superclass___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Superclass___New_orig__
itkThresholdLabelerImageFilterIUS3IUS3_Superclass_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Superclass_cast


def itkThresholdLabelerImageFilterID2ID2_New():
    return itkThresholdLabelerImageFilterID2ID2.New()

class itkThresholdLabelerImageFilterID2ID2(itkThresholdLabelerImageFilterID2ID2_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterID2ID2
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterID2ID2

        Create a new object of the class itkThresholdLabelerImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterID2ID2 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_swigregister(itkThresholdLabelerImageFilterID2ID2)
itkThresholdLabelerImageFilterID2ID2___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2___New_orig__
itkThresholdLabelerImageFilterID2ID2_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID2ID2_cast


def itkThresholdLabelerImageFilterID3ID3_New():
    return itkThresholdLabelerImageFilterID3ID3.New()

class itkThresholdLabelerImageFilterID3ID3(itkThresholdLabelerImageFilterID3ID3_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterID3ID3
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterID3ID3

        Create a new object of the class itkThresholdLabelerImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterID3ID3 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_swigregister(itkThresholdLabelerImageFilterID3ID3)
itkThresholdLabelerImageFilterID3ID3___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3___New_orig__
itkThresholdLabelerImageFilterID3ID3_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterID3ID3_cast


def itkThresholdLabelerImageFilterIF2IF2_New():
    return itkThresholdLabelerImageFilterIF2IF2.New()

class itkThresholdLabelerImageFilterIF2IF2(itkThresholdLabelerImageFilterIF2IF2_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIF2IF2
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIF2IF2

        Create a new object of the class itkThresholdLabelerImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIF2IF2 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_swigregister(itkThresholdLabelerImageFilterIF2IF2)
itkThresholdLabelerImageFilterIF2IF2___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2___New_orig__
itkThresholdLabelerImageFilterIF2IF2_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF2IF2_cast


def itkThresholdLabelerImageFilterIF3IF3_New():
    return itkThresholdLabelerImageFilterIF3IF3.New()

class itkThresholdLabelerImageFilterIF3IF3(itkThresholdLabelerImageFilterIF3IF3_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIF3IF3
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIF3IF3

        Create a new object of the class itkThresholdLabelerImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIF3IF3 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_swigregister(itkThresholdLabelerImageFilterIF3IF3)
itkThresholdLabelerImageFilterIF3IF3___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3___New_orig__
itkThresholdLabelerImageFilterIF3IF3_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIF3IF3_cast


def itkThresholdLabelerImageFilterISS2ISS2_New():
    return itkThresholdLabelerImageFilterISS2ISS2.New()

class itkThresholdLabelerImageFilterISS2ISS2(itkThresholdLabelerImageFilterISS2ISS2_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterISS2ISS2

        Create a new object of the class itkThresholdLabelerImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterISS2ISS2 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_swigregister(itkThresholdLabelerImageFilterISS2ISS2)
itkThresholdLabelerImageFilterISS2ISS2___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2___New_orig__
itkThresholdLabelerImageFilterISS2ISS2_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS2ISS2_cast


def itkThresholdLabelerImageFilterISS3ISS3_New():
    return itkThresholdLabelerImageFilterISS3ISS3.New()

class itkThresholdLabelerImageFilterISS3ISS3(itkThresholdLabelerImageFilterISS3ISS3_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterISS3ISS3

        Create a new object of the class itkThresholdLabelerImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterISS3ISS3 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_swigregister(itkThresholdLabelerImageFilterISS3ISS3)
itkThresholdLabelerImageFilterISS3ISS3___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3___New_orig__
itkThresholdLabelerImageFilterISS3ISS3_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterISS3ISS3_cast


def itkThresholdLabelerImageFilterIUC2IUC2_New():
    return itkThresholdLabelerImageFilterIUC2IUC2.New()

class itkThresholdLabelerImageFilterIUC2IUC2(itkThresholdLabelerImageFilterIUC2IUC2_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIUC2IUC2

        Create a new object of the class itkThresholdLabelerImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIUC2IUC2 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_swigregister(itkThresholdLabelerImageFilterIUC2IUC2)
itkThresholdLabelerImageFilterIUC2IUC2___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2___New_orig__
itkThresholdLabelerImageFilterIUC2IUC2_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC2IUC2_cast


def itkThresholdLabelerImageFilterIUC3IUC3_New():
    return itkThresholdLabelerImageFilterIUC3IUC3.New()

class itkThresholdLabelerImageFilterIUC3IUC3(itkThresholdLabelerImageFilterIUC3IUC3_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIUC3IUC3

        Create a new object of the class itkThresholdLabelerImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIUC3IUC3 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_swigregister(itkThresholdLabelerImageFilterIUC3IUC3)
itkThresholdLabelerImageFilterIUC3IUC3___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3___New_orig__
itkThresholdLabelerImageFilterIUC3IUC3_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUC3IUC3_cast


def itkThresholdLabelerImageFilterIUS2IUS2_New():
    return itkThresholdLabelerImageFilterIUS2IUS2.New()

class itkThresholdLabelerImageFilterIUS2IUS2(itkThresholdLabelerImageFilterIUS2IUS2_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIUS2IUS2

        Create a new object of the class itkThresholdLabelerImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIUS2IUS2 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_swigregister(itkThresholdLabelerImageFilterIUS2IUS2)
itkThresholdLabelerImageFilterIUS2IUS2___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2___New_orig__
itkThresholdLabelerImageFilterIUS2IUS2_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS2IUS2_cast


def itkThresholdLabelerImageFilterIUS3IUS3_New():
    return itkThresholdLabelerImageFilterIUS3IUS3.New()

class itkThresholdLabelerImageFilterIUS3IUS3(itkThresholdLabelerImageFilterIUS3IUS3_Superclass):
    r"""


    Label an input image according to a set of thresholds.

    This filter produces an output image whose pixels are labeled
    progressively according to the classes identified by a set of
    thresholds. Values equal to a threshold is considered to be in the
    lower class.

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_Clone)
    PixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_PixelTypeComparable
    
    OutputPixelTypeComparable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_OutputPixelTypeComparable
    
    OutputPixelTypeOStreamWritable = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_OutputPixelTypeOStreamWritable
    
    SetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_SetThresholds)
    GetThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_GetThresholds)
    SetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_SetRealThresholds)
    GetRealThresholds = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_GetRealThresholds)
    SetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_SetLabelOffset)
    GetLabelOffset = _swig_new_instance_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_GetLabelOffset)
    __swig_destroy__ = _itkThresholdLabelerImageFilterPython.delete_itkThresholdLabelerImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdLabelerImageFilterIUS3IUS3

        Create a new object of the class itkThresholdLabelerImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdLabelerImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdLabelerImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdLabelerImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdLabelerImageFilterIUS3IUS3 in _itkThresholdLabelerImageFilterPython:
_itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_swigregister(itkThresholdLabelerImageFilterIUS3IUS3)
itkThresholdLabelerImageFilterIUS3IUS3___New_orig__ = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3___New_orig__
itkThresholdLabelerImageFilterIUS3IUS3_cast = _itkThresholdLabelerImageFilterPython.itkThresholdLabelerImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def threshold_labeler_image_filter(*args, **kwargs):
    """Procedural interface for ThresholdLabelerImageFilter"""
    import itk
    instance = itk.ThresholdLabelerImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def threshold_labeler_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ThresholdLabelerImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ThresholdLabelerImageFilter.values()[0]
    else:
        filter_object = itk.ThresholdLabelerImageFilter

    threshold_labeler_image_filter.__doc__ = filter_object.__doc__
    threshold_labeler_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    threshold_labeler_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ThresholdLabelerImageFilter, itkTemplate.itkTemplate):
        threshold_labeler_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        threshold_labeler_image_filter.__doc__ += "\n"
        threshold_labeler_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        threshold_labeler_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



