# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNotImageFilterPython
else:
    import _itkNotImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNotImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNotImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkNotImageFilterID2ID2_Superclass_New():
    return itkNotImageFilterID2ID2_Superclass.New()

class itkNotImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkNotImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID2ID2_Superclass

        Create a new object of the class itkNotImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID2ID2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_swigregister(itkNotImageFilterID2ID2_Superclass)
itkNotImageFilterID2ID2_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass___New_orig__
itkNotImageFilterID2ID2_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterID2ID2_Superclass_cast


def itkNotImageFilterID3ID3_Superclass_New():
    return itkNotImageFilterID3ID3_Superclass.New()

class itkNotImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkNotImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID3ID3_Superclass

        Create a new object of the class itkNotImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID3ID3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_swigregister(itkNotImageFilterID3ID3_Superclass)
itkNotImageFilterID3ID3_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass___New_orig__
itkNotImageFilterID3ID3_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterID3ID3_Superclass_cast


def itkNotImageFilterIF2IF2_Superclass_New():
    return itkNotImageFilterIF2IF2_Superclass.New()

class itkNotImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkNotImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF2IF2_Superclass

        Create a new object of the class itkNotImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF2IF2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_swigregister(itkNotImageFilterIF2IF2_Superclass)
itkNotImageFilterIF2IF2_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass___New_orig__
itkNotImageFilterIF2IF2_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_Superclass_cast


def itkNotImageFilterIF3IF3_Superclass_New():
    return itkNotImageFilterIF3IF3_Superclass.New()

class itkNotImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkNotImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF3IF3_Superclass

        Create a new object of the class itkNotImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF3IF3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_swigregister(itkNotImageFilterIF3IF3_Superclass)
itkNotImageFilterIF3IF3_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass___New_orig__
itkNotImageFilterIF3IF3_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_Superclass_cast


def itkNotImageFilterISS2ISS2_Superclass_New():
    return itkNotImageFilterISS2ISS2_Superclass.New()

class itkNotImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkNotImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS2ISS2_Superclass

        Create a new object of the class itkNotImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS2ISS2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_swigregister(itkNotImageFilterISS2ISS2_Superclass)
itkNotImageFilterISS2ISS2_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass___New_orig__
itkNotImageFilterISS2ISS2_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Superclass_cast


def itkNotImageFilterISS3ISS3_Superclass_New():
    return itkNotImageFilterISS3ISS3_Superclass.New()

class itkNotImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkNotImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS3ISS3_Superclass

        Create a new object of the class itkNotImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS3ISS3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_swigregister(itkNotImageFilterISS3ISS3_Superclass)
itkNotImageFilterISS3ISS3_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass___New_orig__
itkNotImageFilterISS3ISS3_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Superclass_cast


def itkNotImageFilterIUC2IUC2_Superclass_New():
    return itkNotImageFilterIUC2IUC2_Superclass.New()

class itkNotImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkNotImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkNotImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC2IUC2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_swigregister(itkNotImageFilterIUC2IUC2_Superclass)
itkNotImageFilterIUC2IUC2_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass___New_orig__
itkNotImageFilterIUC2IUC2_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Superclass_cast


def itkNotImageFilterIUC3IUC3_Superclass_New():
    return itkNotImageFilterIUC3IUC3_Superclass.New()

class itkNotImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkNotImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkNotImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC3IUC3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_swigregister(itkNotImageFilterIUC3IUC3_Superclass)
itkNotImageFilterIUC3IUC3_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass___New_orig__
itkNotImageFilterIUC3IUC3_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Superclass_cast


def itkNotImageFilterIUS2IUS2_Superclass_New():
    return itkNotImageFilterIUS2IUS2_Superclass.New()

class itkNotImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkNotImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkNotImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS2IUS2_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_swigregister(itkNotImageFilterIUS2IUS2_Superclass)
itkNotImageFilterIUS2IUS2_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass___New_orig__
itkNotImageFilterIUS2IUS2_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Superclass_cast


def itkNotImageFilterIUS3IUS3_Superclass_New():
    return itkNotImageFilterIUS3IUS3_Superclass.New()

class itkNotImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkNotImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkNotImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS3IUS3_Superclass in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_swigregister(itkNotImageFilterIUS3IUS3_Superclass)
itkNotImageFilterIUS3IUS3_Superclass___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass___New_orig__
itkNotImageFilterIUS3IUS3_Superclass_cast = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Superclass_cast


def itkNotImageFilterID2ID2_New():
    return itkNotImageFilterID2ID2.New()

class itkNotImageFilterID2ID2(itkNotImageFilterID2ID2_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID2ID2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID2ID2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterID2ID2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID2ID2
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID2ID2

        Create a new object of the class itkNotImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID2ID2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID2ID2_swigregister(itkNotImageFilterID2ID2)
itkNotImageFilterID2ID2___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterID2ID2___New_orig__
itkNotImageFilterID2ID2_cast = _itkNotImageFilterPython.itkNotImageFilterID2ID2_cast


def itkNotImageFilterID3ID3_New():
    return itkNotImageFilterID3ID3.New()

class itkNotImageFilterID3ID3(itkNotImageFilterID3ID3_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID3ID3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterID3ID3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterID3ID3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterID3ID3
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterID3ID3

        Create a new object of the class itkNotImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterID3ID3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterID3ID3_swigregister(itkNotImageFilterID3ID3)
itkNotImageFilterID3ID3___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterID3ID3___New_orig__
itkNotImageFilterID3ID3_cast = _itkNotImageFilterPython.itkNotImageFilterID3ID3_cast


def itkNotImageFilterIF2IF2_New():
    return itkNotImageFilterIF2IF2.New()

class itkNotImageFilterIF2IF2(itkNotImageFilterIF2IF2_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF2IF2
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF2IF2

        Create a new object of the class itkNotImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF2IF2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF2IF2_swigregister(itkNotImageFilterIF2IF2)
itkNotImageFilterIF2IF2___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIF2IF2___New_orig__
itkNotImageFilterIF2IF2_cast = _itkNotImageFilterPython.itkNotImageFilterIF2IF2_cast


def itkNotImageFilterIF3IF3_New():
    return itkNotImageFilterIF3IF3.New()

class itkNotImageFilterIF3IF3(itkNotImageFilterIF3IF3_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIF3IF3
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIF3IF3

        Create a new object of the class itkNotImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIF3IF3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIF3IF3_swigregister(itkNotImageFilterIF3IF3)
itkNotImageFilterIF3IF3___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIF3IF3___New_orig__
itkNotImageFilterIF3IF3_cast = _itkNotImageFilterPython.itkNotImageFilterIF3IF3_cast


def itkNotImageFilterISS2ISS2_New():
    return itkNotImageFilterISS2ISS2.New()

class itkNotImageFilterISS2ISS2(itkNotImageFilterISS2ISS2_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS2ISS2

        Create a new object of the class itkNotImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS2ISS2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS2ISS2_swigregister(itkNotImageFilterISS2ISS2)
itkNotImageFilterISS2ISS2___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2___New_orig__
itkNotImageFilterISS2ISS2_cast = _itkNotImageFilterPython.itkNotImageFilterISS2ISS2_cast


def itkNotImageFilterISS3ISS3_New():
    return itkNotImageFilterISS3ISS3.New()

class itkNotImageFilterISS3ISS3(itkNotImageFilterISS3ISS3_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterISS3ISS3

        Create a new object of the class itkNotImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterISS3ISS3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterISS3ISS3_swigregister(itkNotImageFilterISS3ISS3)
itkNotImageFilterISS3ISS3___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3___New_orig__
itkNotImageFilterISS3ISS3_cast = _itkNotImageFilterPython.itkNotImageFilterISS3ISS3_cast


def itkNotImageFilterIUC2IUC2_New():
    return itkNotImageFilterIUC2IUC2.New()

class itkNotImageFilterIUC2IUC2(itkNotImageFilterIUC2IUC2_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC2IUC2

        Create a new object of the class itkNotImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC2IUC2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_swigregister(itkNotImageFilterIUC2IUC2)
itkNotImageFilterIUC2IUC2___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2___New_orig__
itkNotImageFilterIUC2IUC2_cast = _itkNotImageFilterPython.itkNotImageFilterIUC2IUC2_cast


def itkNotImageFilterIUC3IUC3_New():
    return itkNotImageFilterIUC3IUC3.New()

class itkNotImageFilterIUC3IUC3(itkNotImageFilterIUC3IUC3_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUC3IUC3

        Create a new object of the class itkNotImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUC3IUC3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_swigregister(itkNotImageFilterIUC3IUC3)
itkNotImageFilterIUC3IUC3___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3___New_orig__
itkNotImageFilterIUC3IUC3_cast = _itkNotImageFilterPython.itkNotImageFilterIUC3IUC3_cast


def itkNotImageFilterIUS2IUS2_New():
    return itkNotImageFilterIUS2IUS2.New()

class itkNotImageFilterIUS2IUS2(itkNotImageFilterIUS2IUS2_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS2IUS2

        Create a new object of the class itkNotImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS2IUS2 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_swigregister(itkNotImageFilterIUS2IUS2)
itkNotImageFilterIUS2IUS2___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2___New_orig__
itkNotImageFilterIUS2IUS2_cast = _itkNotImageFilterPython.itkNotImageFilterIUS2IUS2_cast


def itkNotImageFilterIUS3IUS3_New():
    return itkNotImageFilterIUS3IUS3.New()

class itkNotImageFilterIUS3IUS3(itkNotImageFilterIUS3IUS3_Superclass):
    r"""


    Implements the NOT logical operator pixel-wise on an image.

    This class is templated over the type of an input image and the type
    of the output image. Numeric conversions (castings) are done by the
    C++ defaults.

    Since the logical NOT operation operates only on boolean types, the
    input type must be implicitly convertible to bool, which is only
    defined in C++ for integer types, the images passed to this filter
    must comply with the requirement of using integer pixel type.

    The total operation over one pixel will be

    Where "!" is the unary Logical NOT operator in C++. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_GetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_GetForegroundValue)
    InputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    OutputConvertibleToOutputCheck = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_OutputConvertibleToOutputCheck
    
    InputNotOperatorCheck = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_InputNotOperatorCheck
    
    __swig_destroy__ = _itkNotImageFilterPython.delete_itkNotImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkNotImageFilterIUS3IUS3

        Create a new object of the class itkNotImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNotImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNotImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNotImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNotImageFilterIUS3IUS3 in _itkNotImageFilterPython:
_itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_swigregister(itkNotImageFilterIUS3IUS3)
itkNotImageFilterIUS3IUS3___New_orig__ = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3___New_orig__
itkNotImageFilterIUS3IUS3_cast = _itkNotImageFilterPython.itkNotImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def not_image_filter(*args, **kwargs):
    """Procedural interface for NotImageFilter"""
    import itk
    instance = itk.NotImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def not_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NotImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NotImageFilter.values()[0]
    else:
        filter_object = itk.NotImageFilter

    not_image_filter.__doc__ = filter_object.__doc__
    not_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    not_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NotImageFilter, itkTemplate.itkTemplate):
        not_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        not_image_filter.__doc__ += "\n"
        not_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        not_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



