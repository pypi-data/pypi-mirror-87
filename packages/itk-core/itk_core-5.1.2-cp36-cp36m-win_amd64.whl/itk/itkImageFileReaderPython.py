# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKIOImageBasePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageFileReaderPython
else:
    import _itkImageFileReaderPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageFileReaderPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageFileReaderPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython
import itk.ITKIOImageBaseBasePython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkImageFileReaderICF2_New():
    return itkImageFileReaderICF2.New()

class itkImageFileReaderICF2(itk.itkImageSourcePython.itkImageSourceICF2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderICF2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderICF2

        Create a new object of the class itkImageFileReaderICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderICF2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderICF2_swigregister(itkImageFileReaderICF2)
itkImageFileReaderICF2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderICF2___New_orig__
itkImageFileReaderICF2_cast = _itkImageFileReaderPython.itkImageFileReaderICF2_cast


def itkImageFileReaderICF3_New():
    return itkImageFileReaderICF3.New()

class itkImageFileReaderICF3(itk.itkImageSourcePython.itkImageSourceICF3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICF3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderICF3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderICF3

        Create a new object of the class itkImageFileReaderICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderICF3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderICF3_swigregister(itkImageFileReaderICF3)
itkImageFileReaderICF3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderICF3___New_orig__
itkImageFileReaderICF3_cast = _itkImageFileReaderPython.itkImageFileReaderICF3_cast


def itkImageFileReaderICVF22_New():
    return itkImageFileReaderICVF22.New()

class itkImageFileReaderICVF22(itk.itkImageSourcePython.itkImageSourceICVF22):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderICVF22
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderICVF22

        Create a new object of the class itkImageFileReaderICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderICVF22 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderICVF22_swigregister(itkImageFileReaderICVF22)
itkImageFileReaderICVF22___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderICVF22___New_orig__
itkImageFileReaderICVF22_cast = _itkImageFileReaderPython.itkImageFileReaderICVF22_cast


def itkImageFileReaderICVF23_New():
    return itkImageFileReaderICVF23.New()

class itkImageFileReaderICVF23(itk.itkImageSourcePython.itkImageSourceICVF23):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderICVF23
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderICVF23

        Create a new object of the class itkImageFileReaderICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderICVF23 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderICVF23_swigregister(itkImageFileReaderICVF23)
itkImageFileReaderICVF23___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderICVF23___New_orig__
itkImageFileReaderICVF23_cast = _itkImageFileReaderPython.itkImageFileReaderICVF23_cast


def itkImageFileReaderICVF32_New():
    return itkImageFileReaderICVF32.New()

class itkImageFileReaderICVF32(itk.itkImageSourcePython.itkImageSourceICVF32):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderICVF32
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderICVF32

        Create a new object of the class itkImageFileReaderICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderICVF32 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderICVF32_swigregister(itkImageFileReaderICVF32)
itkImageFileReaderICVF32___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderICVF32___New_orig__
itkImageFileReaderICVF32_cast = _itkImageFileReaderPython.itkImageFileReaderICVF32_cast


def itkImageFileReaderICVF33_New():
    return itkImageFileReaderICVF33.New()

class itkImageFileReaderICVF33(itk.itkImageSourcePython.itkImageSourceICVF33):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderICVF33
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderICVF33

        Create a new object of the class itkImageFileReaderICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderICVF33 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderICVF33_swigregister(itkImageFileReaderICVF33)
itkImageFileReaderICVF33___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderICVF33___New_orig__
itkImageFileReaderICVF33_cast = _itkImageFileReaderPython.itkImageFileReaderICVF33_cast


def itkImageFileReaderICVF42_New():
    return itkImageFileReaderICVF42.New()

class itkImageFileReaderICVF42(itk.itkImageSourcePython.itkImageSourceICVF42):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderICVF42
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderICVF42

        Create a new object of the class itkImageFileReaderICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderICVF42 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderICVF42_swigregister(itkImageFileReaderICVF42)
itkImageFileReaderICVF42___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderICVF42___New_orig__
itkImageFileReaderICVF42_cast = _itkImageFileReaderPython.itkImageFileReaderICVF42_cast


def itkImageFileReaderICVF43_New():
    return itkImageFileReaderICVF43.New()

class itkImageFileReaderICVF43(itk.itkImageSourcePython.itkImageSourceICVF43):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderICVF43
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderICVF43

        Create a new object of the class itkImageFileReaderICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderICVF43 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderICVF43_swigregister(itkImageFileReaderICVF43)
itkImageFileReaderICVF43___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderICVF43___New_orig__
itkImageFileReaderICVF43_cast = _itkImageFileReaderPython.itkImageFileReaderICVF43_cast


def itkImageFileReaderID2_New():
    return itkImageFileReaderID2.New()

class itkImageFileReaderID2(itk.itkImageSourcePython.itkImageSourceID2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderID2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderID2

        Create a new object of the class itkImageFileReaderID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderID2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderID2_swigregister(itkImageFileReaderID2)
itkImageFileReaderID2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderID2___New_orig__
itkImageFileReaderID2_cast = _itkImageFileReaderPython.itkImageFileReaderID2_cast


def itkImageFileReaderID3_New():
    return itkImageFileReaderID3.New()

class itkImageFileReaderID3(itk.itkImageSourcePython.itkImageSourceID3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderID3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderID3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderID3

        Create a new object of the class itkImageFileReaderID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderID3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderID3_swigregister(itkImageFileReaderID3)
itkImageFileReaderID3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderID3___New_orig__
itkImageFileReaderID3_cast = _itkImageFileReaderPython.itkImageFileReaderID3_cast


def itkImageFileReaderIF2_New():
    return itkImageFileReaderIF2.New()

class itkImageFileReaderIF2(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIF2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIF2

        Create a new object of the class itkImageFileReaderIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIF2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIF2_swigregister(itkImageFileReaderIF2)
itkImageFileReaderIF2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIF2___New_orig__
itkImageFileReaderIF2_cast = _itkImageFileReaderPython.itkImageFileReaderIF2_cast


def itkImageFileReaderIF3_New():
    return itkImageFileReaderIF3.New()

class itkImageFileReaderIF3(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIF3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIF3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIF3

        Create a new object of the class itkImageFileReaderIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIF3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIF3_swigregister(itkImageFileReaderIF3)
itkImageFileReaderIF3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIF3___New_orig__
itkImageFileReaderIF3_cast = _itkImageFileReaderPython.itkImageFileReaderIF3_cast


def itkImageFileReaderIRGBAUC2_New():
    return itkImageFileReaderIRGBAUC2.New()

class itkImageFileReaderIRGBAUC2(itk.itkImageSourcePython.itkImageSourceIRGBAUC2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIRGBAUC2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIRGBAUC2

        Create a new object of the class itkImageFileReaderIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIRGBAUC2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_swigregister(itkImageFileReaderIRGBAUC2)
itkImageFileReaderIRGBAUC2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIRGBAUC2___New_orig__
itkImageFileReaderIRGBAUC2_cast = _itkImageFileReaderPython.itkImageFileReaderIRGBAUC2_cast


def itkImageFileReaderIRGBAUC3_New():
    return itkImageFileReaderIRGBAUC3.New()

class itkImageFileReaderIRGBAUC3(itk.itkImageSourcePython.itkImageSourceIRGBAUC3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIRGBAUC3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIRGBAUC3

        Create a new object of the class itkImageFileReaderIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIRGBAUC3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_swigregister(itkImageFileReaderIRGBAUC3)
itkImageFileReaderIRGBAUC3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIRGBAUC3___New_orig__
itkImageFileReaderIRGBAUC3_cast = _itkImageFileReaderPython.itkImageFileReaderIRGBAUC3_cast


def itkImageFileReaderIRGBUC2_New():
    return itkImageFileReaderIRGBUC2.New()

class itkImageFileReaderIRGBUC2(itk.itkImageSourcePython.itkImageSourceIRGBUC2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIRGBUC2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIRGBUC2

        Create a new object of the class itkImageFileReaderIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIRGBUC2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIRGBUC2_swigregister(itkImageFileReaderIRGBUC2)
itkImageFileReaderIRGBUC2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIRGBUC2___New_orig__
itkImageFileReaderIRGBUC2_cast = _itkImageFileReaderPython.itkImageFileReaderIRGBUC2_cast


def itkImageFileReaderIRGBUC3_New():
    return itkImageFileReaderIRGBUC3.New()

class itkImageFileReaderIRGBUC3(itk.itkImageSourcePython.itkImageSourceIRGBUC3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIRGBUC3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIRGBUC3

        Create a new object of the class itkImageFileReaderIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIRGBUC3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIRGBUC3_swigregister(itkImageFileReaderIRGBUC3)
itkImageFileReaderIRGBUC3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIRGBUC3___New_orig__
itkImageFileReaderIRGBUC3_cast = _itkImageFileReaderPython.itkImageFileReaderIRGBUC3_cast


def itkImageFileReaderISS2_New():
    return itkImageFileReaderISS2.New()

class itkImageFileReaderISS2(itk.itkImageSourcePython.itkImageSourceISS2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderISS2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderISS2

        Create a new object of the class itkImageFileReaderISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderISS2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderISS2_swigregister(itkImageFileReaderISS2)
itkImageFileReaderISS2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderISS2___New_orig__
itkImageFileReaderISS2_cast = _itkImageFileReaderPython.itkImageFileReaderISS2_cast


def itkImageFileReaderISS3_New():
    return itkImageFileReaderISS3.New()

class itkImageFileReaderISS3(itk.itkImageSourcePython.itkImageSourceISS3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderISS3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderISS3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderISS3

        Create a new object of the class itkImageFileReaderISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderISS3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderISS3_swigregister(itkImageFileReaderISS3)
itkImageFileReaderISS3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderISS3___New_orig__
itkImageFileReaderISS3_cast = _itkImageFileReaderPython.itkImageFileReaderISS3_cast


def itkImageFileReaderIUC2_New():
    return itkImageFileReaderIUC2.New()

class itkImageFileReaderIUC2(itk.itkImageSourcePython.itkImageSourceIUC2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIUC2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIUC2

        Create a new object of the class itkImageFileReaderIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIUC2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIUC2_swigregister(itkImageFileReaderIUC2)
itkImageFileReaderIUC2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIUC2___New_orig__
itkImageFileReaderIUC2_cast = _itkImageFileReaderPython.itkImageFileReaderIUC2_cast


def itkImageFileReaderIUC3_New():
    return itkImageFileReaderIUC3.New()

class itkImageFileReaderIUC3(itk.itkImageSourcePython.itkImageSourceIUC3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIUC3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIUC3

        Create a new object of the class itkImageFileReaderIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIUC3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIUC3_swigregister(itkImageFileReaderIUC3)
itkImageFileReaderIUC3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIUC3___New_orig__
itkImageFileReaderIUC3_cast = _itkImageFileReaderPython.itkImageFileReaderIUC3_cast


def itkImageFileReaderIULL2_New():
    return itkImageFileReaderIULL2.New()

class itkImageFileReaderIULL2(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIULL2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIULL2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIULL2

        Create a new object of the class itkImageFileReaderIULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIULL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIULL2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIULL2_swigregister(itkImageFileReaderIULL2)
itkImageFileReaderIULL2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIULL2___New_orig__
itkImageFileReaderIULL2_cast = _itkImageFileReaderPython.itkImageFileReaderIULL2_cast


def itkImageFileReaderIULL3_New():
    return itkImageFileReaderIULL3.New()

class itkImageFileReaderIULL3(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIULL3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIULL3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIULL3

        Create a new object of the class itkImageFileReaderIULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIULL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIULL3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIULL3_swigregister(itkImageFileReaderIULL3)
itkImageFileReaderIULL3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIULL3___New_orig__
itkImageFileReaderIULL3_cast = _itkImageFileReaderPython.itkImageFileReaderIULL3_cast


def itkImageFileReaderIUS2_New():
    return itkImageFileReaderIUS2.New()

class itkImageFileReaderIUS2(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIUS2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIUS2

        Create a new object of the class itkImageFileReaderIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIUS2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIUS2_swigregister(itkImageFileReaderIUS2)
itkImageFileReaderIUS2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIUS2___New_orig__
itkImageFileReaderIUS2_cast = _itkImageFileReaderPython.itkImageFileReaderIUS2_cast


def itkImageFileReaderIUS3_New():
    return itkImageFileReaderIUS3.New()

class itkImageFileReaderIUS3(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIUS3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIUS3

        Create a new object of the class itkImageFileReaderIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIUS3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIUS3_swigregister(itkImageFileReaderIUS3)
itkImageFileReaderIUS3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIUS3___New_orig__
itkImageFileReaderIUS3_cast = _itkImageFileReaderPython.itkImageFileReaderIUS3_cast


def itkImageFileReaderIVF22_New():
    return itkImageFileReaderIVF22.New()

class itkImageFileReaderIVF22(itk.itkImageSourcePython.itkImageSourceIVF22):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIVF22
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF22

        Create a new object of the class itkImageFileReaderIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF22 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIVF22_swigregister(itkImageFileReaderIVF22)
itkImageFileReaderIVF22___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIVF22___New_orig__
itkImageFileReaderIVF22_cast = _itkImageFileReaderPython.itkImageFileReaderIVF22_cast


def itkImageFileReaderIVF23_New():
    return itkImageFileReaderIVF23.New()

class itkImageFileReaderIVF23(itk.itkImageSourcePython.itkImageSourceIVF23):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIVF23
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF23

        Create a new object of the class itkImageFileReaderIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF23 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIVF23_swigregister(itkImageFileReaderIVF23)
itkImageFileReaderIVF23___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIVF23___New_orig__
itkImageFileReaderIVF23_cast = _itkImageFileReaderPython.itkImageFileReaderIVF23_cast


def itkImageFileReaderIVF32_New():
    return itkImageFileReaderIVF32.New()

class itkImageFileReaderIVF32(itk.itkImageSourcePython.itkImageSourceIVF32):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIVF32
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF32

        Create a new object of the class itkImageFileReaderIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF32 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIVF32_swigregister(itkImageFileReaderIVF32)
itkImageFileReaderIVF32___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIVF32___New_orig__
itkImageFileReaderIVF32_cast = _itkImageFileReaderPython.itkImageFileReaderIVF32_cast


def itkImageFileReaderIVF33_New():
    return itkImageFileReaderIVF33.New()

class itkImageFileReaderIVF33(itk.itkImageSourcePython.itkImageSourceIVF33):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIVF33
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF33

        Create a new object of the class itkImageFileReaderIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF33 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIVF33_swigregister(itkImageFileReaderIVF33)
itkImageFileReaderIVF33___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIVF33___New_orig__
itkImageFileReaderIVF33_cast = _itkImageFileReaderPython.itkImageFileReaderIVF33_cast


def itkImageFileReaderIVF42_New():
    return itkImageFileReaderIVF42.New()

class itkImageFileReaderIVF42(itk.itkImageSourcePython.itkImageSourceIVF42):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIVF42
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF42

        Create a new object of the class itkImageFileReaderIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF42 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIVF42_swigregister(itkImageFileReaderIVF42)
itkImageFileReaderIVF42___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIVF42___New_orig__
itkImageFileReaderIVF42_cast = _itkImageFileReaderPython.itkImageFileReaderIVF42_cast


def itkImageFileReaderIVF43_New():
    return itkImageFileReaderIVF43.New()

class itkImageFileReaderIVF43(itk.itkImageSourcePython.itkImageSourceIVF43):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderIVF43
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderIVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderIVF43

        Create a new object of the class itkImageFileReaderIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderIVF43 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderIVF43_swigregister(itkImageFileReaderIVF43)
itkImageFileReaderIVF43___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderIVF43___New_orig__
itkImageFileReaderIVF43_cast = _itkImageFileReaderPython.itkImageFileReaderIVF43_cast


def itkImageFileReaderVID2_New():
    return itkImageFileReaderVID2.New()

class itkImageFileReaderVID2(itk.itkImageSourcePython.itkImageSourceVID2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVID2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVID2

        Create a new object of the class itkImageFileReaderVID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVID2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVID2_swigregister(itkImageFileReaderVID2)
itkImageFileReaderVID2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVID2___New_orig__
itkImageFileReaderVID2_cast = _itkImageFileReaderPython.itkImageFileReaderVID2_cast


def itkImageFileReaderVID3_New():
    return itkImageFileReaderVID3.New()

class itkImageFileReaderVID3(itk.itkImageSourcePython.itkImageSourceVID3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVID3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVID3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVID3

        Create a new object of the class itkImageFileReaderVID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVID3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVID3_swigregister(itkImageFileReaderVID3)
itkImageFileReaderVID3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVID3___New_orig__
itkImageFileReaderVID3_cast = _itkImageFileReaderPython.itkImageFileReaderVID3_cast


def itkImageFileReaderVIF2_New():
    return itkImageFileReaderVIF2.New()

class itkImageFileReaderVIF2(itk.itkImageSourcePython.itkImageSourceVIF2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVIF2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVIF2

        Create a new object of the class itkImageFileReaderVIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVIF2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVIF2_swigregister(itkImageFileReaderVIF2)
itkImageFileReaderVIF2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVIF2___New_orig__
itkImageFileReaderVIF2_cast = _itkImageFileReaderPython.itkImageFileReaderVIF2_cast


def itkImageFileReaderVIF3_New():
    return itkImageFileReaderVIF3.New()

class itkImageFileReaderVIF3(itk.itkImageSourcePython.itkImageSourceVIF3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVIF3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVIF3

        Create a new object of the class itkImageFileReaderVIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVIF3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVIF3_swigregister(itkImageFileReaderVIF3)
itkImageFileReaderVIF3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVIF3___New_orig__
itkImageFileReaderVIF3_cast = _itkImageFileReaderPython.itkImageFileReaderVIF3_cast


def itkImageFileReaderVISS2_New():
    return itkImageFileReaderVISS2.New()

class itkImageFileReaderVISS2(itk.itkImageSourcePython.itkImageSourceVISS2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVISS2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVISS2

        Create a new object of the class itkImageFileReaderVISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVISS2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVISS2_swigregister(itkImageFileReaderVISS2)
itkImageFileReaderVISS2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVISS2___New_orig__
itkImageFileReaderVISS2_cast = _itkImageFileReaderPython.itkImageFileReaderVISS2_cast


def itkImageFileReaderVISS3_New():
    return itkImageFileReaderVISS3.New()

class itkImageFileReaderVISS3(itk.itkImageSourcePython.itkImageSourceVISS3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVISS3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVISS3

        Create a new object of the class itkImageFileReaderVISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVISS3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVISS3_swigregister(itkImageFileReaderVISS3)
itkImageFileReaderVISS3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVISS3___New_orig__
itkImageFileReaderVISS3_cast = _itkImageFileReaderPython.itkImageFileReaderVISS3_cast


def itkImageFileReaderVIUC2_New():
    return itkImageFileReaderVIUC2.New()

class itkImageFileReaderVIUC2(itk.itkImageSourcePython.itkImageSourceVIUC2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVIUC2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVIUC2

        Create a new object of the class itkImageFileReaderVIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVIUC2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVIUC2_swigregister(itkImageFileReaderVIUC2)
itkImageFileReaderVIUC2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVIUC2___New_orig__
itkImageFileReaderVIUC2_cast = _itkImageFileReaderPython.itkImageFileReaderVIUC2_cast


def itkImageFileReaderVIUC3_New():
    return itkImageFileReaderVIUC3.New()

class itkImageFileReaderVIUC3(itk.itkImageSourcePython.itkImageSourceVIUC3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVIUC3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVIUC3

        Create a new object of the class itkImageFileReaderVIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVIUC3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVIUC3_swigregister(itkImageFileReaderVIUC3)
itkImageFileReaderVIUC3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVIUC3___New_orig__
itkImageFileReaderVIUC3_cast = _itkImageFileReaderPython.itkImageFileReaderVIUC3_cast


def itkImageFileReaderVIUS2_New():
    return itkImageFileReaderVIUS2.New()

class itkImageFileReaderVIUS2(itk.itkImageSourcePython.itkImageSourceVIUS2):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVIUS2
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVIUS2

        Create a new object of the class itkImageFileReaderVIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVIUS2 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVIUS2_swigregister(itkImageFileReaderVIUS2)
itkImageFileReaderVIUS2___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVIUS2___New_orig__
itkImageFileReaderVIUS2_cast = _itkImageFileReaderPython.itkImageFileReaderVIUS2_cast


def itkImageFileReaderVIUS3_New():
    return itkImageFileReaderVIUS3.New()

class itkImageFileReaderVIUS3(itk.itkImageSourcePython.itkImageSourceVIUS3):
    r"""


    Data source that reads image data from a single file.

    This source object is a general filter to read data from a variety of
    file formats. It works with a ImageIOBase subclass to actually do the
    reading of the data. Object factory machinery can be used to
    automatically create the ImageIOBase, or the ImageIOBase can be
    manually created and set. Note that this class reads data from a
    single file; if you wish to read data from a series of files use
    ImageSeriesReader.

    TOutputImage is the type expected by the external users of the filter.
    If data stored in the file is stored in a different format then
    specified by TOutputImage, than this filter converts data between the
    file type and the external expected type. The ConvertTraits template
    argument is used to do the conversion.

    A Pluggable factory pattern is used this allows different kinds of
    readers to be registered (even at run time) without having to modify
    the code in this class. Normally just setting the FileName with the
    appropriate suffix is enough to get the reader to instantiate the
    correct ImageIO and read the file properly. However, some files (like
    raw binary format) have no accepted suffix, so you will have to
    manually create the ImageIO instance of the write type.

    See:   ImageSeriesReader

    See:   ImageIOBase  {Core/Common/ReadWriteVectorImage,Read Write
    Vector Image} {IO/ImageBase/ReadUnknownImageType, Read Unknown Image
    Type} {IO/ImageBase/ReadAnImage,Read An Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_Clone)
    SetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_SetFileNameInput)
    SetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_SetFileName)
    GetFileNameInput = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_GetFileNameInput)
    GetFileName = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_GetImageIO)
    SetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_SetUseStreaming)
    GetUseStreaming = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_GetUseStreaming)
    UseStreamingOn = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_UseStreamingOn)
    UseStreamingOff = _swig_new_instance_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_UseStreamingOff)
    __swig_destroy__ = _itkImageFileReaderPython.delete_itkImageFileReaderVIUS3
    cast = _swig_new_static_method(_itkImageFileReaderPython.itkImageFileReaderVIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileReaderVIUS3

        Create a new object of the class itkImageFileReaderVIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileReaderVIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileReaderVIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileReaderVIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileReaderVIUS3 in _itkImageFileReaderPython:
_itkImageFileReaderPython.itkImageFileReaderVIUS3_swigregister(itkImageFileReaderVIUS3)
itkImageFileReaderVIUS3___New_orig__ = _itkImageFileReaderPython.itkImageFileReaderVIUS3___New_orig__
itkImageFileReaderVIUS3_cast = _itkImageFileReaderPython.itkImageFileReaderVIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_file_reader(*args, **kwargs):
    """Procedural interface for ImageFileReader"""
    import itk
    instance = itk.ImageFileReader.New(*args, **kwargs)
    return instance.__internal_call__()

def image_file_reader_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageFileReader, itkTemplate.itkTemplate):
        filter_object = itk.ImageFileReader.values()[0]
    else:
        filter_object = itk.ImageFileReader

    image_file_reader.__doc__ = filter_object.__doc__
    image_file_reader.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_file_reader.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageFileReader, itkTemplate.itkTemplate):
        image_file_reader.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_file_reader.__doc__ += "\n"
        image_file_reader.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_file_reader.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



