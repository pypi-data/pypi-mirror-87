# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLandweberDeconvolutionImageFilterPython
else:
    import _itkLandweberDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLandweberDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLandweberDeconvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIterativeDeconvolutionImageFilterPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageBoundaryConditionPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkLandweberDeconvolutionImageFilterID2ID2_New():
    return itkLandweberDeconvolutionImageFilterID2ID2.New()

class itkLandweberDeconvolutionImageFilterID2ID2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID2ID2):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterID2ID2

        Create a new object of the class itkLandweberDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterID2ID2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_swigregister(itkLandweberDeconvolutionImageFilterID2ID2)
itkLandweberDeconvolutionImageFilterID2ID2___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2___New_orig__
itkLandweberDeconvolutionImageFilterID2ID2_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID2ID2_cast


def itkLandweberDeconvolutionImageFilterID3ID3_New():
    return itkLandweberDeconvolutionImageFilterID3ID3.New()

class itkLandweberDeconvolutionImageFilterID3ID3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterID3ID3):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterID3ID3

        Create a new object of the class itkLandweberDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterID3ID3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_swigregister(itkLandweberDeconvolutionImageFilterID3ID3)
itkLandweberDeconvolutionImageFilterID3ID3___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3___New_orig__
itkLandweberDeconvolutionImageFilterID3ID3_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterID3ID3_cast


def itkLandweberDeconvolutionImageFilterIF2IF2_New():
    return itkLandweberDeconvolutionImageFilterIF2IF2.New()

class itkLandweberDeconvolutionImageFilterIF2IF2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF2IF2):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkLandweberDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIF2IF2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_swigregister(itkLandweberDeconvolutionImageFilterIF2IF2)
itkLandweberDeconvolutionImageFilterIF2IF2___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2___New_orig__
itkLandweberDeconvolutionImageFilterIF2IF2_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF2IF2_cast


def itkLandweberDeconvolutionImageFilterIF3IF3_New():
    return itkLandweberDeconvolutionImageFilterIF3IF3.New()

class itkLandweberDeconvolutionImageFilterIF3IF3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIF3IF3):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkLandweberDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIF3IF3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_swigregister(itkLandweberDeconvolutionImageFilterIF3IF3)
itkLandweberDeconvolutionImageFilterIF3IF3___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3___New_orig__
itkLandweberDeconvolutionImageFilterIF3IF3_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIF3IF3_cast


def itkLandweberDeconvolutionImageFilterISS2ISS2_New():
    return itkLandweberDeconvolutionImageFilterISS2ISS2.New()

class itkLandweberDeconvolutionImageFilterISS2ISS2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS2ISS2):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkLandweberDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterISS2ISS2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_swigregister(itkLandweberDeconvolutionImageFilterISS2ISS2)
itkLandweberDeconvolutionImageFilterISS2ISS2___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2___New_orig__
itkLandweberDeconvolutionImageFilterISS2ISS2_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS2ISS2_cast


def itkLandweberDeconvolutionImageFilterISS3ISS3_New():
    return itkLandweberDeconvolutionImageFilterISS3ISS3.New()

class itkLandweberDeconvolutionImageFilterISS3ISS3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterISS3ISS3):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkLandweberDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterISS3ISS3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_swigregister(itkLandweberDeconvolutionImageFilterISS3ISS3)
itkLandweberDeconvolutionImageFilterISS3ISS3___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3___New_orig__
itkLandweberDeconvolutionImageFilterISS3ISS3_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterISS3ISS3_cast


def itkLandweberDeconvolutionImageFilterIUC2IUC2_New():
    return itkLandweberDeconvolutionImageFilterIUC2IUC2.New()

class itkLandweberDeconvolutionImageFilterIUC2IUC2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC2IUC2):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUC2IUC2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_swigregister(itkLandweberDeconvolutionImageFilterIUC2IUC2)
itkLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2___New_orig__
itkLandweberDeconvolutionImageFilterIUC2IUC2_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC2IUC2_cast


def itkLandweberDeconvolutionImageFilterIUC3IUC3_New():
    return itkLandweberDeconvolutionImageFilterIUC3IUC3.New()

class itkLandweberDeconvolutionImageFilterIUC3IUC3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUC3IUC3):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUC3IUC3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_swigregister(itkLandweberDeconvolutionImageFilterIUC3IUC3)
itkLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3___New_orig__
itkLandweberDeconvolutionImageFilterIUC3IUC3_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUC3IUC3_cast


def itkLandweberDeconvolutionImageFilterIUS2IUS2_New():
    return itkLandweberDeconvolutionImageFilterIUS2IUS2.New()

class itkLandweberDeconvolutionImageFilterIUS2IUS2(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS2IUS2):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUS2IUS2 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_swigregister(itkLandweberDeconvolutionImageFilterIUS2IUS2)
itkLandweberDeconvolutionImageFilterIUS2IUS2___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2___New_orig__
itkLandweberDeconvolutionImageFilterIUS2IUS2_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS2IUS2_cast


def itkLandweberDeconvolutionImageFilterIUS3IUS3_New():
    return itkLandweberDeconvolutionImageFilterIUS3IUS3.New()

class itkLandweberDeconvolutionImageFilterIUS3IUS3(itk.itkIterativeDeconvolutionImageFilterPython.itkIterativeDeconvolutionImageFilterIUS3IUS3):
    r"""


    Deconvolve an image using the Landweber deconvolution algorithm.

    This filter implements the Landweber deconvolution algorthim as
    defined in Bertero M and Boccacci P, "Introduction to Inverse
    Problems in Imaging", 1998. The algorithm assumes that the input
    image has been formed by a linear shift-invariant system with a known
    kernel.

    The Landweber algorithm converges to a solution that minimizes the sum
    of squared errors $||f \\otimes h - g||$ where $f$ is the estimate
    of the unblurred image, $\\otimes$ is the convolution operator, $h$
    is the blurring kernel, and $g$ is the blurred input image. As such,
    it is best suited for images that have zero-mean Gaussian white noise.

    This is the base implementation of the Landweber algorithm. It may
    produce results with negative values. For a version of this algorithm
    that enforces a positivity constraint on each intermediate solution,
    see ProjectedLandweberDeconvolutionImageFilter.

    This code was adapted from the Insight Journal contribution:

    "Deconvolution: infrastructure and reference algorithms" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3207

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill

    See:   IterativeDeconvolutionImageFilter

    See:   RichardsonLucyDeconvolutionImageFilter

    See:   ProjectedLandweberDeconvolutionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_Clone)
    SetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_GetAlpha)
    __swig_destroy__ = _itkLandweberDeconvolutionImageFilterPython.delete_itkLandweberDeconvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLandweberDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkLandweberDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandweberDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandweberDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandweberDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandweberDeconvolutionImageFilterIUS3IUS3 in _itkLandweberDeconvolutionImageFilterPython:
_itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_swigregister(itkLandweberDeconvolutionImageFilterIUS3IUS3)
itkLandweberDeconvolutionImageFilterIUS3IUS3___New_orig__ = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3___New_orig__
itkLandweberDeconvolutionImageFilterIUS3IUS3_cast = _itkLandweberDeconvolutionImageFilterPython.itkLandweberDeconvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def landweber_deconvolution_image_filter(*args, **kwargs):
    """Procedural interface for LandweberDeconvolutionImageFilter"""
    import itk
    instance = itk.LandweberDeconvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def landweber_deconvolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LandweberDeconvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LandweberDeconvolutionImageFilter.values()[0]
    else:
        filter_object = itk.LandweberDeconvolutionImageFilter

    landweber_deconvolution_image_filter.__doc__ = filter_object.__doc__
    landweber_deconvolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    landweber_deconvolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LandweberDeconvolutionImageFilter, itkTemplate.itkTemplate):
        landweber_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        landweber_deconvolution_image_filter.__doc__ += "\n"
        landweber_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        landweber_deconvolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



