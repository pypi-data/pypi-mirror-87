# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkStreamingImageFilterPython
else:
    import _itkStreamingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkStreamingImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkStreamingImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkStreamingImageFilterID2ID2_New():
    return itkStreamingImageFilterID2ID2.New()

class itkStreamingImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterID2ID2
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterID2ID2

        Create a new object of the class itkStreamingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterID2ID2 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_swigregister(itkStreamingImageFilterID2ID2)
itkStreamingImageFilterID2ID2___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2___New_orig__
itkStreamingImageFilterID2ID2_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterID2ID2_cast


def itkStreamingImageFilterID3ID3_New():
    return itkStreamingImageFilterID3ID3.New()

class itkStreamingImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterID3ID3
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterID3ID3

        Create a new object of the class itkStreamingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterID3ID3 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_swigregister(itkStreamingImageFilterID3ID3)
itkStreamingImageFilterID3ID3___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3___New_orig__
itkStreamingImageFilterID3ID3_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterID3ID3_cast


def itkStreamingImageFilterIF2IF2_New():
    return itkStreamingImageFilterIF2IF2.New()

class itkStreamingImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIF2IF2
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIF2IF2

        Create a new object of the class itkStreamingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIF2IF2 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_swigregister(itkStreamingImageFilterIF2IF2)
itkStreamingImageFilterIF2IF2___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2___New_orig__
itkStreamingImageFilterIF2IF2_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIF2IF2_cast


def itkStreamingImageFilterIF3IF3_New():
    return itkStreamingImageFilterIF3IF3.New()

class itkStreamingImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIF3IF3
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIF3IF3

        Create a new object of the class itkStreamingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIF3IF3 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_swigregister(itkStreamingImageFilterIF3IF3)
itkStreamingImageFilterIF3IF3___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3___New_orig__
itkStreamingImageFilterIF3IF3_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIF3IF3_cast


def itkStreamingImageFilterISS2ISS2_New():
    return itkStreamingImageFilterISS2ISS2.New()

class itkStreamingImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterISS2ISS2

        Create a new object of the class itkStreamingImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterISS2ISS2 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_swigregister(itkStreamingImageFilterISS2ISS2)
itkStreamingImageFilterISS2ISS2___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2___New_orig__
itkStreamingImageFilterISS2ISS2_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterISS2ISS2_cast


def itkStreamingImageFilterISS3ISS3_New():
    return itkStreamingImageFilterISS3ISS3.New()

class itkStreamingImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterISS3ISS3

        Create a new object of the class itkStreamingImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterISS3ISS3 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_swigregister(itkStreamingImageFilterISS3ISS3)
itkStreamingImageFilterISS3ISS3___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3___New_orig__
itkStreamingImageFilterISS3ISS3_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterISS3ISS3_cast


def itkStreamingImageFilterIUC2IUC2_New():
    return itkStreamingImageFilterIUC2IUC2.New()

class itkStreamingImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIUC2IUC2

        Create a new object of the class itkStreamingImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIUC2IUC2 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_swigregister(itkStreamingImageFilterIUC2IUC2)
itkStreamingImageFilterIUC2IUC2___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2___New_orig__
itkStreamingImageFilterIUC2IUC2_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC2IUC2_cast


def itkStreamingImageFilterIUC3IUC3_New():
    return itkStreamingImageFilterIUC3IUC3.New()

class itkStreamingImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIUC3IUC3

        Create a new object of the class itkStreamingImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIUC3IUC3 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_swigregister(itkStreamingImageFilterIUC3IUC3)
itkStreamingImageFilterIUC3IUC3___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3___New_orig__
itkStreamingImageFilterIUC3IUC3_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIUC3IUC3_cast


def itkStreamingImageFilterIUS2IUS2_New():
    return itkStreamingImageFilterIUS2IUS2.New()

class itkStreamingImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIUS2IUS2

        Create a new object of the class itkStreamingImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIUS2IUS2 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_swigregister(itkStreamingImageFilterIUS2IUS2)
itkStreamingImageFilterIUS2IUS2___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2___New_orig__
itkStreamingImageFilterIUS2IUS2_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS2IUS2_cast


def itkStreamingImageFilterIUS3IUS3_New():
    return itkStreamingImageFilterIUS3IUS3.New()

class itkStreamingImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIUS3IUS3

        Create a new object of the class itkStreamingImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIUS3IUS3 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_swigregister(itkStreamingImageFilterIUS3IUS3)
itkStreamingImageFilterIUS3IUS3___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3___New_orig__
itkStreamingImageFilterIUS3IUS3_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIUS3IUS3_cast


def itkStreamingImageFilterIVF22IVF22_New():
    return itkStreamingImageFilterIVF22IVF22.New()

class itkStreamingImageFilterIVF22IVF22(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF22IVF22
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF22IVF22

        Create a new object of the class itkStreamingImageFilterIVF22IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF22IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF22IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIVF22IVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIVF22IVF22 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_swigregister(itkStreamingImageFilterIVF22IVF22)
itkStreamingImageFilterIVF22IVF22___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22___New_orig__
itkStreamingImageFilterIVF22IVF22_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF22IVF22_cast


def itkStreamingImageFilterIVF23IVF23_New():
    return itkStreamingImageFilterIVF23IVF23.New()

class itkStreamingImageFilterIVF23IVF23(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF23IVF23):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF23IVF23
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF23IVF23

        Create a new object of the class itkStreamingImageFilterIVF23IVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF23IVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF23IVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIVF23IVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIVF23IVF23 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_swigregister(itkStreamingImageFilterIVF23IVF23)
itkStreamingImageFilterIVF23IVF23___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23___New_orig__
itkStreamingImageFilterIVF23IVF23_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF23IVF23_cast


def itkStreamingImageFilterIVF32IVF32_New():
    return itkStreamingImageFilterIVF32IVF32.New()

class itkStreamingImageFilterIVF32IVF32(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF32IVF32):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF32IVF32
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF32IVF32

        Create a new object of the class itkStreamingImageFilterIVF32IVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF32IVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF32IVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIVF32IVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIVF32IVF32 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_swigregister(itkStreamingImageFilterIVF32IVF32)
itkStreamingImageFilterIVF32IVF32___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32___New_orig__
itkStreamingImageFilterIVF32IVF32_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF32IVF32_cast


def itkStreamingImageFilterIVF33IVF33_New():
    return itkStreamingImageFilterIVF33IVF33.New()

class itkStreamingImageFilterIVF33IVF33(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF33IVF33
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF33IVF33

        Create a new object of the class itkStreamingImageFilterIVF33IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF33IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF33IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIVF33IVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIVF33IVF33 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_swigregister(itkStreamingImageFilterIVF33IVF33)
itkStreamingImageFilterIVF33IVF33___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33___New_orig__
itkStreamingImageFilterIVF33IVF33_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF33IVF33_cast


def itkStreamingImageFilterIVF42IVF42_New():
    return itkStreamingImageFilterIVF42IVF42.New()

class itkStreamingImageFilterIVF42IVF42(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF42IVF42):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF42IVF42
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF42IVF42

        Create a new object of the class itkStreamingImageFilterIVF42IVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF42IVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF42IVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIVF42IVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIVF42IVF42 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_swigregister(itkStreamingImageFilterIVF42IVF42)
itkStreamingImageFilterIVF42IVF42___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42___New_orig__
itkStreamingImageFilterIVF42IVF42_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF42IVF42_cast


def itkStreamingImageFilterIVF43IVF43_New():
    return itkStreamingImageFilterIVF43IVF43.New()

class itkStreamingImageFilterIVF43IVF43(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF43IVF43):
    r"""


    Pipeline object to control data streaming for large data processing.

    StreamingImageFilter is a pipeline object that allows the user to
    control how data is pulled through the pipeline. To generate its
    OutputRequestedRegion, this filter will divide the output into several
    pieces (controlled by SetNumberOfStreamDivisions), and call the
    upstream pipeline for each piece, tiling the individual outputs into
    one large output. This reduces the memory footprint for the
    application since each filter does not have to process the entire
    dataset at once. This filter will produce the entire output as one
    image, but the upstream filters will do their processing in pieces. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_Clone)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetNumberOfStreamDivisions)
    SetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_SetRegionSplitter)
    GetModifiableRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetModifiableRegionSplitter)
    GetRegionSplitter = _swig_new_instance_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_GetRegionSplitter)
    SameDimensionCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_InputConvertibleToOutputCheck
    
    __swig_destroy__ = _itkStreamingImageFilterPython.delete_itkStreamingImageFilterIVF43IVF43
    cast = _swig_new_static_method(_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_cast)

    def New(*args, **kargs):
        """New() -> itkStreamingImageFilterIVF43IVF43

        Create a new object of the class itkStreamingImageFilterIVF43IVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStreamingImageFilterIVF43IVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStreamingImageFilterIVF43IVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStreamingImageFilterIVF43IVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStreamingImageFilterIVF43IVF43 in _itkStreamingImageFilterPython:
_itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_swigregister(itkStreamingImageFilterIVF43IVF43)
itkStreamingImageFilterIVF43IVF43___New_orig__ = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43___New_orig__
itkStreamingImageFilterIVF43IVF43_cast = _itkStreamingImageFilterPython.itkStreamingImageFilterIVF43IVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def streaming_image_filter(*args, **kwargs):
    """Procedural interface for StreamingImageFilter"""
    import itk
    instance = itk.StreamingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def streaming_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.StreamingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.StreamingImageFilter.values()[0]
    else:
        filter_object = itk.StreamingImageFilter

    streaming_image_filter.__doc__ = filter_object.__doc__
    streaming_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    streaming_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.StreamingImageFilter, itkTemplate.itkTemplate):
        streaming_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        streaming_image_filter.__doc__ += "\n"
        streaming_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        streaming_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



