# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKConvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkConvolutionImageFilterPython
else:
    import _itkConvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkConvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkConvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageBoundaryConditionPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkConvolutionImageFilterID2ID2_New():
    return itkConvolutionImageFilterID2ID2.New()

class itkConvolutionImageFilterID2ID2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID2ID2):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterID2ID2

        Create a new object of the class itkConvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterID2ID2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_swigregister(itkConvolutionImageFilterID2ID2)
itkConvolutionImageFilterID2ID2___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2___New_orig__
itkConvolutionImageFilterID2ID2_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterID2ID2_cast


def itkConvolutionImageFilterID3ID3_New():
    return itkConvolutionImageFilterID3ID3.New()

class itkConvolutionImageFilterID3ID3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseID3ID3):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterID3ID3

        Create a new object of the class itkConvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterID3ID3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_swigregister(itkConvolutionImageFilterID3ID3)
itkConvolutionImageFilterID3ID3___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3___New_orig__
itkConvolutionImageFilterID3ID3_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterID3ID3_cast


def itkConvolutionImageFilterIF2IF2_New():
    return itkConvolutionImageFilterIF2IF2.New()

class itkConvolutionImageFilterIF2IF2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF2IF2):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIF2IF2

        Create a new object of the class itkConvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIF2IF2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_swigregister(itkConvolutionImageFilterIF2IF2)
itkConvolutionImageFilterIF2IF2___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2___New_orig__
itkConvolutionImageFilterIF2IF2_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF2IF2_cast


def itkConvolutionImageFilterIF3IF3_New():
    return itkConvolutionImageFilterIF3IF3.New()

class itkConvolutionImageFilterIF3IF3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIF3IF3):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIF3IF3

        Create a new object of the class itkConvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIF3IF3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_swigregister(itkConvolutionImageFilterIF3IF3)
itkConvolutionImageFilterIF3IF3___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3___New_orig__
itkConvolutionImageFilterIF3IF3_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIF3IF3_cast


def itkConvolutionImageFilterISS2ISS2_New():
    return itkConvolutionImageFilterISS2ISS2.New()

class itkConvolutionImageFilterISS2ISS2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS2ISS2):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterISS2ISS2

        Create a new object of the class itkConvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterISS2ISS2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_swigregister(itkConvolutionImageFilterISS2ISS2)
itkConvolutionImageFilterISS2ISS2___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2___New_orig__
itkConvolutionImageFilterISS2ISS2_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS2ISS2_cast


def itkConvolutionImageFilterISS3ISS3_New():
    return itkConvolutionImageFilterISS3ISS3.New()

class itkConvolutionImageFilterISS3ISS3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseISS3ISS3):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterISS3ISS3

        Create a new object of the class itkConvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterISS3ISS3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_swigregister(itkConvolutionImageFilterISS3ISS3)
itkConvolutionImageFilterISS3ISS3___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3___New_orig__
itkConvolutionImageFilterISS3ISS3_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterISS3ISS3_cast


def itkConvolutionImageFilterIUC2IUC2_New():
    return itkConvolutionImageFilterIUC2IUC2.New()

class itkConvolutionImageFilterIUC2IUC2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC2IUC2):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUC2IUC2

        Create a new object of the class itkConvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUC2IUC2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_swigregister(itkConvolutionImageFilterIUC2IUC2)
itkConvolutionImageFilterIUC2IUC2___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2___New_orig__
itkConvolutionImageFilterIUC2IUC2_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC2IUC2_cast


def itkConvolutionImageFilterIUC3IUC3_New():
    return itkConvolutionImageFilterIUC3IUC3.New()

class itkConvolutionImageFilterIUC3IUC3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUC3IUC3):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUC3IUC3

        Create a new object of the class itkConvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUC3IUC3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_swigregister(itkConvolutionImageFilterIUC3IUC3)
itkConvolutionImageFilterIUC3IUC3___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3___New_orig__
itkConvolutionImageFilterIUC3IUC3_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUC3IUC3_cast


def itkConvolutionImageFilterIUS2IUS2_New():
    return itkConvolutionImageFilterIUS2IUS2.New()

class itkConvolutionImageFilterIUS2IUS2(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS2IUS2):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUS2IUS2

        Create a new object of the class itkConvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUS2IUS2 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_swigregister(itkConvolutionImageFilterIUS2IUS2)
itkConvolutionImageFilterIUS2IUS2___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2___New_orig__
itkConvolutionImageFilterIUS2IUS2_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS2IUS2_cast


def itkConvolutionImageFilterIUS3IUS3_New():
    return itkConvolutionImageFilterIUS3IUS3.New()

class itkConvolutionImageFilterIUS3IUS3(itk.itkConvolutionImageFilterBasePython.itkConvolutionImageFilterBaseIUS3IUS3):
    r"""


    Convolve a given image with an arbitrary image kernel.

    This filter operates by centering the flipped kernel at each pixel in
    the image and computing the inner product between pixel values in the
    image and pixel values in the kernel. The center of the kernel is
    defined as $ \\lfloor (2*i+s-1)/2 \\rfloor $ where $i$ is the
    index and $s$ is the size of the largest possible region of the kernel
    image. For kernels with odd sizes in all dimensions, this corresponds
    to the center pixel. If a dimension of the kernel image has an even
    size, then the center index of the kernel in that dimension will be
    the largest integral index that is less than the continuous index of
    the image center.

    The kernel can optionally be normalized to sum to 1 using
    NormalizeOn(). Normalization is off by default.

    WARNING:  This filter ignores the spacing, origin, and orientation of
    the kernel image and treats them as identical to those in the input
    image.  This code was contributed in the Insight Journal paper:

    "Image Kernel Convolution" by Tustison N., Gee
    J.https://hdl.handle.net/1926/1323http://www.insight-
    journal.org/browse/publication/208

    Nicholas J. Tustison

    James C. Gee
    example{Filtering/Convolution/ConvolveImageWithKernel,Convolve Image
    With Kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_Clone)
    __swig_destroy__ = _itkConvolutionImageFilterPython.delete_itkConvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkConvolutionImageFilterIUS3IUS3

        Create a new object of the class itkConvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConvolutionImageFilterIUS3IUS3 in _itkConvolutionImageFilterPython:
_itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_swigregister(itkConvolutionImageFilterIUS3IUS3)
itkConvolutionImageFilterIUS3IUS3___New_orig__ = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3___New_orig__
itkConvolutionImageFilterIUS3IUS3_cast = _itkConvolutionImageFilterPython.itkConvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def convolution_image_filter(*args, **kwargs):
    """Procedural interface for ConvolutionImageFilter"""
    import itk
    instance = itk.ConvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def convolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ConvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ConvolutionImageFilter.values()[0]
    else:
        filter_object = itk.ConvolutionImageFilter

    convolution_image_filter.__doc__ = filter_object.__doc__
    convolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    convolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ConvolutionImageFilter, itkTemplate.itkTemplate):
        convolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        convolution_image_filter.__doc__ += "\n"
        convolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        convolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



