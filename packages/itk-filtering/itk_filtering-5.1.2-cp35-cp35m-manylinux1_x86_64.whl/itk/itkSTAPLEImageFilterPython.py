# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageComparePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSTAPLEImageFilterPython
else:
    import _itkSTAPLEImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSTAPLEImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSTAPLEImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkSTAPLEImageFilterID2ID2_New():
    return itkSTAPLEImageFilterID2ID2.New()

class itkSTAPLEImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    The STAPLE filter implements the Simultaneous Truth and Performance
    Level Estimation algorithm for generating ground truth volumes from a
    set of binary expert segmentations.

    The STAPLE algorithm treats segmentation as a pixelwise
    classification, which leads to an averaging scheme that accounts for
    systematic biases in the behavior of experts in order to generate a
    fuzzy ground truth volume and simultaneous accuracy assessment of each
    expert. The ground truth volumes produced by this filter are floating
    point volumes of values between zero and one that indicate probability
    of each pixel being in the object targeted by the segmentation.

    The STAPLE algorithm is described in

    S. Warfield, K. Zou, W. Wells, "Validation of image segmentation and
    expert  quality with an expectation-maximization algorithm" in MICCAI
    2002: Fifth International Conference on Medical Image Computing and
    Computer-Assisted Intervention, Springer-Verlag, Heidelberg, Germany,
    2002, pp. 298-306

    INPUTS Input volumes to the STAPLE filter must be binary segmentations
    of an image, that is, there must be a single foreground value that
    represents positively classified pixels (pixels that are considered to
    belong inside the segmentation). Any number of background pixel values
    may be present in the labels as long as the structure you are
    interested in creating ground truth for is consistently labeled among
    all input volumes. Pixel type of the input volumes does not matter.
    Specify the label value for positively classified pixels using
    SetForegroundValue. All other labels will be considered to be
    negatively classified pixels (background).  Input volumes must all
    contain the same size RequestedRegions.

    OUTPUTS The STAPLE filter produces a single output volume with a range
    of floating point values from zero to one. IT IS VERY IMPORTANT TO
    INSTANTIATE THIS FILTER WITH A FLOATING POINT OUTPUT TYPE (floats or
    doubles). You may threshold the output above some probability
    threshold if you wish to produce a binary ground truth. PARAMETERS The
    STAPLE algorithm requires a number of inputs. You may specify any
    number of input volumes using the SetInput(i, p_i) method, where i
    ranges from zero to N-1, N is the total number of input segmentations,
    and p_i is the SmartPointer to the i-th segmentation.  The
    SetConfidenceWeight parameter is a modifier for the prior probability
    that any pixel would be classified as inside the target object. This
    implementation of the STAPLE algorithm automatically calculates prior
    positive classification probability as the average fraction of the
    image volume filled by the target object in each input segmentation.
    The ConfidenceWeight parameter allows for scaling the of this default
    prior probability: if g_t is the prior probability that a pixel would
    be classified inside the target object, then g_t is set to g_t *
    ConfidenceWeight before iterating on the solution. In general
    ConfidenceWeight should be left to the default of 1.0.

    You must provide a foreground value using SetForegroundValue that the
    STAPLE algorithm will use to identify positively classified pixels in
    the the input images. All other values in the image will be treated as
    background values. the segmented region, then use
    SetForegroundValue(1).

    The STAPLE algorithm is an iterative E-M algorithm and will converge
    on a solution after some number of iterations that cannot be known a
    priori. After updating the filter, the total elapsed iterations taken
    to converge on the solution can be queried through
    GetElapsedIterations(). You may also specify a
    MaximumNumberOfIterations, after which the algorithm will stop
    iterating regardless of whether or not it has converged. This
    implementation of the STAPLE algorithm will find the solution to
    within seven digits of precision unless it is stopped early.

    Once updated, the Sensitivity (true positive fraction, q) and
    Specificity (true negative fraction, q) for each expert input volume
    can be queried using GetSensitivity(i) and GetSpecificity(i), where i
    is the i-th input volume.

    REQUIRED PARAMETERS The only required parameters for this filter are
    the ForegroundValue and the input volumes. All other parameters may be
    safely left to their default values. Please see the paper cited above
    for more information on the STAPLE algorithm and its parameters. A
    proper understanding of the algorithm is important for interpreting
    the results that it produces. EVENTS This filter invokes
    IterationEvent() at each iteration of the E-M algorithm. Setting the
    AbortGenerateData() flag will cause the algorithm to halt after the
    current iteration and produce results just as if it had converged. The
    algorithm makes no attempt to report its progress since the number of
    iterations needed cannot be known in advance. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_GetForegroundValue)
    GetSensitivity = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_GetSensitivity)
    GetSpecificity = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_GetSpecificity)
    SetMaximumIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_GetMaximumIterations)
    SetConfidenceWeight = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_SetConfidenceWeight)
    GetConfidenceWeight = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_GetConfidenceWeight)
    GetElapsedIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_GetElapsedIterations)
    InputHasNumericTraitsCheck = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSTAPLEImageFilterPython.delete_itkSTAPLEImageFilterID2ID2
    cast = _swig_new_static_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkSTAPLEImageFilterID2ID2

        Create a new object of the class itkSTAPLEImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSTAPLEImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSTAPLEImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSTAPLEImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSTAPLEImageFilterID2ID2 in _itkSTAPLEImageFilterPython:
_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_swigregister(itkSTAPLEImageFilterID2ID2)
itkSTAPLEImageFilterID2ID2___New_orig__ = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2___New_orig__
itkSTAPLEImageFilterID2ID2_cast = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID2ID2_cast


def itkSTAPLEImageFilterID3ID3_New():
    return itkSTAPLEImageFilterID3ID3.New()

class itkSTAPLEImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    The STAPLE filter implements the Simultaneous Truth and Performance
    Level Estimation algorithm for generating ground truth volumes from a
    set of binary expert segmentations.

    The STAPLE algorithm treats segmentation as a pixelwise
    classification, which leads to an averaging scheme that accounts for
    systematic biases in the behavior of experts in order to generate a
    fuzzy ground truth volume and simultaneous accuracy assessment of each
    expert. The ground truth volumes produced by this filter are floating
    point volumes of values between zero and one that indicate probability
    of each pixel being in the object targeted by the segmentation.

    The STAPLE algorithm is described in

    S. Warfield, K. Zou, W. Wells, "Validation of image segmentation and
    expert  quality with an expectation-maximization algorithm" in MICCAI
    2002: Fifth International Conference on Medical Image Computing and
    Computer-Assisted Intervention, Springer-Verlag, Heidelberg, Germany,
    2002, pp. 298-306

    INPUTS Input volumes to the STAPLE filter must be binary segmentations
    of an image, that is, there must be a single foreground value that
    represents positively classified pixels (pixels that are considered to
    belong inside the segmentation). Any number of background pixel values
    may be present in the labels as long as the structure you are
    interested in creating ground truth for is consistently labeled among
    all input volumes. Pixel type of the input volumes does not matter.
    Specify the label value for positively classified pixels using
    SetForegroundValue. All other labels will be considered to be
    negatively classified pixels (background).  Input volumes must all
    contain the same size RequestedRegions.

    OUTPUTS The STAPLE filter produces a single output volume with a range
    of floating point values from zero to one. IT IS VERY IMPORTANT TO
    INSTANTIATE THIS FILTER WITH A FLOATING POINT OUTPUT TYPE (floats or
    doubles). You may threshold the output above some probability
    threshold if you wish to produce a binary ground truth. PARAMETERS The
    STAPLE algorithm requires a number of inputs. You may specify any
    number of input volumes using the SetInput(i, p_i) method, where i
    ranges from zero to N-1, N is the total number of input segmentations,
    and p_i is the SmartPointer to the i-th segmentation.  The
    SetConfidenceWeight parameter is a modifier for the prior probability
    that any pixel would be classified as inside the target object. This
    implementation of the STAPLE algorithm automatically calculates prior
    positive classification probability as the average fraction of the
    image volume filled by the target object in each input segmentation.
    The ConfidenceWeight parameter allows for scaling the of this default
    prior probability: if g_t is the prior probability that a pixel would
    be classified inside the target object, then g_t is set to g_t *
    ConfidenceWeight before iterating on the solution. In general
    ConfidenceWeight should be left to the default of 1.0.

    You must provide a foreground value using SetForegroundValue that the
    STAPLE algorithm will use to identify positively classified pixels in
    the the input images. All other values in the image will be treated as
    background values. the segmented region, then use
    SetForegroundValue(1).

    The STAPLE algorithm is an iterative E-M algorithm and will converge
    on a solution after some number of iterations that cannot be known a
    priori. After updating the filter, the total elapsed iterations taken
    to converge on the solution can be queried through
    GetElapsedIterations(). You may also specify a
    MaximumNumberOfIterations, after which the algorithm will stop
    iterating regardless of whether or not it has converged. This
    implementation of the STAPLE algorithm will find the solution to
    within seven digits of precision unless it is stopped early.

    Once updated, the Sensitivity (true positive fraction, q) and
    Specificity (true negative fraction, q) for each expert input volume
    can be queried using GetSensitivity(i) and GetSpecificity(i), where i
    is the i-th input volume.

    REQUIRED PARAMETERS The only required parameters for this filter are
    the ForegroundValue and the input volumes. All other parameters may be
    safely left to their default values. Please see the paper cited above
    for more information on the STAPLE algorithm and its parameters. A
    proper understanding of the algorithm is important for interpreting
    the results that it produces. EVENTS This filter invokes
    IterationEvent() at each iteration of the E-M algorithm. Setting the
    AbortGenerateData() flag will cause the algorithm to halt after the
    current iteration and produce results just as if it had converged. The
    algorithm makes no attempt to report its progress since the number of
    iterations needed cannot be known in advance. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_GetForegroundValue)
    GetSensitivity = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_GetSensitivity)
    GetSpecificity = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_GetSpecificity)
    SetMaximumIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_GetMaximumIterations)
    SetConfidenceWeight = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_SetConfidenceWeight)
    GetConfidenceWeight = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_GetConfidenceWeight)
    GetElapsedIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_GetElapsedIterations)
    InputHasNumericTraitsCheck = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSTAPLEImageFilterPython.delete_itkSTAPLEImageFilterID3ID3
    cast = _swig_new_static_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkSTAPLEImageFilterID3ID3

        Create a new object of the class itkSTAPLEImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSTAPLEImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSTAPLEImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSTAPLEImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSTAPLEImageFilterID3ID3 in _itkSTAPLEImageFilterPython:
_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_swigregister(itkSTAPLEImageFilterID3ID3)
itkSTAPLEImageFilterID3ID3___New_orig__ = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3___New_orig__
itkSTAPLEImageFilterID3ID3_cast = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterID3ID3_cast


def itkSTAPLEImageFilterIF2IF2_New():
    return itkSTAPLEImageFilterIF2IF2.New()

class itkSTAPLEImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    The STAPLE filter implements the Simultaneous Truth and Performance
    Level Estimation algorithm for generating ground truth volumes from a
    set of binary expert segmentations.

    The STAPLE algorithm treats segmentation as a pixelwise
    classification, which leads to an averaging scheme that accounts for
    systematic biases in the behavior of experts in order to generate a
    fuzzy ground truth volume and simultaneous accuracy assessment of each
    expert. The ground truth volumes produced by this filter are floating
    point volumes of values between zero and one that indicate probability
    of each pixel being in the object targeted by the segmentation.

    The STAPLE algorithm is described in

    S. Warfield, K. Zou, W. Wells, "Validation of image segmentation and
    expert  quality with an expectation-maximization algorithm" in MICCAI
    2002: Fifth International Conference on Medical Image Computing and
    Computer-Assisted Intervention, Springer-Verlag, Heidelberg, Germany,
    2002, pp. 298-306

    INPUTS Input volumes to the STAPLE filter must be binary segmentations
    of an image, that is, there must be a single foreground value that
    represents positively classified pixels (pixels that are considered to
    belong inside the segmentation). Any number of background pixel values
    may be present in the labels as long as the structure you are
    interested in creating ground truth for is consistently labeled among
    all input volumes. Pixel type of the input volumes does not matter.
    Specify the label value for positively classified pixels using
    SetForegroundValue. All other labels will be considered to be
    negatively classified pixels (background).  Input volumes must all
    contain the same size RequestedRegions.

    OUTPUTS The STAPLE filter produces a single output volume with a range
    of floating point values from zero to one. IT IS VERY IMPORTANT TO
    INSTANTIATE THIS FILTER WITH A FLOATING POINT OUTPUT TYPE (floats or
    doubles). You may threshold the output above some probability
    threshold if you wish to produce a binary ground truth. PARAMETERS The
    STAPLE algorithm requires a number of inputs. You may specify any
    number of input volumes using the SetInput(i, p_i) method, where i
    ranges from zero to N-1, N is the total number of input segmentations,
    and p_i is the SmartPointer to the i-th segmentation.  The
    SetConfidenceWeight parameter is a modifier for the prior probability
    that any pixel would be classified as inside the target object. This
    implementation of the STAPLE algorithm automatically calculates prior
    positive classification probability as the average fraction of the
    image volume filled by the target object in each input segmentation.
    The ConfidenceWeight parameter allows for scaling the of this default
    prior probability: if g_t is the prior probability that a pixel would
    be classified inside the target object, then g_t is set to g_t *
    ConfidenceWeight before iterating on the solution. In general
    ConfidenceWeight should be left to the default of 1.0.

    You must provide a foreground value using SetForegroundValue that the
    STAPLE algorithm will use to identify positively classified pixels in
    the the input images. All other values in the image will be treated as
    background values. the segmented region, then use
    SetForegroundValue(1).

    The STAPLE algorithm is an iterative E-M algorithm and will converge
    on a solution after some number of iterations that cannot be known a
    priori. After updating the filter, the total elapsed iterations taken
    to converge on the solution can be queried through
    GetElapsedIterations(). You may also specify a
    MaximumNumberOfIterations, after which the algorithm will stop
    iterating regardless of whether or not it has converged. This
    implementation of the STAPLE algorithm will find the solution to
    within seven digits of precision unless it is stopped early.

    Once updated, the Sensitivity (true positive fraction, q) and
    Specificity (true negative fraction, q) for each expert input volume
    can be queried using GetSensitivity(i) and GetSpecificity(i), where i
    is the i-th input volume.

    REQUIRED PARAMETERS The only required parameters for this filter are
    the ForegroundValue and the input volumes. All other parameters may be
    safely left to their default values. Please see the paper cited above
    for more information on the STAPLE algorithm and its parameters. A
    proper understanding of the algorithm is important for interpreting
    the results that it produces. EVENTS This filter invokes
    IterationEvent() at each iteration of the E-M algorithm. Setting the
    AbortGenerateData() flag will cause the algorithm to halt after the
    current iteration and produce results just as if it had converged. The
    algorithm makes no attempt to report its progress since the number of
    iterations needed cannot be known in advance. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetForegroundValue)
    GetSensitivity = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetSensitivity)
    GetSpecificity = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetSpecificity)
    SetMaximumIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetMaximumIterations)
    SetConfidenceWeight = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_SetConfidenceWeight)
    GetConfidenceWeight = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetConfidenceWeight)
    GetElapsedIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_GetElapsedIterations)
    InputHasNumericTraitsCheck = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSTAPLEImageFilterPython.delete_itkSTAPLEImageFilterIF2IF2
    cast = _swig_new_static_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkSTAPLEImageFilterIF2IF2

        Create a new object of the class itkSTAPLEImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSTAPLEImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSTAPLEImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSTAPLEImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSTAPLEImageFilterIF2IF2 in _itkSTAPLEImageFilterPython:
_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_swigregister(itkSTAPLEImageFilterIF2IF2)
itkSTAPLEImageFilterIF2IF2___New_orig__ = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2___New_orig__
itkSTAPLEImageFilterIF2IF2_cast = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF2IF2_cast


def itkSTAPLEImageFilterIF3IF3_New():
    return itkSTAPLEImageFilterIF3IF3.New()

class itkSTAPLEImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    The STAPLE filter implements the Simultaneous Truth and Performance
    Level Estimation algorithm for generating ground truth volumes from a
    set of binary expert segmentations.

    The STAPLE algorithm treats segmentation as a pixelwise
    classification, which leads to an averaging scheme that accounts for
    systematic biases in the behavior of experts in order to generate a
    fuzzy ground truth volume and simultaneous accuracy assessment of each
    expert. The ground truth volumes produced by this filter are floating
    point volumes of values between zero and one that indicate probability
    of each pixel being in the object targeted by the segmentation.

    The STAPLE algorithm is described in

    S. Warfield, K. Zou, W. Wells, "Validation of image segmentation and
    expert  quality with an expectation-maximization algorithm" in MICCAI
    2002: Fifth International Conference on Medical Image Computing and
    Computer-Assisted Intervention, Springer-Verlag, Heidelberg, Germany,
    2002, pp. 298-306

    INPUTS Input volumes to the STAPLE filter must be binary segmentations
    of an image, that is, there must be a single foreground value that
    represents positively classified pixels (pixels that are considered to
    belong inside the segmentation). Any number of background pixel values
    may be present in the labels as long as the structure you are
    interested in creating ground truth for is consistently labeled among
    all input volumes. Pixel type of the input volumes does not matter.
    Specify the label value for positively classified pixels using
    SetForegroundValue. All other labels will be considered to be
    negatively classified pixels (background).  Input volumes must all
    contain the same size RequestedRegions.

    OUTPUTS The STAPLE filter produces a single output volume with a range
    of floating point values from zero to one. IT IS VERY IMPORTANT TO
    INSTANTIATE THIS FILTER WITH A FLOATING POINT OUTPUT TYPE (floats or
    doubles). You may threshold the output above some probability
    threshold if you wish to produce a binary ground truth. PARAMETERS The
    STAPLE algorithm requires a number of inputs. You may specify any
    number of input volumes using the SetInput(i, p_i) method, where i
    ranges from zero to N-1, N is the total number of input segmentations,
    and p_i is the SmartPointer to the i-th segmentation.  The
    SetConfidenceWeight parameter is a modifier for the prior probability
    that any pixel would be classified as inside the target object. This
    implementation of the STAPLE algorithm automatically calculates prior
    positive classification probability as the average fraction of the
    image volume filled by the target object in each input segmentation.
    The ConfidenceWeight parameter allows for scaling the of this default
    prior probability: if g_t is the prior probability that a pixel would
    be classified inside the target object, then g_t is set to g_t *
    ConfidenceWeight before iterating on the solution. In general
    ConfidenceWeight should be left to the default of 1.0.

    You must provide a foreground value using SetForegroundValue that the
    STAPLE algorithm will use to identify positively classified pixels in
    the the input images. All other values in the image will be treated as
    background values. the segmented region, then use
    SetForegroundValue(1).

    The STAPLE algorithm is an iterative E-M algorithm and will converge
    on a solution after some number of iterations that cannot be known a
    priori. After updating the filter, the total elapsed iterations taken
    to converge on the solution can be queried through
    GetElapsedIterations(). You may also specify a
    MaximumNumberOfIterations, after which the algorithm will stop
    iterating regardless of whether or not it has converged. This
    implementation of the STAPLE algorithm will find the solution to
    within seven digits of precision unless it is stopped early.

    Once updated, the Sensitivity (true positive fraction, q) and
    Specificity (true negative fraction, q) for each expert input volume
    can be queried using GetSensitivity(i) and GetSpecificity(i), where i
    is the i-th input volume.

    REQUIRED PARAMETERS The only required parameters for this filter are
    the ForegroundValue and the input volumes. All other parameters may be
    safely left to their default values. Please see the paper cited above
    for more information on the STAPLE algorithm and its parameters. A
    proper understanding of the algorithm is important for interpreting
    the results that it produces. EVENTS This filter invokes
    IterationEvent() at each iteration of the E-M algorithm. Setting the
    AbortGenerateData() flag will cause the algorithm to halt after the
    current iteration and produce results just as if it had converged. The
    algorithm makes no attempt to report its progress since the number of
    iterations needed cannot be known in advance. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_Clone)
    SetForegroundValue = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetForegroundValue)
    GetSensitivity = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetSensitivity)
    GetSpecificity = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetSpecificity)
    SetMaximumIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetMaximumIterations)
    SetConfidenceWeight = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_SetConfidenceWeight)
    GetConfidenceWeight = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetConfidenceWeight)
    GetElapsedIterations = _swig_new_instance_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_GetElapsedIterations)
    InputHasNumericTraitsCheck = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkSTAPLEImageFilterPython.delete_itkSTAPLEImageFilterIF3IF3
    cast = _swig_new_static_method(_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkSTAPLEImageFilterIF3IF3

        Create a new object of the class itkSTAPLEImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSTAPLEImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSTAPLEImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSTAPLEImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSTAPLEImageFilterIF3IF3 in _itkSTAPLEImageFilterPython:
_itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_swigregister(itkSTAPLEImageFilterIF3IF3)
itkSTAPLEImageFilterIF3IF3___New_orig__ = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3___New_orig__
itkSTAPLEImageFilterIF3IF3_cast = _itkSTAPLEImageFilterPython.itkSTAPLEImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def staple_image_filter(*args, **kwargs):
    """Procedural interface for STAPLEImageFilter"""
    import itk
    instance = itk.STAPLEImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def staple_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.STAPLEImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.STAPLEImageFilter.values()[0]
    else:
        filter_object = itk.STAPLEImageFilter

    staple_image_filter.__doc__ = filter_object.__doc__
    staple_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    staple_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.STAPLEImageFilter, itkTemplate.itkTemplate):
        staple_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        staple_image_filter.__doc__ += "\n"
        staple_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        staple_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



