Metadata-Version: 2.1
Name: dbus-signature-pyparsing
Version: 0.4
Summary: dbus signature parser
Home-page: https://github.com/stratis-storage/dbus-signature-pyparsing
Author: Anne Mulhern
Author-email: amulhern@redhat.com
License: Apache 2.0
Platform: Linux
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Dist: pyparsing

A Parser for a D-Bus Signature
==============================

A parser for a dbus signature.

Introduction
------------

This module contains a parser for dbus signatures constructed using the
pyparsing library (http://pyparsing.wikispaces.com/).

The grammar follows the informal specifications at
https://dbus.freedesktop.org/doc/dbus-specification.html.
This grammar is a very simple one, parsable by an LL(1) parser.

The grammar has undergone significant testing using the Hypothesis testing
library (http://hypothesis.works/).

Usage and Implementation Hints
------------------------------

Usage of the library to verify that a string is a signature is fairly
straightforward::

   >>> from dbus_signature_pyparsing import Parser
   >>> parser = Parser()
   >>> parser.PARSER.parseString("a(qy)", parseAll=True)

If parseString() does not raise a pyparsing exception, the argument string
is a valid signature.

Note that the empty string is a valid signature. Thus, it is important to
require that the parser parse the entire string by setting the parseAll
parameter to True. If parseAll is False, which is the default, the parser
can always parse the empty string, and every string will be parsed and verified
to be a valid signature.

The Parser object exposes all its sub-parsers as instance attributes.
The PARSER attribute is the top-level parser, suitable for parsing general
signatures. The COMPLETE attribute parses what is defined in the
informal specification as a "single complete type". The CODE attribute is
equivalent to the specification's "type code".

The parser is easily used either by delegation or by inheritance. Each
sub-parser attribute is a ParserElement; consequently each sub-parser supports
the addParseAction() method. To customize the basic parser to return a
particular value as a result of having parsed a signature invoke the
addParseAction() method on each appropriate sub-parser with an appropriately
chosen method. The modified parser should then return the desired value when
the parseString() method is invoked on a valid signature string.
For further assistance, consult pyparsing's extensive documentation at
http://pyparsing.wikispaces.com/ and https://pythonhosted.org/pyparsing/.

Packaging
---------

Downstream packagers, if incorporating testing into their packaging, are
encouraged to use only the tests in the test_deterministic.py module, to
avoid testing failures that may arise due to the non-deterministic behavior
of Hypothesis tests.


