load("@com_github_google_tensorstore//:utils.bzl", "cc_library_with_strip_include_prefix", "package_relative_path")

licenses(["notice"])

exports_files(["COPYING"])

cc_library_with_strip_include_prefix(
    name = "nghttp2",
    srcs = [
        "lib/nghttp2_version.c",
        "lib/nghttp2_net.h",
        "lib/nghttp2_callbacks.c",
        "lib/nghttp2_map.c",
        "lib/nghttp2_helper.h",
        "lib/nghttp2_stream.h",
        "lib/nghttp2_int.h",
        "lib/nghttp2_buf.h",
        "lib/nghttp2_priority_spec.c",
        "lib/nghttp2_npn.h",
        "lib/nghttp2_frame.h",
        "lib/nghttp2_queue.h",
        "lib/nghttp2_hd_huffman_data.c",
        "lib/nghttp2_buf.c",
        "lib/nghttp2_map.h",
        "lib/nghttp2_queue.c",
        "lib/nghttp2_outbound_item.h",
        "lib/nghttp2_frame.c",
        "lib/nghttp2_http.h",
        "lib/nghttp2_option.c",
        "lib/nghttp2_option.h",
        "lib/nghttp2_submit.c",
        "lib/nghttp2_callbacks.h",
        "lib/nghttp2_mem.h",
        "lib/nghttp2_rcbuf.c",
        "lib/nghttp2_mem.c",
        "lib/nghttp2_submit.h",
        "lib/nghttp2_debug.h",
        "lib/nghttp2_hd.h",
        "lib/nghttp2_hd_huffman.c",
        "lib/nghttp2_session.c",
        "lib/nghttp2_debug.c",
        "lib/nghttp2_stream.c",
        "lib/nghttp2_pq.c",
        "lib/nghttp2_hd.c",
        "lib/nghttp2_pq.h",
        "lib/nghttp2_rcbuf.h",
        "lib/nghttp2_npn.c",
        "lib/nghttp2_helper.c",
        "lib/nghttp2_session.h",
        "lib/nghttp2_outbound_item.c",
        "lib/nghttp2_hd_huffman.h",
        "lib/nghttp2_priority_spec.h",
        "lib/nghttp2_http.c",
    ],
    hdrs = [
        "lib/includes/nghttp2/nghttp2.h",
        "lib/includes/nghttp2/nghttp2ver.h",
        "lib/includes/config.h",  # from :configure
    ],
    local_defines = [
        "BUILDING_NGHTTP2",
        "HAVE_CONFIG_H",
    ],
    defines = [
        "NGHTTP2_STATICLIB",
    ],
    copts = [
        "-I" + package_relative_path("lib"),
        "-I" + package_relative_path("lib/includes"),
    ] + select({
        ":windows": [],
        "//conditions:default": [
            "-Wno-string-plus-int",
        ],
    }),
    strip_include_prefix = "lib/includes",
    visibility = ["//visibility:public"],
)


# Generated based on running configure on several platforms.
# May need to be updated in future versions.
genrule(
    name = "configure",
    outs = ["lib/includes/config.h"],
    cmd = "\n".join([
        "cat <<'EOF' >$@",
        "#ifndef EXTERNAL_NGHTTP2_CONFIG_H_",
        "#define EXTERNAL_NGHTTP2_CONFIG_H_",
        "",
        "#if !defined(_WIN32) && !defined(__APPLE__)",
        "#  include <stdint.h>",
        "#endif",
        "",
        "#define HAVE_STD_MAP_EMPLACE 1",
        "#define HAVE__EXIT 1",
        "#define HAVE_INTTYPES_H 1",
        "#define HAVE_LIMITS_H 1",
        "#define HAVE_FCNTL_H 1",
        "#define HAVE_TIME_H 1",
        "#define NGHTTP2_NORETURN __attribute__((noreturn))",
        "",
        "#if defined(_WIN32)",
        "#  include <stddef.h>",
        "#  define ssize_t ptrdiff_t",
        "#  define HAVE_DECL_INITGROUPS 0",
        "",
        "#elif defined(__APPLE__)",
        "#  define HAVE_ARPA_INET_H 1",
        "#  define HAVE_SOCKADDR_IN6_SIN6_LEN 1",
        "#  define HAVE_SOCKADDR_IN_SIN_LEN 1",
        "#  define SIZEOF_TIME_T 8",
        "#  define STDC_HEADERS 1",
        "",
        "#else",
        "#  define HAVE_ACCEPT4 1",
        "#  define HAVE_ARPA_INET_H 1",
        "#endif",
        "",  # common linux, apple
        "#if !defined(_WIN32)",
        "#define HAVE_ATOMIC_STD_SHARED_PTR 1",
        "#define HAVE_CHOWN 1",
        "#define HAVE_CXX14 1",
        "#define HAVE_DECL_INITGROUPS 1",
        "#define HAVE_DECL_STRERROR_R 1",
        "#define HAVE_DLFCN_H 1",
        "#define HAVE_DUP2 1",
        "#define HAVE_FORK 1",
        "#define HAVE_GETCWD 1",
        "#define HAVE_GETPWNAM 1",
        "#define HAVE_LOCALTIME_R 1",
        "#define HAVE_MEMCHR 1",
        "#define HAVE_MEMMOVE 1",
        "#define HAVE_MEMORY_H 1",
        "#define HAVE_MEMSET 1",
        "#define HAVE_MKOSTEMP 1",
        "#define HAVE_NETDB_H 1",
        "#define HAVE_NETINET_IN_H 1",
        "#define HAVE_PTRDIFF_T 1",
        "#define HAVE_PWD_H 1",
        "#define HAVE_SOCKET 1",
        "#define HAVE_SQRT 1",
        "#define HAVE_STD_FUTURE 1",
        "#define HAVE_STDDEF_H 1",
        "#define HAVE_STDINT_H 1",
        "#define HAVE_STDLIB_H 1",
        "#define HAVE_STRCHR 1",
        "#define HAVE_STRDUP 1",
        "#define HAVE_STRERROR 1",
        "#define HAVE_STRERROR_R 1",
        "#define HAVE_STRING_H 1",
        "#define HAVE_STRINGS_H 1",
        "#define HAVE_STRNDUP 1",
        "#define HAVE_STRSTR 1",
        "#define HAVE_STRTOL 1",
        "#define HAVE_STRTOUL 1",
        "#define HAVE_STRUCT_TM_TM_GMTOFF 1",
        "#define HAVE_SYS_SOCKET_H 1",
        "#define HAVE_SYS_STAT_H 1",
        "#define HAVE_SYS_TIME_H 1",
        "#define HAVE_SYS_TYPES_H 1",
        "#define HAVE_SYSLOG_H 1",
        "#define HAVE_THREAD_LOCAL 1",
        "#define HAVE_TIMEGM 1",
        "#define HAVE_UNISTD_H 1",
        "#define HAVE_VFORK 1",
        "#define HAVE_WORKING_FORK 1",
        "#define HAVE_WORKING_VFORK 1",
        "#endif",
        "",
        "#if !defined(_WIN32)",
        "#ifndef _ALL_SOURCE",
        "# define _ALL_SOURCE 1",
        "#endif",
        "#ifndef _GNU_SOURCE",
        "# define _GNU_SOURCE 1",
        "#endif",
        "#ifndef _POSIX_PTHREAD_SEMANTICS",
        "# define _POSIX_PTHREAD_SEMANTICS 1",
        "#endif",
        "#ifndef _TANDEM_SOURCE",
        "# define _TANDEM_SOURCE 1",
        "#endif",
        "#ifndef __EXTENSIONS__",
        "# define __EXTENSIONS__ 1",
        "#endif",
        "#endif",
        "",
        "#if defined(__APPLE__)",
        "#if defined AC_APPLE_UNIVERSAL_BUILD",
        "#if defined __BIG_ENDIAN__",
        "#define WORDS_BIGENDIAN 1",
        "#endif",
        "#endif",
        "#ifndef _DARWIN_USE_64_BIT_INODE",
        "#define _DARWIN_USE_64_BIT_INODE 1",
        "#endif",
        "#endif",
        "",
        "#if UINTPTR_MAX == UINT64_MAX",
        "#  define SIZEOF_INT_P 8",
        "#elif UINTPTR_MAX == UINT32_MAX",
        "#  define SIZEOF_INT_P 4",
        "#else",
        "#  error \"Unknown int pointer size\"",
        "#endif",
        "",
        "#define PACKAGE \"nghttp2\"",
        "#define PACKAGE_BUGREPORT \"t-tujikawa@users.sourceforge.net\"",
        "#define PACKAGE_NAME \"nghttp2\"",
        "#define PACKAGE_STRING \"nghttp2 1.41.0\"",
        "#define PACKAGE_TARNAME \"nghttp2\"",
        "#define PACKAGE_URL \"\"",
        "#define PACKAGE_VERSION \"1.41.0\"",
        "",
        "#endif  // EXTERNAL_NGHTTP2_CONFIG_H_",
        "EOF",
    ]),
)


config_setting(
    name = "windows",
    constraint_values = ["@platforms//os:windows"],
)
