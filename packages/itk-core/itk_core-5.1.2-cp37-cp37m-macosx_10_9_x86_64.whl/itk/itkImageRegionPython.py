# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageRegionPython
else:
    import _itkImageRegionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageRegionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageRegionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
class vectoritkImageRegion2(object):
    r"""Proxy of C++ std::vector< itkImageRegion2 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___bool__)
    __len__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2___setitem__)
    pop = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_pop)
    append = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_append)
    empty = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_empty)
    size = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_size)
    swap = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_swap)
    begin = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_begin)
    end = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_end)
    rbegin = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_rbegin)
    rend = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_rend)
    clear = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_clear)
    get_allocator = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_pop_back)
    erase = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageRegion2 self) -> vectoritkImageRegion2
        __init__(vectoritkImageRegion2 self, vectoritkImageRegion2 other) -> vectoritkImageRegion2
        __init__(vectoritkImageRegion2 self, std::vector< itkImageRegion2 >::size_type size) -> vectoritkImageRegion2
        __init__(vectoritkImageRegion2 self, std::vector< itkImageRegion2 >::size_type size, itkImageRegion2 value) -> vectoritkImageRegion2
        """
        _itkImageRegionPython.vectoritkImageRegion2_swiginit(self, _itkImageRegionPython.new_vectoritkImageRegion2(*args))
    push_back = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_push_back)
    front = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_front)
    back = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_back)
    assign = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_assign)
    resize = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_resize)
    insert = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_insert)
    reserve = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_reserve)
    capacity = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion2_capacity)
    __swig_destroy__ = _itkImageRegionPython.delete_vectoritkImageRegion2

# Register vectoritkImageRegion2 in _itkImageRegionPython:
_itkImageRegionPython.vectoritkImageRegion2_swigregister(vectoritkImageRegion2)

class vectoritkImageRegion3(object):
    r"""Proxy of C++ std::vector< itkImageRegion3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___bool__)
    __len__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3___setitem__)
    pop = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_pop)
    append = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_append)
    empty = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_empty)
    size = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_size)
    swap = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_swap)
    begin = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_begin)
    end = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_end)
    rbegin = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_rbegin)
    rend = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_rend)
    clear = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_clear)
    get_allocator = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_pop_back)
    erase = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkImageRegion3 self) -> vectoritkImageRegion3
        __init__(vectoritkImageRegion3 self, vectoritkImageRegion3 other) -> vectoritkImageRegion3
        __init__(vectoritkImageRegion3 self, std::vector< itkImageRegion3 >::size_type size) -> vectoritkImageRegion3
        __init__(vectoritkImageRegion3 self, std::vector< itkImageRegion3 >::size_type size, itkImageRegion3 value) -> vectoritkImageRegion3
        """
        _itkImageRegionPython.vectoritkImageRegion3_swiginit(self, _itkImageRegionPython.new_vectoritkImageRegion3(*args))
    push_back = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_push_back)
    front = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_front)
    back = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_back)
    assign = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_assign)
    resize = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_resize)
    insert = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_insert)
    reserve = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_reserve)
    capacity = _swig_new_instance_method(_itkImageRegionPython.vectoritkImageRegion3_capacity)
    __swig_destroy__ = _itkImageRegionPython.delete_vectoritkImageRegion3

# Register vectoritkImageRegion3 in _itkImageRegionPython:
_itkImageRegionPython.vectoritkImageRegion3_swigregister(vectoritkImageRegion3)

class itkImageRegion2(itk.ITKCommonBasePython.itkRegion):
    r"""


    An image region represents a structured region of data.

    ImageRegion is an class that represents some structured portion or
    piece of an Image. The ImageRegion is represented with an index and a
    size in each of the n-dimensions of the image. (The index is the
    corner of the image, the size is the lengths of the image in each of
    the topological directions.)

    See:   Region

    See:   Index

    See:   Size

    See:   MeshRegion     example{Core/Common/CreateAnImageRegion,An
    object which holds the index (start) and size of a region of an image}
    example{Core/Common/ImageRegionIntersection,Determine image region
    intersection}  example{Core/Common/IsPixelInsideRegion,Determine if a
    pixel is inside of a region}
    example{Core/Common/RegionOverlap,Determine the overlap of two
    regions} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetImageDimension = _swig_new_static_method(_itkImageRegionPython.itkImageRegion2_GetImageDimension)
    __swig_destroy__ = _itkImageRegionPython.delete_itkImageRegion2

    def __init__(self, *args):
        r"""
        __init__(itkImageRegion2 self) -> itkImageRegion2
        __init__(itkImageRegion2 self, itkImageRegion2 arg0) -> itkImageRegion2
        __init__(itkImageRegion2 self, itkIndex2 index, itkSize2 size) -> itkImageRegion2
        __init__(itkImageRegion2 self, itkSize2 size) -> itkImageRegion2


        An image region represents a structured region of data.

        ImageRegion is an class that represents some structured portion or
        piece of an Image. The ImageRegion is represented with an index and a
        size in each of the n-dimensions of the image. (The index is the
        corner of the image, the size is the lengths of the image in each of
        the topological directions.)

        See:   Region

        See:   Index

        See:   Size

        See:   MeshRegion     example{Core/Common/CreateAnImageRegion,An
        object which holds the index (start) and size of a region of an image}
        example{Core/Common/ImageRegionIntersection,Determine image region
        intersection}  example{Core/Common/IsPixelInsideRegion,Determine if a
        pixel is inside of a region}
        example{Core/Common/RegionOverlap,Determine the overlap of two
        regions} 
        """
        _itkImageRegionPython.itkImageRegion2_swiginit(self, _itkImageRegionPython.new_itkImageRegion2(*args))
    __GetModifiableIndex_orig__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2___GetModifiableIndex_orig__)
    __GetModifiableSize_orig__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2___GetModifiableSize_orig__)
    SetSize = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_SetSize)
    __GetSize_orig__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2___GetSize_orig__)
    SetIndex = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_SetIndex)
    __GetIndex_orig__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2___GetIndex_orig__)
    GetUpperIndex = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_GetUpperIndex)
    SetUpperIndex = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_SetUpperIndex)
    ComputeOffsetTable = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_ComputeOffsetTable)
    __eq__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2___eq__)
    __ne__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2___ne__)
    IsInside = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_IsInside)
    GetNumberOfPixels = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_GetNumberOfPixels)
    PadByRadius = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_PadByRadius)
    ShrinkByRadius = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_ShrinkByRadius)
    Crop = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_Crop)
    Slice = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2_Slice)

    def GetIndex(self):
        var = self.__GetIndex_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetModifiableIndex(self):
        var = self.__GetModifiableIndex_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetSize(self):
        var = self.__GetSize_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetModifiableSize(self):
        var = self.__GetModifiableSize_orig__()
        var_copy = type(var)(var)
        return var_copy

    __repr__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion2___repr__)

# Register itkImageRegion2 in _itkImageRegionPython:
_itkImageRegionPython.itkImageRegion2_swigregister(itkImageRegion2)
itkImageRegion2_GetImageDimension = _itkImageRegionPython.itkImageRegion2_GetImageDimension

class itkImageRegion3(itk.ITKCommonBasePython.itkRegion):
    r"""


    An image region represents a structured region of data.

    ImageRegion is an class that represents some structured portion or
    piece of an Image. The ImageRegion is represented with an index and a
    size in each of the n-dimensions of the image. (The index is the
    corner of the image, the size is the lengths of the image in each of
    the topological directions.)

    See:   Region

    See:   Index

    See:   Size

    See:   MeshRegion     example{Core/Common/CreateAnImageRegion,An
    object which holds the index (start) and size of a region of an image}
    example{Core/Common/ImageRegionIntersection,Determine image region
    intersection}  example{Core/Common/IsPixelInsideRegion,Determine if a
    pixel is inside of a region}
    example{Core/Common/RegionOverlap,Determine the overlap of two
    regions} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    GetImageDimension = _swig_new_static_method(_itkImageRegionPython.itkImageRegion3_GetImageDimension)
    __swig_destroy__ = _itkImageRegionPython.delete_itkImageRegion3

    def __init__(self, *args):
        r"""
        __init__(itkImageRegion3 self) -> itkImageRegion3
        __init__(itkImageRegion3 self, itkImageRegion3 arg0) -> itkImageRegion3
        __init__(itkImageRegion3 self, itkIndex3 index, itkSize3 size) -> itkImageRegion3
        __init__(itkImageRegion3 self, itkSize3 size) -> itkImageRegion3


        An image region represents a structured region of data.

        ImageRegion is an class that represents some structured portion or
        piece of an Image. The ImageRegion is represented with an index and a
        size in each of the n-dimensions of the image. (The index is the
        corner of the image, the size is the lengths of the image in each of
        the topological directions.)

        See:   Region

        See:   Index

        See:   Size

        See:   MeshRegion     example{Core/Common/CreateAnImageRegion,An
        object which holds the index (start) and size of a region of an image}
        example{Core/Common/ImageRegionIntersection,Determine image region
        intersection}  example{Core/Common/IsPixelInsideRegion,Determine if a
        pixel is inside of a region}
        example{Core/Common/RegionOverlap,Determine the overlap of two
        regions} 
        """
        _itkImageRegionPython.itkImageRegion3_swiginit(self, _itkImageRegionPython.new_itkImageRegion3(*args))
    __GetModifiableIndex_orig__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3___GetModifiableIndex_orig__)
    __GetModifiableSize_orig__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3___GetModifiableSize_orig__)
    SetSize = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_SetSize)
    __GetSize_orig__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3___GetSize_orig__)
    SetIndex = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_SetIndex)
    __GetIndex_orig__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3___GetIndex_orig__)
    GetUpperIndex = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_GetUpperIndex)
    SetUpperIndex = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_SetUpperIndex)
    ComputeOffsetTable = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_ComputeOffsetTable)
    __eq__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3___eq__)
    __ne__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3___ne__)
    IsInside = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_IsInside)
    GetNumberOfPixels = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_GetNumberOfPixels)
    PadByRadius = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_PadByRadius)
    ShrinkByRadius = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_ShrinkByRadius)
    Crop = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_Crop)
    Slice = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3_Slice)

    def GetIndex(self):
        var = self.__GetIndex_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetModifiableIndex(self):
        var = self.__GetModifiableIndex_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetSize(self):
        var = self.__GetSize_orig__()
        var_copy = type(var)(var)
        return var_copy


    def GetModifiableSize(self):
        var = self.__GetModifiableSize_orig__()
        var_copy = type(var)(var)
        return var_copy

    __repr__ = _swig_new_instance_method(_itkImageRegionPython.itkImageRegion3___repr__)

# Register itkImageRegion3 in _itkImageRegionPython:
_itkImageRegionPython.itkImageRegion3_swigregister(itkImageRegion3)
itkImageRegion3_GetImageDimension = _itkImageRegionPython.itkImageRegion3_GetImageDimension



