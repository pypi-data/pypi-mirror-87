# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNormalizeToConstantImageFilterPython
else:
    import _itkNormalizeToConstantImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNormalizeToConstantImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNormalizeToConstantImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkNormalizeToConstantImageFilterID2ID2_New():
    return itkNormalizeToConstantImageFilterID2ID2.New()

class itkNormalizeToConstantImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterID2ID2
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterID2ID2

        Create a new object of the class itkNormalizeToConstantImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterID2ID2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_swigregister(itkNormalizeToConstantImageFilterID2ID2)
itkNormalizeToConstantImageFilterID2ID2___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2___New_orig__
itkNormalizeToConstantImageFilterID2ID2_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID2ID2_cast


def itkNormalizeToConstantImageFilterID3ID3_New():
    return itkNormalizeToConstantImageFilterID3ID3.New()

class itkNormalizeToConstantImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterID3ID3
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterID3ID3

        Create a new object of the class itkNormalizeToConstantImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterID3ID3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_swigregister(itkNormalizeToConstantImageFilterID3ID3)
itkNormalizeToConstantImageFilterID3ID3___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3___New_orig__
itkNormalizeToConstantImageFilterID3ID3_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterID3ID3_cast


def itkNormalizeToConstantImageFilterIF2IF2_New():
    return itkNormalizeToConstantImageFilterIF2IF2.New()

class itkNormalizeToConstantImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIF2IF2
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIF2IF2

        Create a new object of the class itkNormalizeToConstantImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIF2IF2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_swigregister(itkNormalizeToConstantImageFilterIF2IF2)
itkNormalizeToConstantImageFilterIF2IF2___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2___New_orig__
itkNormalizeToConstantImageFilterIF2IF2_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF2IF2_cast


def itkNormalizeToConstantImageFilterIF3IF3_New():
    return itkNormalizeToConstantImageFilterIF3IF3.New()

class itkNormalizeToConstantImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIF3IF3
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIF3IF3

        Create a new object of the class itkNormalizeToConstantImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIF3IF3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_swigregister(itkNormalizeToConstantImageFilterIF3IF3)
itkNormalizeToConstantImageFilterIF3IF3___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3___New_orig__
itkNormalizeToConstantImageFilterIF3IF3_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIF3IF3_cast


def itkNormalizeToConstantImageFilterISS2ISS2_New():
    return itkNormalizeToConstantImageFilterISS2ISS2.New()

class itkNormalizeToConstantImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterISS2ISS2

        Create a new object of the class itkNormalizeToConstantImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterISS2ISS2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_swigregister(itkNormalizeToConstantImageFilterISS2ISS2)
itkNormalizeToConstantImageFilterISS2ISS2___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2___New_orig__
itkNormalizeToConstantImageFilterISS2ISS2_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS2ISS2_cast


def itkNormalizeToConstantImageFilterISS3ISS3_New():
    return itkNormalizeToConstantImageFilterISS3ISS3.New()

class itkNormalizeToConstantImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterISS3ISS3

        Create a new object of the class itkNormalizeToConstantImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterISS3ISS3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_swigregister(itkNormalizeToConstantImageFilterISS3ISS3)
itkNormalizeToConstantImageFilterISS3ISS3___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3___New_orig__
itkNormalizeToConstantImageFilterISS3ISS3_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterISS3ISS3_cast


def itkNormalizeToConstantImageFilterIUC2IUC2_New():
    return itkNormalizeToConstantImageFilterIUC2IUC2.New()

class itkNormalizeToConstantImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUC2IUC2

        Create a new object of the class itkNormalizeToConstantImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUC2IUC2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_swigregister(itkNormalizeToConstantImageFilterIUC2IUC2)
itkNormalizeToConstantImageFilterIUC2IUC2___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2___New_orig__
itkNormalizeToConstantImageFilterIUC2IUC2_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC2IUC2_cast


def itkNormalizeToConstantImageFilterIUC3IUC3_New():
    return itkNormalizeToConstantImageFilterIUC3IUC3.New()

class itkNormalizeToConstantImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUC3IUC3

        Create a new object of the class itkNormalizeToConstantImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUC3IUC3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_swigregister(itkNormalizeToConstantImageFilterIUC3IUC3)
itkNormalizeToConstantImageFilterIUC3IUC3___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3___New_orig__
itkNormalizeToConstantImageFilterIUC3IUC3_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUC3IUC3_cast


def itkNormalizeToConstantImageFilterIUS2IUS2_New():
    return itkNormalizeToConstantImageFilterIUS2IUS2.New()

class itkNormalizeToConstantImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUS2IUS2

        Create a new object of the class itkNormalizeToConstantImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUS2IUS2 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_swigregister(itkNormalizeToConstantImageFilterIUS2IUS2)
itkNormalizeToConstantImageFilterIUS2IUS2___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2___New_orig__
itkNormalizeToConstantImageFilterIUS2IUS2_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS2IUS2_cast


def itkNormalizeToConstantImageFilterIUS3IUS3_New():
    return itkNormalizeToConstantImageFilterIUS3IUS3.New()

class itkNormalizeToConstantImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Scales image pixel intensities to make the sum of all pixels equal a
    user-defined constant.

    The default value of the constant is 1. It can be changed with
    SetConstant().

    This transform is especially useful for normalizing a convolution
    kernel.

    This code was contributed in the Insight Journal paper: "FFT based
    convolution" by Lehmann G.https://hdl.handle.net/10380/3154

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:   NormalizeImageFilter

    See:  StatisticsImageFilter

    See:   DivideImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_Clone)
    SetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_SetConstant)
    GetConstant = _swig_new_instance_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_GetConstant)
    InputHasPixelTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_InputHasPixelTraitsCheck
    
    InputHasNumericTraitsCheck = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNormalizeToConstantImageFilterPython.delete_itkNormalizeToConstantImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizeToConstantImageFilterIUS3IUS3

        Create a new object of the class itkNormalizeToConstantImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizeToConstantImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizeToConstantImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizeToConstantImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizeToConstantImageFilterIUS3IUS3 in _itkNormalizeToConstantImageFilterPython:
_itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_swigregister(itkNormalizeToConstantImageFilterIUS3IUS3)
itkNormalizeToConstantImageFilterIUS3IUS3___New_orig__ = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3___New_orig__
itkNormalizeToConstantImageFilterIUS3IUS3_cast = _itkNormalizeToConstantImageFilterPython.itkNormalizeToConstantImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def normalize_to_constant_image_filter(*args, **kwargs):
    """Procedural interface for NormalizeToConstantImageFilter"""
    import itk
    instance = itk.NormalizeToConstantImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def normalize_to_constant_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NormalizeToConstantImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NormalizeToConstantImageFilter.values()[0]
    else:
        filter_object = itk.NormalizeToConstantImageFilter

    normalize_to_constant_image_filter.__doc__ = filter_object.__doc__
    normalize_to_constant_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    normalize_to_constant_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NormalizeToConstantImageFilter, itkTemplate.itkTemplate):
        normalize_to_constant_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        normalize_to_constant_image_filter.__doc__ += "\n"
        normalize_to_constant_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        normalize_to_constant_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



