# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDistanceMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDirectedHausdorffDistanceImageFilterPython
else:
    import _itkDirectedHausdorffDistanceImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDirectedHausdorffDistanceImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDirectedHausdorffDistanceImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkDirectedHausdorffDistanceImageFilterID2ID2_New():
    return itkDirectedHausdorffDistanceImageFilterID2ID2.New()

class itkDirectedHausdorffDistanceImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterID2ID2
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterID2ID2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterID2ID2 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_swigregister(itkDirectedHausdorffDistanceImageFilterID2ID2)
itkDirectedHausdorffDistanceImageFilterID2ID2___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2___New_orig__
itkDirectedHausdorffDistanceImageFilterID2ID2_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID2ID2_cast


def itkDirectedHausdorffDistanceImageFilterID3ID3_New():
    return itkDirectedHausdorffDistanceImageFilterID3ID3.New()

class itkDirectedHausdorffDistanceImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterID3ID3
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterID3ID3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterID3ID3 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_swigregister(itkDirectedHausdorffDistanceImageFilterID3ID3)
itkDirectedHausdorffDistanceImageFilterID3ID3___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3___New_orig__
itkDirectedHausdorffDistanceImageFilterID3ID3_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterID3ID3_cast


def itkDirectedHausdorffDistanceImageFilterIF2IF2_New():
    return itkDirectedHausdorffDistanceImageFilterIF2IF2.New()

class itkDirectedHausdorffDistanceImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIF2IF2
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIF2IF2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIF2IF2 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_swigregister(itkDirectedHausdorffDistanceImageFilterIF2IF2)
itkDirectedHausdorffDistanceImageFilterIF2IF2___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2___New_orig__
itkDirectedHausdorffDistanceImageFilterIF2IF2_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF2IF2_cast


def itkDirectedHausdorffDistanceImageFilterIF3IF3_New():
    return itkDirectedHausdorffDistanceImageFilterIF3IF3.New()

class itkDirectedHausdorffDistanceImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIF3IF3
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIF3IF3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIF3IF3 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_swigregister(itkDirectedHausdorffDistanceImageFilterIF3IF3)
itkDirectedHausdorffDistanceImageFilterIF3IF3___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3___New_orig__
itkDirectedHausdorffDistanceImageFilterIF3IF3_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIF3IF3_cast


def itkDirectedHausdorffDistanceImageFilterISS2ISS2_New():
    return itkDirectedHausdorffDistanceImageFilterISS2ISS2.New()

class itkDirectedHausdorffDistanceImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterISS2ISS2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterISS2ISS2 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_swigregister(itkDirectedHausdorffDistanceImageFilterISS2ISS2)
itkDirectedHausdorffDistanceImageFilterISS2ISS2___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2___New_orig__
itkDirectedHausdorffDistanceImageFilterISS2ISS2_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS2ISS2_cast


def itkDirectedHausdorffDistanceImageFilterISS3ISS3_New():
    return itkDirectedHausdorffDistanceImageFilterISS3ISS3.New()

class itkDirectedHausdorffDistanceImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterISS3ISS3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterISS3ISS3 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_swigregister(itkDirectedHausdorffDistanceImageFilterISS3ISS3)
itkDirectedHausdorffDistanceImageFilterISS3ISS3___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3___New_orig__
itkDirectedHausdorffDistanceImageFilterISS3ISS3_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterISS3ISS3_cast


def itkDirectedHausdorffDistanceImageFilterIUC2ID2_New():
    return itkDirectedHausdorffDistanceImageFilterIUC2ID2.New()

class itkDirectedHausdorffDistanceImageFilterIUC2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUC2ID2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIUC2ID2 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_swigregister(itkDirectedHausdorffDistanceImageFilterIUC2ID2)
itkDirectedHausdorffDistanceImageFilterIUC2ID2___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2___New_orig__
itkDirectedHausdorffDistanceImageFilterIUC2ID2_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2ID2_cast


def itkDirectedHausdorffDistanceImageFilterIUC2IF2_New():
    return itkDirectedHausdorffDistanceImageFilterIUC2IF2.New()

class itkDirectedHausdorffDistanceImageFilterIUC2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUC2IF2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIUC2IF2 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_swigregister(itkDirectedHausdorffDistanceImageFilterIUC2IF2)
itkDirectedHausdorffDistanceImageFilterIUC2IF2___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2___New_orig__
itkDirectedHausdorffDistanceImageFilterIUC2IF2_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC2IF2_cast


def itkDirectedHausdorffDistanceImageFilterIUC3ID3_New():
    return itkDirectedHausdorffDistanceImageFilterIUC3ID3.New()

class itkDirectedHausdorffDistanceImageFilterIUC3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUC3ID3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIUC3ID3 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_swigregister(itkDirectedHausdorffDistanceImageFilterIUC3ID3)
itkDirectedHausdorffDistanceImageFilterIUC3ID3___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3___New_orig__
itkDirectedHausdorffDistanceImageFilterIUC3ID3_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3ID3_cast


def itkDirectedHausdorffDistanceImageFilterIUC3IF3_New():
    return itkDirectedHausdorffDistanceImageFilterIUC3IF3.New()

class itkDirectedHausdorffDistanceImageFilterIUC3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUC3IF3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIUC3IF3 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_swigregister(itkDirectedHausdorffDistanceImageFilterIUC3IF3)
itkDirectedHausdorffDistanceImageFilterIUC3IF3___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3___New_orig__
itkDirectedHausdorffDistanceImageFilterIUC3IF3_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUC3IF3_cast


def itkDirectedHausdorffDistanceImageFilterIUS2ID2_New():
    return itkDirectedHausdorffDistanceImageFilterIUS2ID2.New()

class itkDirectedHausdorffDistanceImageFilterIUS2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUS2ID2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIUS2ID2 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_swigregister(itkDirectedHausdorffDistanceImageFilterIUS2ID2)
itkDirectedHausdorffDistanceImageFilterIUS2ID2___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2___New_orig__
itkDirectedHausdorffDistanceImageFilterIUS2ID2_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2ID2_cast


def itkDirectedHausdorffDistanceImageFilterIUS2IF2_New():
    return itkDirectedHausdorffDistanceImageFilterIUS2IF2.New()

class itkDirectedHausdorffDistanceImageFilterIUS2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUS2IF2

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIUS2IF2 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_swigregister(itkDirectedHausdorffDistanceImageFilterIUS2IF2)
itkDirectedHausdorffDistanceImageFilterIUS2IF2___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2___New_orig__
itkDirectedHausdorffDistanceImageFilterIUS2IF2_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS2IF2_cast


def itkDirectedHausdorffDistanceImageFilterIUS3ID3_New():
    return itkDirectedHausdorffDistanceImageFilterIUS3ID3.New()

class itkDirectedHausdorffDistanceImageFilterIUS3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUS3ID3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIUS3ID3 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_swigregister(itkDirectedHausdorffDistanceImageFilterIUS3ID3)
itkDirectedHausdorffDistanceImageFilterIUS3ID3___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3___New_orig__
itkDirectedHausdorffDistanceImageFilterIUS3ID3_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3ID3_cast


def itkDirectedHausdorffDistanceImageFilterIUS3IF3_New():
    return itkDirectedHausdorffDistanceImageFilterIUS3IF3.New()

class itkDirectedHausdorffDistanceImageFilterIUS3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Computes the directed Hausdorff distance between the set of non-zero
    pixels of two images.

    DirectedHausdorffDistanceImageFilter computes the distance between the
    set non-zero pixels of two images using the following formula: \\[
    h(A,B) = \\max_{a \\in A} \\min_{b \\in B} \\| a - b\\|
    \\] where $A$ and $B$ are respectively the set of non-zero pixels in
    the first and second input images. It identifies the point $ a \\in
    A $ that is farthest from any point of $B$ and measures the distance
    from $a$ to the nearest neighbor in $B$. Note that this function is
    not symmetric and hence is not a true distance.

    In particular, this filter uses the SignedMaurerDistanceMapImageFilter
    inside to compute distance map from all non-zero pixels in the second
    image. It then finds the largest distance (in pixels) within the set
    of all non-zero pixels in the first image. The largest distance is
    returned by the method GetDirectedHausdorffDistance().

    In addition, this filter computes the average Hausdorff distance. This
    average is defined as the average of all minimum distances with any
    negative distances set to 0 since they indicate overlapping regions.
    By definition, the distance map computes the minimum distances.
    However, since this filter is computed using a signed distance
    transform, the negative distance values are first set to 0 before
    calculating the average. The average distance is returned by the
    method GetAverageHausdorffDistance().

    Use HausdorffDistanceImageFilter to compute the full Hausdorff
    distance.

    This filter requires the largest possible region of the first image
    and the same corresponding region in the second image. It behaves as
    filter with two input and one output. Thus it can be inserted in a
    pipeline with other filters. The filter passes the first input through
    unmodified.

    This filter is templated over the two input image type. It assume both
    image have the same number of dimensions.

    See:  MaurerDistanceMapImageFilter

    See:   HausdorffDistanceImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetInput2)
    GetInput1 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetInput1)
    GetInput2 = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetInput2)
    SetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetUseImageSpacing)
    GetDirectedHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetDirectedHausdorffDistance)
    GetAverageHausdorffDistance = _swig_new_instance_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_GetAverageHausdorffDistance)
    InputHasNumericTraitsCheck = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDirectedHausdorffDistanceImageFilterPython.delete_itkDirectedHausdorffDistanceImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDirectedHausdorffDistanceImageFilterIUS3IF3

        Create a new object of the class itkDirectedHausdorffDistanceImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDirectedHausdorffDistanceImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDirectedHausdorffDistanceImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDirectedHausdorffDistanceImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDirectedHausdorffDistanceImageFilterIUS3IF3 in _itkDirectedHausdorffDistanceImageFilterPython:
_itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_swigregister(itkDirectedHausdorffDistanceImageFilterIUS3IF3)
itkDirectedHausdorffDistanceImageFilterIUS3IF3___New_orig__ = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3___New_orig__
itkDirectedHausdorffDistanceImageFilterIUS3IF3_cast = _itkDirectedHausdorffDistanceImageFilterPython.itkDirectedHausdorffDistanceImageFilterIUS3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def directed_hausdorff_distance_image_filter(*args, **kwargs):
    """Procedural interface for DirectedHausdorffDistanceImageFilter"""
    import itk
    instance = itk.DirectedHausdorffDistanceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def directed_hausdorff_distance_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DirectedHausdorffDistanceImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DirectedHausdorffDistanceImageFilter.values()[0]
    else:
        filter_object = itk.DirectedHausdorffDistanceImageFilter

    directed_hausdorff_distance_image_filter.__doc__ = filter_object.__doc__
    directed_hausdorff_distance_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    directed_hausdorff_distance_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DirectedHausdorffDistanceImageFilter, itkTemplate.itkTemplate):
        directed_hausdorff_distance_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        directed_hausdorff_distance_image_filter.__doc__ += "\n"
        directed_hausdorff_distance_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        directed_hausdorff_distance_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



