# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScalarImageToCooccurrenceMatrixFilterPython
else:
    import _itkScalarImageToCooccurrenceMatrixFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkScalarImageToCooccurrenceMatrixFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkScalarImageToCooccurrenceMatrixFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkArrayPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython

def itkScalarImageToCooccurrenceMatrixFilterID2_New():
    return itkScalarImageToCooccurrenceMatrixFilterID2.New()

class itkScalarImageToCooccurrenceMatrixFilterID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterID2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterID2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterID2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_swigregister(itkScalarImageToCooccurrenceMatrixFilterID2)
itkScalarImageToCooccurrenceMatrixFilterID2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterID2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID2_cast


def itkScalarImageToCooccurrenceMatrixFilterID3_New():
    return itkScalarImageToCooccurrenceMatrixFilterID3.New()

class itkScalarImageToCooccurrenceMatrixFilterID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterID3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterID3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterID3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_swigregister(itkScalarImageToCooccurrenceMatrixFilterID3)
itkScalarImageToCooccurrenceMatrixFilterID3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterID3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterID3_cast


def itkScalarImageToCooccurrenceMatrixFilterIF2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIF2.New()

class itkScalarImageToCooccurrenceMatrixFilterIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIF2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF2)
itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIF2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF2_cast


def itkScalarImageToCooccurrenceMatrixFilterIF3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIF3.New()

class itkScalarImageToCooccurrenceMatrixFilterIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIF3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIF3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIF3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIF3)
itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIF3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIF3_cast


def itkScalarImageToCooccurrenceMatrixFilterISS2_New():
    return itkScalarImageToCooccurrenceMatrixFilterISS2.New()

class itkScalarImageToCooccurrenceMatrixFilterISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterISS2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS2)
itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterISS2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS2_cast


def itkScalarImageToCooccurrenceMatrixFilterISS3_New():
    return itkScalarImageToCooccurrenceMatrixFilterISS3.New()

class itkScalarImageToCooccurrenceMatrixFilterISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterISS3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterISS3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterISS3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_swigregister(itkScalarImageToCooccurrenceMatrixFilterISS3)
itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterISS3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterISS3_cast


def itkScalarImageToCooccurrenceMatrixFilterIUC2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUC2.New()

class itkScalarImageToCooccurrenceMatrixFilterIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUC2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC2)
itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUC2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC2_cast


def itkScalarImageToCooccurrenceMatrixFilterIUC3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUC3.New()

class itkScalarImageToCooccurrenceMatrixFilterIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUC3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUC3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUC3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUC3)
itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUC3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUC3_cast


def itkScalarImageToCooccurrenceMatrixFilterIUS2_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUS2.New()

class itkScalarImageToCooccurrenceMatrixFilterIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS2
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS2

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUS2 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS2)
itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUS2_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS2_cast


def itkScalarImageToCooccurrenceMatrixFilterIUS3_New():
    return itkScalarImageToCooccurrenceMatrixFilterIUS3.New()

class itkScalarImageToCooccurrenceMatrixFilterIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a co-occurrence matrix (histogram) from a given
    image and a mask image if provided. Coocurrence matrices are used for
    image texture description.

    This filters creates a grey-level co-occurrence matrix from a N-D
    scalar image. This is the first step in texture description a la
    Haralick. (See Haralick, R.M., K. Shanmugam and I. Dinstein. 1973.
    Textural Features for Image Classification. IEEE Transactions on
    Systems, Man and Cybernetics. SMC-3(6):610-620. See also Haralick,
    R.M. 1979. Statistical and Structural Approaches to Texture.
    Proceedings of the IEEE, 67:786-804.)

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), grey-level co-occurrences are pairs of intensity
    values for a specific pixel and the pixel at that offset from the
    specified pixel. These co-occurrences can provide information about
    the visual texture of an image region for example, an eight-bit image
    of alternating pixel-wide white and black vertical lines would have a
    large number of (0, 255) and (255, 0) co-occurrences for offset (1,
    0).

    The offset (or offsets) along which the co-occurrences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features, averages of features computed over
    several histograms with different offsets are generally used, instead
    of computing features from one histogram created with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the co-occurrence pairs
    in the given image's requested region, for a given set of offsets.
    That is, if a given offset falls outside of the requested region at a
    particular point, that co-occurrence pair will not be added to the
    matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    See:  MaskedScalarImageToCooccurrenceMatrixFilter

    See:   HistogramToTextureFeaturesFilter

    See:  ScalarImageTextureCalculator

    Zachary Pincus and Glenn Pierce 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetOffset)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMax)
    SetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_NormalizeOff)
    SetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToCooccurrenceMatrixFilterPython.delete_itkScalarImageToCooccurrenceMatrixFilterIUS3
    cast = _swig_new_static_method(_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToCooccurrenceMatrixFilterIUS3

        Create a new object of the class itkScalarImageToCooccurrenceMatrixFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToCooccurrenceMatrixFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToCooccurrenceMatrixFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToCooccurrenceMatrixFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToCooccurrenceMatrixFilterIUS3 in _itkScalarImageToCooccurrenceMatrixFilterPython:
_itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_swigregister(itkScalarImageToCooccurrenceMatrixFilterIUS3)
itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__ = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3___New_orig__
itkScalarImageToCooccurrenceMatrixFilterIUS3_cast = _itkScalarImageToCooccurrenceMatrixFilterPython.itkScalarImageToCooccurrenceMatrixFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def scalar_image_to_cooccurrence_matrix_filter(*args, **kwargs):
    """Procedural interface for ScalarImageToCooccurrenceMatrixFilter"""
    import itk
    instance = itk.ScalarImageToCooccurrenceMatrixFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def scalar_image_to_cooccurrence_matrix_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ScalarImageToCooccurrenceMatrixFilter, itkTemplate.itkTemplate):
        filter_object = itk.ScalarImageToCooccurrenceMatrixFilter.values()[0]
    else:
        filter_object = itk.ScalarImageToCooccurrenceMatrixFilter

    scalar_image_to_cooccurrence_matrix_filter.__doc__ = filter_object.__doc__
    scalar_image_to_cooccurrence_matrix_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    scalar_image_to_cooccurrence_matrix_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ScalarImageToCooccurrenceMatrixFilter, itkTemplate.itkTemplate):
        scalar_image_to_cooccurrence_matrix_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        scalar_image_to_cooccurrence_matrix_filter.__doc__ += "\n"
        scalar_image_to_cooccurrence_matrix_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        scalar_image_to_cooccurrence_matrix_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



