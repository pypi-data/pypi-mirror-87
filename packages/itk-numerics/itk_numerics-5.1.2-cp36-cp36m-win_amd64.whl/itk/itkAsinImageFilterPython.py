# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAsinImageFilterPython
else:
    import _itkAsinImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAsinImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAsinImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkUnaryGeneratorImageFilterPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkAsinImageFilterID2ID2_New():
    return itkAsinImageFilterID2ID2.New()

class itkAsinImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterID2ID2_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterID2ID2
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterID2ID2

        Create a new object of the class itkAsinImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterID2ID2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterID2ID2_swigregister(itkAsinImageFilterID2ID2)
itkAsinImageFilterID2ID2___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2___New_orig__
itkAsinImageFilterID2ID2_cast = _itkAsinImageFilterPython.itkAsinImageFilterID2ID2_cast


def itkAsinImageFilterID3ID3_New():
    return itkAsinImageFilterID3ID3.New()

class itkAsinImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterID3ID3_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterID3ID3
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterID3ID3

        Create a new object of the class itkAsinImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterID3ID3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterID3ID3_swigregister(itkAsinImageFilterID3ID3)
itkAsinImageFilterID3ID3___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3___New_orig__
itkAsinImageFilterID3ID3_cast = _itkAsinImageFilterPython.itkAsinImageFilterID3ID3_cast


def itkAsinImageFilterIF2IF2_New():
    return itkAsinImageFilterIF2IF2.New()

class itkAsinImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF2IF2
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF2IF2

        Create a new object of the class itkAsinImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIF2IF2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_swigregister(itkAsinImageFilterIF2IF2)
itkAsinImageFilterIF2IF2___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2___New_orig__
itkAsinImageFilterIF2IF2_cast = _itkAsinImageFilterPython.itkAsinImageFilterIF2IF2_cast


def itkAsinImageFilterIF3IF3_New():
    return itkAsinImageFilterIF3IF3.New()

class itkAsinImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIF3IF3
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIF3IF3

        Create a new object of the class itkAsinImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIF3IF3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_swigregister(itkAsinImageFilterIF3IF3)
itkAsinImageFilterIF3IF3___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3___New_orig__
itkAsinImageFilterIF3IF3_cast = _itkAsinImageFilterPython.itkAsinImageFilterIF3IF3_cast


def itkAsinImageFilterISS2ISS2_New():
    return itkAsinImageFilterISS2ISS2.New()

class itkAsinImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS2ISS2

        Create a new object of the class itkAsinImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterISS2ISS2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_swigregister(itkAsinImageFilterISS2ISS2)
itkAsinImageFilterISS2ISS2___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2___New_orig__
itkAsinImageFilterISS2ISS2_cast = _itkAsinImageFilterPython.itkAsinImageFilterISS2ISS2_cast


def itkAsinImageFilterISS3ISS3_New():
    return itkAsinImageFilterISS3ISS3.New()

class itkAsinImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterISS3ISS3

        Create a new object of the class itkAsinImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterISS3ISS3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_swigregister(itkAsinImageFilterISS3ISS3)
itkAsinImageFilterISS3ISS3___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3___New_orig__
itkAsinImageFilterISS3ISS3_cast = _itkAsinImageFilterPython.itkAsinImageFilterISS3ISS3_cast


def itkAsinImageFilterIUC2IUC2_New():
    return itkAsinImageFilterIUC2IUC2.New()

class itkAsinImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC2IUC2

        Create a new object of the class itkAsinImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUC2IUC2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_swigregister(itkAsinImageFilterIUC2IUC2)
itkAsinImageFilterIUC2IUC2___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2___New_orig__
itkAsinImageFilterIUC2IUC2_cast = _itkAsinImageFilterPython.itkAsinImageFilterIUC2IUC2_cast


def itkAsinImageFilterIUC3IUC3_New():
    return itkAsinImageFilterIUC3IUC3.New()

class itkAsinImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUC3IUC3

        Create a new object of the class itkAsinImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUC3IUC3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_swigregister(itkAsinImageFilterIUC3IUC3)
itkAsinImageFilterIUC3IUC3___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3___New_orig__
itkAsinImageFilterIUC3IUC3_cast = _itkAsinImageFilterPython.itkAsinImageFilterIUC3IUC3_cast


def itkAsinImageFilterIUS2IUS2_New():
    return itkAsinImageFilterIUS2IUS2.New()

class itkAsinImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS2IUS2

        Create a new object of the class itkAsinImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUS2IUS2 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_swigregister(itkAsinImageFilterIUS2IUS2)
itkAsinImageFilterIUS2IUS2___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2___New_orig__
itkAsinImageFilterIUS2IUS2_cast = _itkAsinImageFilterPython.itkAsinImageFilterIUS2IUS2_cast


def itkAsinImageFilterIUS3IUS3_New():
    return itkAsinImageFilterIUS3IUS3.New()

class itkAsinImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""


    Computes the sine of each pixel.

    This filter is templated over the pixel type of the input image and
    the pixel type of the output image.

    The filter walks over all the pixels in the input image, and for each
    pixel does the following:

    cast the pixel value to double,

    apply the std::asin() function to the double value,

    cast the double value resulting from std::asin() to the pixel type of
    the output image,

    store the casted value into the output image.  The filter expects both
    images to have the same dimension (e.g. both 2D, or both 3D, or both
    ND) 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_Clone)
    InputConvertibleToDoubleCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkAsinImageFilterPython.delete_itkAsinImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkAsinImageFilterIUS3IUS3

        Create a new object of the class itkAsinImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAsinImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAsinImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAsinImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAsinImageFilterIUS3IUS3 in _itkAsinImageFilterPython:
_itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_swigregister(itkAsinImageFilterIUS3IUS3)
itkAsinImageFilterIUS3IUS3___New_orig__ = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3___New_orig__
itkAsinImageFilterIUS3IUS3_cast = _itkAsinImageFilterPython.itkAsinImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def asin_image_filter(*args, **kwargs):
    """Procedural interface for AsinImageFilter"""
    import itk
    instance = itk.AsinImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def asin_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AsinImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AsinImageFilter.values()[0]
    else:
        filter_object = itk.AsinImageFilter

    asin_image_filter.__doc__ = filter_object.__doc__
    asin_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    asin_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.AsinImageFilter, itkTemplate.itkTemplate):
        asin_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        asin_image_filter.__doc__ += "\n"
        asin_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        asin_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



