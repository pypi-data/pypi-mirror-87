# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAnnulusOperatorPython
else:
    import _itkAnnulusOperatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAnnulusOperatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAnnulusOperatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkNeighborhoodOperatorPython
import itk.itkNeighborhoodPython
import itk.itkRGBPixelPython
import itk.ITKCommonBasePython
import itk.itkCovariantVectorPython
import itk.itkOffsetPython
import itk.itkSizePython
class itkAnnulusOperatorD2(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD2):
    r"""


    A NeighborhoodOperator for performing a matched filtering with an
    annulus (two concentric circles, spheres, hyperspheres, etc.)

    AnnulusOperator defines a non-directional NeighborhoodOperator
    representing two concentric circles, spheres, hyperspheres, etc. The
    inner radius and the thickness of the annulus can be specified.

    The values for the annulus can be specified in a variety of manners:

    1) The values for the interior of the annulus (interior of inner
    circle), the values for annulus (the region between the inner and
    outer circle), and the values for the exterior of the annulus can be
    specified. This mode is useful in correlation based matched filter
    applications. For instance, defining a hollow (or even filled) circle.

    2) The values can defined automatically for normalized correlation.
    The values in the kernel will be defined to have mean zero and norm 1.
    The area outside the annulus will have values of zero. In this mode,
    you can also specify whether you want the center of the annulus to be
    bright (intensity > 0) or dark (intensity < 0).

    1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
    intensities to use for interior, wall, and exterior kernel positions
    for correlation based operations or call NormalizeOn() to define
    kernel values automatically for use in normalized correlation. 3) If
    NormalizedOn(), indicate whether you want the center of the annulus to
    be bright or dark. 4) call  CreateOperator()

    AnnulusOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CreateOperator = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_CreateOperator)
    SetInnerRadius = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetInnerRadius)
    GetInnerRadius = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetInnerRadius)
    SetThickness = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetThickness)
    GetThickness = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetThickness)
    SetSpacing = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetSpacing)
    SetNormalize = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_NormalizeOff)
    SetBrightCenter = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetBrightCenter)
    GetBrightCenter = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetBrightCenter)
    BrightCenterOn = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_BrightCenterOn)
    BrightCenterOff = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_BrightCenterOff)
    SetInteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetInteriorValue)
    GetInteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetInteriorValue)
    SetAnnulusValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetAnnulusValue)
    GetAnnulusValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetAnnulusValue)
    SetExteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_SetExteriorValue)
    GetExteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD2_GetExteriorValue)
    __swig_destroy__ = _itkAnnulusOperatorPython.delete_itkAnnulusOperatorD2

    def __init__(self, *args):
        r"""
        __init__(itkAnnulusOperatorD2 self, itkAnnulusOperatorD2 arg0) -> itkAnnulusOperatorD2
        __init__(itkAnnulusOperatorD2 self) -> itkAnnulusOperatorD2


        A NeighborhoodOperator for performing a matched filtering with an
        annulus (two concentric circles, spheres, hyperspheres, etc.)

        AnnulusOperator defines a non-directional NeighborhoodOperator
        representing two concentric circles, spheres, hyperspheres, etc. The
        inner radius and the thickness of the annulus can be specified.

        The values for the annulus can be specified in a variety of manners:

        1) The values for the interior of the annulus (interior of inner
        circle), the values for annulus (the region between the inner and
        outer circle), and the values for the exterior of the annulus can be
        specified. This mode is useful in correlation based matched filter
        applications. For instance, defining a hollow (or even filled) circle.

        2) The values can defined automatically for normalized correlation.
        The values in the kernel will be defined to have mean zero and norm 1.
        The area outside the annulus will have values of zero. In this mode,
        you can also specify whether you want the center of the annulus to be
        bright (intensity > 0) or dark (intensity < 0).

        1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
        intensities to use for interior, wall, and exterior kernel positions
        for correlation based operations or call NormalizeOn() to define
        kernel values automatically for use in normalized correlation. 3) If
        NormalizedOn(), indicate whether you want the center of the annulus to
        be bright or dark. 4) call  CreateOperator()

        AnnulusOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood 
        """
        _itkAnnulusOperatorPython.itkAnnulusOperatorD2_swiginit(self, _itkAnnulusOperatorPython.new_itkAnnulusOperatorD2(*args))

# Register itkAnnulusOperatorD2 in _itkAnnulusOperatorPython:
_itkAnnulusOperatorPython.itkAnnulusOperatorD2_swigregister(itkAnnulusOperatorD2)

class itkAnnulusOperatorD3(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorD3):
    r"""


    A NeighborhoodOperator for performing a matched filtering with an
    annulus (two concentric circles, spheres, hyperspheres, etc.)

    AnnulusOperator defines a non-directional NeighborhoodOperator
    representing two concentric circles, spheres, hyperspheres, etc. The
    inner radius and the thickness of the annulus can be specified.

    The values for the annulus can be specified in a variety of manners:

    1) The values for the interior of the annulus (interior of inner
    circle), the values for annulus (the region between the inner and
    outer circle), and the values for the exterior of the annulus can be
    specified. This mode is useful in correlation based matched filter
    applications. For instance, defining a hollow (or even filled) circle.

    2) The values can defined automatically for normalized correlation.
    The values in the kernel will be defined to have mean zero and norm 1.
    The area outside the annulus will have values of zero. In this mode,
    you can also specify whether you want the center of the annulus to be
    bright (intensity > 0) or dark (intensity < 0).

    1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
    intensities to use for interior, wall, and exterior kernel positions
    for correlation based operations or call NormalizeOn() to define
    kernel values automatically for use in normalized correlation. 3) If
    NormalizedOn(), indicate whether you want the center of the annulus to
    be bright or dark. 4) call  CreateOperator()

    AnnulusOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CreateOperator = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_CreateOperator)
    SetInnerRadius = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetInnerRadius)
    GetInnerRadius = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetInnerRadius)
    SetThickness = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetThickness)
    GetThickness = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetThickness)
    SetSpacing = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetSpacing)
    SetNormalize = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_NormalizeOff)
    SetBrightCenter = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetBrightCenter)
    GetBrightCenter = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetBrightCenter)
    BrightCenterOn = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_BrightCenterOn)
    BrightCenterOff = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_BrightCenterOff)
    SetInteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetInteriorValue)
    GetInteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetInteriorValue)
    SetAnnulusValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetAnnulusValue)
    GetAnnulusValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetAnnulusValue)
    SetExteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_SetExteriorValue)
    GetExteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorD3_GetExteriorValue)
    __swig_destroy__ = _itkAnnulusOperatorPython.delete_itkAnnulusOperatorD3

    def __init__(self, *args):
        r"""
        __init__(itkAnnulusOperatorD3 self, itkAnnulusOperatorD3 arg0) -> itkAnnulusOperatorD3
        __init__(itkAnnulusOperatorD3 self) -> itkAnnulusOperatorD3


        A NeighborhoodOperator for performing a matched filtering with an
        annulus (two concentric circles, spheres, hyperspheres, etc.)

        AnnulusOperator defines a non-directional NeighborhoodOperator
        representing two concentric circles, spheres, hyperspheres, etc. The
        inner radius and the thickness of the annulus can be specified.

        The values for the annulus can be specified in a variety of manners:

        1) The values for the interior of the annulus (interior of inner
        circle), the values for annulus (the region between the inner and
        outer circle), and the values for the exterior of the annulus can be
        specified. This mode is useful in correlation based matched filter
        applications. For instance, defining a hollow (or even filled) circle.

        2) The values can defined automatically for normalized correlation.
        The values in the kernel will be defined to have mean zero and norm 1.
        The area outside the annulus will have values of zero. In this mode,
        you can also specify whether you want the center of the annulus to be
        bright (intensity > 0) or dark (intensity < 0).

        1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
        intensities to use for interior, wall, and exterior kernel positions
        for correlation based operations or call NormalizeOn() to define
        kernel values automatically for use in normalized correlation. 3) If
        NormalizedOn(), indicate whether you want the center of the annulus to
        be bright or dark. 4) call  CreateOperator()

        AnnulusOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood 
        """
        _itkAnnulusOperatorPython.itkAnnulusOperatorD3_swiginit(self, _itkAnnulusOperatorPython.new_itkAnnulusOperatorD3(*args))

# Register itkAnnulusOperatorD3 in _itkAnnulusOperatorPython:
_itkAnnulusOperatorPython.itkAnnulusOperatorD3_swigregister(itkAnnulusOperatorD3)

class itkAnnulusOperatorF2(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF2):
    r"""


    A NeighborhoodOperator for performing a matched filtering with an
    annulus (two concentric circles, spheres, hyperspheres, etc.)

    AnnulusOperator defines a non-directional NeighborhoodOperator
    representing two concentric circles, spheres, hyperspheres, etc. The
    inner radius and the thickness of the annulus can be specified.

    The values for the annulus can be specified in a variety of manners:

    1) The values for the interior of the annulus (interior of inner
    circle), the values for annulus (the region between the inner and
    outer circle), and the values for the exterior of the annulus can be
    specified. This mode is useful in correlation based matched filter
    applications. For instance, defining a hollow (or even filled) circle.

    2) The values can defined automatically for normalized correlation.
    The values in the kernel will be defined to have mean zero and norm 1.
    The area outside the annulus will have values of zero. In this mode,
    you can also specify whether you want the center of the annulus to be
    bright (intensity > 0) or dark (intensity < 0).

    1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
    intensities to use for interior, wall, and exterior kernel positions
    for correlation based operations or call NormalizeOn() to define
    kernel values automatically for use in normalized correlation. 3) If
    NormalizedOn(), indicate whether you want the center of the annulus to
    be bright or dark. 4) call  CreateOperator()

    AnnulusOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CreateOperator = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_CreateOperator)
    SetInnerRadius = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetInnerRadius)
    GetInnerRadius = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetInnerRadius)
    SetThickness = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetThickness)
    GetThickness = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetThickness)
    SetSpacing = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetSpacing)
    SetNormalize = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_NormalizeOff)
    SetBrightCenter = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetBrightCenter)
    GetBrightCenter = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetBrightCenter)
    BrightCenterOn = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_BrightCenterOn)
    BrightCenterOff = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_BrightCenterOff)
    SetInteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetInteriorValue)
    GetInteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetInteriorValue)
    SetAnnulusValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetAnnulusValue)
    GetAnnulusValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetAnnulusValue)
    SetExteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_SetExteriorValue)
    GetExteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF2_GetExteriorValue)
    __swig_destroy__ = _itkAnnulusOperatorPython.delete_itkAnnulusOperatorF2

    def __init__(self, *args):
        r"""
        __init__(itkAnnulusOperatorF2 self, itkAnnulusOperatorF2 arg0) -> itkAnnulusOperatorF2
        __init__(itkAnnulusOperatorF2 self) -> itkAnnulusOperatorF2


        A NeighborhoodOperator for performing a matched filtering with an
        annulus (two concentric circles, spheres, hyperspheres, etc.)

        AnnulusOperator defines a non-directional NeighborhoodOperator
        representing two concentric circles, spheres, hyperspheres, etc. The
        inner radius and the thickness of the annulus can be specified.

        The values for the annulus can be specified in a variety of manners:

        1) The values for the interior of the annulus (interior of inner
        circle), the values for annulus (the region between the inner and
        outer circle), and the values for the exterior of the annulus can be
        specified. This mode is useful in correlation based matched filter
        applications. For instance, defining a hollow (or even filled) circle.

        2) The values can defined automatically for normalized correlation.
        The values in the kernel will be defined to have mean zero and norm 1.
        The area outside the annulus will have values of zero. In this mode,
        you can also specify whether you want the center of the annulus to be
        bright (intensity > 0) or dark (intensity < 0).

        1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
        intensities to use for interior, wall, and exterior kernel positions
        for correlation based operations or call NormalizeOn() to define
        kernel values automatically for use in normalized correlation. 3) If
        NormalizedOn(), indicate whether you want the center of the annulus to
        be bright or dark. 4) call  CreateOperator()

        AnnulusOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood 
        """
        _itkAnnulusOperatorPython.itkAnnulusOperatorF2_swiginit(self, _itkAnnulusOperatorPython.new_itkAnnulusOperatorF2(*args))

# Register itkAnnulusOperatorF2 in _itkAnnulusOperatorPython:
_itkAnnulusOperatorPython.itkAnnulusOperatorF2_swigregister(itkAnnulusOperatorF2)

class itkAnnulusOperatorF3(itk.itkNeighborhoodOperatorPython.itkNeighborhoodOperatorF3):
    r"""


    A NeighborhoodOperator for performing a matched filtering with an
    annulus (two concentric circles, spheres, hyperspheres, etc.)

    AnnulusOperator defines a non-directional NeighborhoodOperator
    representing two concentric circles, spheres, hyperspheres, etc. The
    inner radius and the thickness of the annulus can be specified.

    The values for the annulus can be specified in a variety of manners:

    1) The values for the interior of the annulus (interior of inner
    circle), the values for annulus (the region between the inner and
    outer circle), and the values for the exterior of the annulus can be
    specified. This mode is useful in correlation based matched filter
    applications. For instance, defining a hollow (or even filled) circle.

    2) The values can defined automatically for normalized correlation.
    The values in the kernel will be defined to have mean zero and norm 1.
    The area outside the annulus will have values of zero. In this mode,
    you can also specify whether you want the center of the annulus to be
    bright (intensity > 0) or dark (intensity < 0).

    1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
    intensities to use for interior, wall, and exterior kernel positions
    for correlation based operations or call NormalizeOn() to define
    kernel values automatically for use in normalized correlation. 3) If
    NormalizedOn(), indicate whether you want the center of the annulus to
    be bright or dark. 4) call  CreateOperator()

    AnnulusOperator does not have any user-declared "special member
    function", following the C++ Rule of Zero: the compiler will generate
    them if necessary.

    See:   NeighborhoodOperator

    See:   Neighborhood 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CreateOperator = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_CreateOperator)
    SetInnerRadius = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetInnerRadius)
    GetInnerRadius = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetInnerRadius)
    SetThickness = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetThickness)
    GetThickness = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetThickness)
    SetSpacing = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetSpacing)
    GetSpacing = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetSpacing)
    SetNormalize = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetNormalize)
    GetNormalize = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetNormalize)
    NormalizeOn = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_NormalizeOn)
    NormalizeOff = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_NormalizeOff)
    SetBrightCenter = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetBrightCenter)
    GetBrightCenter = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetBrightCenter)
    BrightCenterOn = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_BrightCenterOn)
    BrightCenterOff = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_BrightCenterOff)
    SetInteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetInteriorValue)
    GetInteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetInteriorValue)
    SetAnnulusValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetAnnulusValue)
    GetAnnulusValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetAnnulusValue)
    SetExteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_SetExteriorValue)
    GetExteriorValue = _swig_new_instance_method(_itkAnnulusOperatorPython.itkAnnulusOperatorF3_GetExteriorValue)
    __swig_destroy__ = _itkAnnulusOperatorPython.delete_itkAnnulusOperatorF3

    def __init__(self, *args):
        r"""
        __init__(itkAnnulusOperatorF3 self, itkAnnulusOperatorF3 arg0) -> itkAnnulusOperatorF3
        __init__(itkAnnulusOperatorF3 self) -> itkAnnulusOperatorF3


        A NeighborhoodOperator for performing a matched filtering with an
        annulus (two concentric circles, spheres, hyperspheres, etc.)

        AnnulusOperator defines a non-directional NeighborhoodOperator
        representing two concentric circles, spheres, hyperspheres, etc. The
        inner radius and the thickness of the annulus can be specified.

        The values for the annulus can be specified in a variety of manners:

        1) The values for the interior of the annulus (interior of inner
        circle), the values for annulus (the region between the inner and
        outer circle), and the values for the exterior of the annulus can be
        specified. This mode is useful in correlation based matched filter
        applications. For instance, defining a hollow (or even filled) circle.

        2) The values can defined automatically for normalized correlation.
        The values in the kernel will be defined to have mean zero and norm 1.
        The area outside the annulus will have values of zero. In this mode,
        you can also specify whether you want the center of the annulus to be
        bright (intensity > 0) or dark (intensity < 0).

        1) Set the annulus parameters: InnerRadius and Thickness 2) Set the
        intensities to use for interior, wall, and exterior kernel positions
        for correlation based operations or call NormalizeOn() to define
        kernel values automatically for use in normalized correlation. 3) If
        NormalizedOn(), indicate whether you want the center of the annulus to
        be bright or dark. 4) call  CreateOperator()

        AnnulusOperator does not have any user-declared "special member
        function", following the C++ Rule of Zero: the compiler will generate
        them if necessary.

        See:   NeighborhoodOperator

        See:   Neighborhood 
        """
        _itkAnnulusOperatorPython.itkAnnulusOperatorF3_swiginit(self, _itkAnnulusOperatorPython.new_itkAnnulusOperatorF3(*args))

# Register itkAnnulusOperatorF3 in _itkAnnulusOperatorPython:
_itkAnnulusOperatorPython.itkAnnulusOperatorF3_swigregister(itkAnnulusOperatorF3)



