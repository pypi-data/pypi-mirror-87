# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFusionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelMapOverlayImageFilterPython
else:
    import _itkLabelMapOverlayImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLabelMapOverlayImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLabelMapOverlayImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkStatisticsLabelObjectPython
import itk.itkShapeLabelObjectPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkLabelObjectPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkLabelObjectLinePython
import itk.itkImageRegionPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkTransformBasePython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkLabelMapFilterPython
import itk.ITKLabelMapBasePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython

def itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_New():
    return itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2.New()

class itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2(itk.itkLabelMapFilterPython.itkLabelMapFilterLM2IRGBUC2):
    r"""


    Apply a colormap to a label map and superimpose it on an image.

    Apply a colormap to a label map and put it on top of the feature
    image. The feature image is typically the image from which the
    labeling was produced. Use the SetInput function to set the LabelMap,
    and the SetFeatureImage function to set the feature image.

    The set of colors is a good selection of distinct colors. The opacity
    of the label map can be defined by the user. A background label
    produce a gray pixel with the same intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelOverlayImageFilter, LabelOverlayFunctor

    See:   LabelMapToRGBImageFilter, LabelMapToBinaryImageFilter,
    LabelMapToLabelImageFilter
    example{Filtering/ImageFusion/ColorLabeledRegions,Color Labeled
    Regions In Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_Clone)
    SetFeatureImage = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_SetFeatureImage)
    GetFeatureImage = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_GetFeatureImage)
    SetInput1 = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_SetInput2)
    SetOpacity = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_GetOpacity)
    SetFunctor = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_GetFunctor)
    __swig_destroy__ = _itkLabelMapOverlayImageFilterPython.delete_itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2
    cast = _swig_new_static_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2

        Create a new object of the class itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2 in _itkLabelMapOverlayImageFilterPython:
_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_swigregister(itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2)
itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2___New_orig__ = _itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2___New_orig__
itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_cast = _itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM2IUC2IRGBUC2_cast


def itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_New():
    return itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3.New()

class itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3(itk.itkLabelMapFilterPython.itkLabelMapFilterLM3IRGBUC3):
    r"""


    Apply a colormap to a label map and superimpose it on an image.

    Apply a colormap to a label map and put it on top of the feature
    image. The feature image is typically the image from which the
    labeling was produced. Use the SetInput function to set the LabelMap,
    and the SetFeatureImage function to set the feature image.

    The set of colors is a good selection of distinct colors. The opacity
    of the label map can be defined by the user. A background label
    produce a gray pixel with the same intensity than the input one.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176

    See:   LabelOverlayImageFilter, LabelOverlayFunctor

    See:   LabelMapToRGBImageFilter, LabelMapToBinaryImageFilter,
    LabelMapToLabelImageFilter
    example{Filtering/ImageFusion/ColorLabeledRegions,Color Labeled
    Regions In Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_Clone)
    SetFeatureImage = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_SetFeatureImage)
    GetFeatureImage = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_GetFeatureImage)
    SetInput1 = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_SetInput2)
    SetOpacity = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_SetOpacity)
    GetOpacity = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_GetOpacity)
    SetFunctor = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_GetFunctor)
    __swig_destroy__ = _itkLabelMapOverlayImageFilterPython.delete_itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3
    cast = _swig_new_static_method(_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3

        Create a new object of the class itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3 in _itkLabelMapOverlayImageFilterPython:
_itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_swigregister(itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3)
itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3___New_orig__ = _itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3___New_orig__
itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_cast = _itkLabelMapOverlayImageFilterPython.itkLabelMapOverlayImageFilterLM3IUC3IRGBUC3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def label_map_overlay_image_filter(*args, **kwargs):
    """Procedural interface for LabelMapOverlayImageFilter"""
    import itk
    instance = itk.LabelMapOverlayImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def label_map_overlay_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LabelMapOverlayImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LabelMapOverlayImageFilter.values()[0]
    else:
        filter_object = itk.LabelMapOverlayImageFilter

    label_map_overlay_image_filter.__doc__ = filter_object.__doc__
    label_map_overlay_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    label_map_overlay_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LabelMapOverlayImageFilter, itkTemplate.itkTemplate):
        label_map_overlay_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        label_map_overlay_image_filter.__doc__ += "\n"
        label_map_overlay_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        label_map_overlay_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



