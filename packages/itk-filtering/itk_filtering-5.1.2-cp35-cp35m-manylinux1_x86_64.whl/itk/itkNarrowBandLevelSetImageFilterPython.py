# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNarrowBandLevelSetImageFilterPython
else:
    import _itkNarrowBandLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNarrowBandLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNarrowBandLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkNarrowBandImageFilterBasePython
import itk.ITKNarrowBandBasePython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkLevelSetFunctionPython
class itkNarrowBandLevelSetImageFilterID2ID2D(itk.itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID2ID2):
    r"""


    A base class which defines the API for implementing a special class of
    image segmentation filters using level set methods.

    OVERVIEW This object defines the framework for a class of segmentation
    filters which use level set methods. These filters work by
    constructing a "feature image" onto which the evolving level set
    locks as it moves. In the feature image, values that are close to zero
    are associated with object boundaries. An original (or preprocessed)
    image is given to the filter as the feature image and a seed for the
    level set is given as the input of the filter. The seed is converted
    into a level set embedding which propagates according to the features
    calculated from the original image. TEMPLATE PARAMETERS There are two
    required and two optional template parameter for these filters. Of the
    optional parameters, the last, TOutputImage, should not be changed
    from its default. It is only there to instantiate the parent class
    correctly.  TInputImage is the image type of the initial model you
    will input to the filter using SetInput() or SetInitialImage().

    TFeatureImage is the image type of the image from which the filter
    will calculate the speed term for segmentation (see INPUTS).

    TOutputPixelType is the data type used for the output image phi, the
    implicit level set image. This should really only ever be set as float
    (default) or double.

    INPUTS The input to any subclass of this filter is the seed image for
    the initial level set embedding. As with other subclasses of the
    SparseLevelSetImageFilter, the type of the input image is is not
    important. The (RequestedRegion) size of the seed image must, however,
    match the (RequestedRegion) size of the feature image.  You must
    identify the initial front (surface) in the input image. You do this
    by specifying its isovalue through the method SetIsoSurfaceValue(float
    f). The algorithm will then initialize its solution using the front
    represented by value f. Note that the front is always represented by
    isosurface zero in the output and not the isosurface you specified for
    the input. This is because, for simplicity, the filter will shift your
    input image so that the active front has zero values.

    Depending on the particular application and filter that you are using,
    the feature image should be preprocessed with some type of noise
    reduction filtering. The feature image input can be of any type, but
    it will be cast to floating point before calculations are done.
    OUTPUTS The output of any subclass of this filter is a level set
    embedding as described in SparseFieldLevelSetImageFilter. The zero
    crossings of the output image give the pixels closest to the level set
    boundary. By ITK convention, NEGATIVE values are pixels INSIDE the
    segmented region and POSITIVE values are pixels OUTSIDE the segmented
    region. PARAMETERS The MaximumRMSChange parameter is used to determine
    when the solution has converged. A lower value will result in a
    tighter-fitting solution, but will require more computations. Too low
    a value could put the solver into an infinite loop unless a reasonable
    NumberOfIterations parameter is set. Values should always be greater
    than 0.0 and less than 1.0.

    The NumberOfIterations parameter can be used to halt the solution
    after a specified number of iterations, overriding the
    MaximumRMSChange halting criteria.

    The standard convention for ITK level-set segmentation filters is that
    POSITIVE propagation (speed) and advection terms cause the surface to
    EXPAND while negative terms cause the surface to CONTRACT. When the
    ReverseExpansionDirection parameter is set to TRUE (on), it tells the
    function object to reverse the standard ITK convention so that
    NEGATIVE terms cause EXPANSION and positive terms cause CONTRACTION.
    This parameter can be safely changed as appropriate for a particular
    application or data set to achieve the desired behavior.

    The FeatureScaling parameter controls the magnitude of the features
    calculated for use in the level set propagation and advection speeds.
    This value simply sets both parameters to equal values at once. Some
    filters may only use on of these two terms and this method is a
    generic way to set either or both without having to know which is in
    use.

    The CurvatureScaling parameter controls the magnitude of the curvature
    values which are calculated on the evolving isophote. This is
    important in controlling the relative effect of curvature in the
    calculation. Default value is 1.0. Higher values relative to the other
    level set equation terms (propagation and advection) will give a
    smoother result.

    The PropagationScaling parameter controls the scaling of the scalar
    propagation (speed) term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    The AdvectionScaling parameter controls the scaling of the vector
    advection field term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    See LevelSetFunction for more information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetFeatureImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetFeatureImage)
    GetFeatureImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetFeatureImage)
    SetInitialImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetInitialImage)
    GetSpeedImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetSpeedImage)
    GetAdvectionImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetAdvectionImage)
    SetUseNegativeFeaturesOn = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeaturesOn)
    SetUseNegativeFeaturesOff = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeaturesOff)
    SetUseNegativeFeatures = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetUseNegativeFeatures)
    GetUseNegativeFeatures = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetUseNegativeFeatures)
    SetReverseExpansionDirection = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetReverseExpansionDirection)
    GetReverseExpansionDirection = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetReverseExpansionDirection)
    ReverseExpansionDirectionOn = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_ReverseExpansionDirectionOn)
    ReverseExpansionDirectionOff = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_ReverseExpansionDirectionOff)
    SetFeatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetFeatureScaling)
    SetPropagationScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetPropagationScaling)
    GetPropagationScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetPropagationScaling)
    SetAdvectionScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetAdvectionScaling)
    GetAdvectionScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetAdvectionScaling)
    SetCurvatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetCurvatureScaling)
    GetCurvatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetCurvatureScaling)
    SetSegmentationFunction = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetSegmentationFunction)
    GetSegmentationFunction = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetSegmentationFunction)
    SetMaximumIterations = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_GetMaximumIterations)
    OutputHasNumericTraitsCheck = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandLevelSetImageFilterPython.delete_itkNarrowBandLevelSetImageFilterID2ID2D
    cast = _swig_new_static_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_cast)

# Register itkNarrowBandLevelSetImageFilterID2ID2D in _itkNarrowBandLevelSetImageFilterPython:
_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_swigregister(itkNarrowBandLevelSetImageFilterID2ID2D)
itkNarrowBandLevelSetImageFilterID2ID2D_cast = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID2ID2D_cast

class itkNarrowBandLevelSetImageFilterID3ID3D(itk.itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseID3ID3):
    r"""


    A base class which defines the API for implementing a special class of
    image segmentation filters using level set methods.

    OVERVIEW This object defines the framework for a class of segmentation
    filters which use level set methods. These filters work by
    constructing a "feature image" onto which the evolving level set
    locks as it moves. In the feature image, values that are close to zero
    are associated with object boundaries. An original (or preprocessed)
    image is given to the filter as the feature image and a seed for the
    level set is given as the input of the filter. The seed is converted
    into a level set embedding which propagates according to the features
    calculated from the original image. TEMPLATE PARAMETERS There are two
    required and two optional template parameter for these filters. Of the
    optional parameters, the last, TOutputImage, should not be changed
    from its default. It is only there to instantiate the parent class
    correctly.  TInputImage is the image type of the initial model you
    will input to the filter using SetInput() or SetInitialImage().

    TFeatureImage is the image type of the image from which the filter
    will calculate the speed term for segmentation (see INPUTS).

    TOutputPixelType is the data type used for the output image phi, the
    implicit level set image. This should really only ever be set as float
    (default) or double.

    INPUTS The input to any subclass of this filter is the seed image for
    the initial level set embedding. As with other subclasses of the
    SparseLevelSetImageFilter, the type of the input image is is not
    important. The (RequestedRegion) size of the seed image must, however,
    match the (RequestedRegion) size of the feature image.  You must
    identify the initial front (surface) in the input image. You do this
    by specifying its isovalue through the method SetIsoSurfaceValue(float
    f). The algorithm will then initialize its solution using the front
    represented by value f. Note that the front is always represented by
    isosurface zero in the output and not the isosurface you specified for
    the input. This is because, for simplicity, the filter will shift your
    input image so that the active front has zero values.

    Depending on the particular application and filter that you are using,
    the feature image should be preprocessed with some type of noise
    reduction filtering. The feature image input can be of any type, but
    it will be cast to floating point before calculations are done.
    OUTPUTS The output of any subclass of this filter is a level set
    embedding as described in SparseFieldLevelSetImageFilter. The zero
    crossings of the output image give the pixels closest to the level set
    boundary. By ITK convention, NEGATIVE values are pixels INSIDE the
    segmented region and POSITIVE values are pixels OUTSIDE the segmented
    region. PARAMETERS The MaximumRMSChange parameter is used to determine
    when the solution has converged. A lower value will result in a
    tighter-fitting solution, but will require more computations. Too low
    a value could put the solver into an infinite loop unless a reasonable
    NumberOfIterations parameter is set. Values should always be greater
    than 0.0 and less than 1.0.

    The NumberOfIterations parameter can be used to halt the solution
    after a specified number of iterations, overriding the
    MaximumRMSChange halting criteria.

    The standard convention for ITK level-set segmentation filters is that
    POSITIVE propagation (speed) and advection terms cause the surface to
    EXPAND while negative terms cause the surface to CONTRACT. When the
    ReverseExpansionDirection parameter is set to TRUE (on), it tells the
    function object to reverse the standard ITK convention so that
    NEGATIVE terms cause EXPANSION and positive terms cause CONTRACTION.
    This parameter can be safely changed as appropriate for a particular
    application or data set to achieve the desired behavior.

    The FeatureScaling parameter controls the magnitude of the features
    calculated for use in the level set propagation and advection speeds.
    This value simply sets both parameters to equal values at once. Some
    filters may only use on of these two terms and this method is a
    generic way to set either or both without having to know which is in
    use.

    The CurvatureScaling parameter controls the magnitude of the curvature
    values which are calculated on the evolving isophote. This is
    important in controlling the relative effect of curvature in the
    calculation. Default value is 1.0. Higher values relative to the other
    level set equation terms (propagation and advection) will give a
    smoother result.

    The PropagationScaling parameter controls the scaling of the scalar
    propagation (speed) term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    The AdvectionScaling parameter controls the scaling of the vector
    advection field term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    See LevelSetFunction for more information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetFeatureImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetFeatureImage)
    GetFeatureImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetFeatureImage)
    SetInitialImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetInitialImage)
    GetSpeedImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetSpeedImage)
    GetAdvectionImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetAdvectionImage)
    SetUseNegativeFeaturesOn = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeaturesOn)
    SetUseNegativeFeaturesOff = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeaturesOff)
    SetUseNegativeFeatures = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetUseNegativeFeatures)
    GetUseNegativeFeatures = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetUseNegativeFeatures)
    SetReverseExpansionDirection = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetReverseExpansionDirection)
    GetReverseExpansionDirection = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetReverseExpansionDirection)
    ReverseExpansionDirectionOn = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_ReverseExpansionDirectionOn)
    ReverseExpansionDirectionOff = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_ReverseExpansionDirectionOff)
    SetFeatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetFeatureScaling)
    SetPropagationScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetPropagationScaling)
    GetPropagationScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetPropagationScaling)
    SetAdvectionScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetAdvectionScaling)
    GetAdvectionScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetAdvectionScaling)
    SetCurvatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetCurvatureScaling)
    GetCurvatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetCurvatureScaling)
    SetSegmentationFunction = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetSegmentationFunction)
    GetSegmentationFunction = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetSegmentationFunction)
    SetMaximumIterations = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_GetMaximumIterations)
    OutputHasNumericTraitsCheck = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandLevelSetImageFilterPython.delete_itkNarrowBandLevelSetImageFilterID3ID3D
    cast = _swig_new_static_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_cast)

# Register itkNarrowBandLevelSetImageFilterID3ID3D in _itkNarrowBandLevelSetImageFilterPython:
_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_swigregister(itkNarrowBandLevelSetImageFilterID3ID3D)
itkNarrowBandLevelSetImageFilterID3ID3D_cast = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterID3ID3D_cast

class itkNarrowBandLevelSetImageFilterIF2IF2F(itk.itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF2IF2):
    r"""


    A base class which defines the API for implementing a special class of
    image segmentation filters using level set methods.

    OVERVIEW This object defines the framework for a class of segmentation
    filters which use level set methods. These filters work by
    constructing a "feature image" onto which the evolving level set
    locks as it moves. In the feature image, values that are close to zero
    are associated with object boundaries. An original (or preprocessed)
    image is given to the filter as the feature image and a seed for the
    level set is given as the input of the filter. The seed is converted
    into a level set embedding which propagates according to the features
    calculated from the original image. TEMPLATE PARAMETERS There are two
    required and two optional template parameter for these filters. Of the
    optional parameters, the last, TOutputImage, should not be changed
    from its default. It is only there to instantiate the parent class
    correctly.  TInputImage is the image type of the initial model you
    will input to the filter using SetInput() or SetInitialImage().

    TFeatureImage is the image type of the image from which the filter
    will calculate the speed term for segmentation (see INPUTS).

    TOutputPixelType is the data type used for the output image phi, the
    implicit level set image. This should really only ever be set as float
    (default) or double.

    INPUTS The input to any subclass of this filter is the seed image for
    the initial level set embedding. As with other subclasses of the
    SparseLevelSetImageFilter, the type of the input image is is not
    important. The (RequestedRegion) size of the seed image must, however,
    match the (RequestedRegion) size of the feature image.  You must
    identify the initial front (surface) in the input image. You do this
    by specifying its isovalue through the method SetIsoSurfaceValue(float
    f). The algorithm will then initialize its solution using the front
    represented by value f. Note that the front is always represented by
    isosurface zero in the output and not the isosurface you specified for
    the input. This is because, for simplicity, the filter will shift your
    input image so that the active front has zero values.

    Depending on the particular application and filter that you are using,
    the feature image should be preprocessed with some type of noise
    reduction filtering. The feature image input can be of any type, but
    it will be cast to floating point before calculations are done.
    OUTPUTS The output of any subclass of this filter is a level set
    embedding as described in SparseFieldLevelSetImageFilter. The zero
    crossings of the output image give the pixels closest to the level set
    boundary. By ITK convention, NEGATIVE values are pixels INSIDE the
    segmented region and POSITIVE values are pixels OUTSIDE the segmented
    region. PARAMETERS The MaximumRMSChange parameter is used to determine
    when the solution has converged. A lower value will result in a
    tighter-fitting solution, but will require more computations. Too low
    a value could put the solver into an infinite loop unless a reasonable
    NumberOfIterations parameter is set. Values should always be greater
    than 0.0 and less than 1.0.

    The NumberOfIterations parameter can be used to halt the solution
    after a specified number of iterations, overriding the
    MaximumRMSChange halting criteria.

    The standard convention for ITK level-set segmentation filters is that
    POSITIVE propagation (speed) and advection terms cause the surface to
    EXPAND while negative terms cause the surface to CONTRACT. When the
    ReverseExpansionDirection parameter is set to TRUE (on), it tells the
    function object to reverse the standard ITK convention so that
    NEGATIVE terms cause EXPANSION and positive terms cause CONTRACTION.
    This parameter can be safely changed as appropriate for a particular
    application or data set to achieve the desired behavior.

    The FeatureScaling parameter controls the magnitude of the features
    calculated for use in the level set propagation and advection speeds.
    This value simply sets both parameters to equal values at once. Some
    filters may only use on of these two terms and this method is a
    generic way to set either or both without having to know which is in
    use.

    The CurvatureScaling parameter controls the magnitude of the curvature
    values which are calculated on the evolving isophote. This is
    important in controlling the relative effect of curvature in the
    calculation. Default value is 1.0. Higher values relative to the other
    level set equation terms (propagation and advection) will give a
    smoother result.

    The PropagationScaling parameter controls the scaling of the scalar
    propagation (speed) term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    The AdvectionScaling parameter controls the scaling of the vector
    advection field term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    See LevelSetFunction for more information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetFeatureImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetFeatureImage)
    GetFeatureImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetFeatureImage)
    SetInitialImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetInitialImage)
    GetSpeedImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetSpeedImage)
    GetAdvectionImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetAdvectionImage)
    SetUseNegativeFeaturesOn = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeaturesOn)
    SetUseNegativeFeaturesOff = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeaturesOff)
    SetUseNegativeFeatures = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetUseNegativeFeatures)
    GetUseNegativeFeatures = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetUseNegativeFeatures)
    SetReverseExpansionDirection = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetReverseExpansionDirection)
    GetReverseExpansionDirection = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetReverseExpansionDirection)
    ReverseExpansionDirectionOn = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_ReverseExpansionDirectionOn)
    ReverseExpansionDirectionOff = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_ReverseExpansionDirectionOff)
    SetFeatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetFeatureScaling)
    SetPropagationScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetPropagationScaling)
    GetPropagationScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetPropagationScaling)
    SetAdvectionScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetAdvectionScaling)
    GetAdvectionScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetAdvectionScaling)
    SetCurvatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetCurvatureScaling)
    GetCurvatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetCurvatureScaling)
    SetSegmentationFunction = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetSegmentationFunction)
    GetSegmentationFunction = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetSegmentationFunction)
    SetMaximumIterations = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_GetMaximumIterations)
    OutputHasNumericTraitsCheck = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandLevelSetImageFilterPython.delete_itkNarrowBandLevelSetImageFilterIF2IF2F
    cast = _swig_new_static_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_cast)

# Register itkNarrowBandLevelSetImageFilterIF2IF2F in _itkNarrowBandLevelSetImageFilterPython:
_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_swigregister(itkNarrowBandLevelSetImageFilterIF2IF2F)
itkNarrowBandLevelSetImageFilterIF2IF2F_cast = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF2IF2F_cast

class itkNarrowBandLevelSetImageFilterIF3IF3F(itk.itkNarrowBandImageFilterBasePython.itkNarrowBandImageFilterBaseIF3IF3):
    r"""


    A base class which defines the API for implementing a special class of
    image segmentation filters using level set methods.

    OVERVIEW This object defines the framework for a class of segmentation
    filters which use level set methods. These filters work by
    constructing a "feature image" onto which the evolving level set
    locks as it moves. In the feature image, values that are close to zero
    are associated with object boundaries. An original (or preprocessed)
    image is given to the filter as the feature image and a seed for the
    level set is given as the input of the filter. The seed is converted
    into a level set embedding which propagates according to the features
    calculated from the original image. TEMPLATE PARAMETERS There are two
    required and two optional template parameter for these filters. Of the
    optional parameters, the last, TOutputImage, should not be changed
    from its default. It is only there to instantiate the parent class
    correctly.  TInputImage is the image type of the initial model you
    will input to the filter using SetInput() or SetInitialImage().

    TFeatureImage is the image type of the image from which the filter
    will calculate the speed term for segmentation (see INPUTS).

    TOutputPixelType is the data type used for the output image phi, the
    implicit level set image. This should really only ever be set as float
    (default) or double.

    INPUTS The input to any subclass of this filter is the seed image for
    the initial level set embedding. As with other subclasses of the
    SparseLevelSetImageFilter, the type of the input image is is not
    important. The (RequestedRegion) size of the seed image must, however,
    match the (RequestedRegion) size of the feature image.  You must
    identify the initial front (surface) in the input image. You do this
    by specifying its isovalue through the method SetIsoSurfaceValue(float
    f). The algorithm will then initialize its solution using the front
    represented by value f. Note that the front is always represented by
    isosurface zero in the output and not the isosurface you specified for
    the input. This is because, for simplicity, the filter will shift your
    input image so that the active front has zero values.

    Depending on the particular application and filter that you are using,
    the feature image should be preprocessed with some type of noise
    reduction filtering. The feature image input can be of any type, but
    it will be cast to floating point before calculations are done.
    OUTPUTS The output of any subclass of this filter is a level set
    embedding as described in SparseFieldLevelSetImageFilter. The zero
    crossings of the output image give the pixels closest to the level set
    boundary. By ITK convention, NEGATIVE values are pixels INSIDE the
    segmented region and POSITIVE values are pixels OUTSIDE the segmented
    region. PARAMETERS The MaximumRMSChange parameter is used to determine
    when the solution has converged. A lower value will result in a
    tighter-fitting solution, but will require more computations. Too low
    a value could put the solver into an infinite loop unless a reasonable
    NumberOfIterations parameter is set. Values should always be greater
    than 0.0 and less than 1.0.

    The NumberOfIterations parameter can be used to halt the solution
    after a specified number of iterations, overriding the
    MaximumRMSChange halting criteria.

    The standard convention for ITK level-set segmentation filters is that
    POSITIVE propagation (speed) and advection terms cause the surface to
    EXPAND while negative terms cause the surface to CONTRACT. When the
    ReverseExpansionDirection parameter is set to TRUE (on), it tells the
    function object to reverse the standard ITK convention so that
    NEGATIVE terms cause EXPANSION and positive terms cause CONTRACTION.
    This parameter can be safely changed as appropriate for a particular
    application or data set to achieve the desired behavior.

    The FeatureScaling parameter controls the magnitude of the features
    calculated for use in the level set propagation and advection speeds.
    This value simply sets both parameters to equal values at once. Some
    filters may only use on of these two terms and this method is a
    generic way to set either or both without having to know which is in
    use.

    The CurvatureScaling parameter controls the magnitude of the curvature
    values which are calculated on the evolving isophote. This is
    important in controlling the relative effect of curvature in the
    calculation. Default value is 1.0. Higher values relative to the other
    level set equation terms (propagation and advection) will give a
    smoother result.

    The PropagationScaling parameter controls the scaling of the scalar
    propagation (speed) term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    The AdvectionScaling parameter controls the scaling of the vector
    advection field term relative to other terms in the level set
    equation. Setting this value will override any value already set by
    FeatureScaling.

    See LevelSetFunction for more information. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetFeatureImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetFeatureImage)
    GetFeatureImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetFeatureImage)
    SetInitialImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetInitialImage)
    GetSpeedImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetSpeedImage)
    GetAdvectionImage = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetAdvectionImage)
    SetUseNegativeFeaturesOn = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeaturesOn)
    SetUseNegativeFeaturesOff = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeaturesOff)
    SetUseNegativeFeatures = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetUseNegativeFeatures)
    GetUseNegativeFeatures = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetUseNegativeFeatures)
    SetReverseExpansionDirection = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetReverseExpansionDirection)
    GetReverseExpansionDirection = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetReverseExpansionDirection)
    ReverseExpansionDirectionOn = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_ReverseExpansionDirectionOn)
    ReverseExpansionDirectionOff = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_ReverseExpansionDirectionOff)
    SetFeatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetFeatureScaling)
    SetPropagationScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetPropagationScaling)
    GetPropagationScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetPropagationScaling)
    SetAdvectionScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetAdvectionScaling)
    GetAdvectionScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetAdvectionScaling)
    SetCurvatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetCurvatureScaling)
    GetCurvatureScaling = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetCurvatureScaling)
    SetSegmentationFunction = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetSegmentationFunction)
    GetSegmentationFunction = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetSegmentationFunction)
    SetMaximumIterations = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_SetMaximumIterations)
    GetMaximumIterations = _swig_new_instance_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_GetMaximumIterations)
    OutputHasNumericTraitsCheck = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkNarrowBandLevelSetImageFilterPython.delete_itkNarrowBandLevelSetImageFilterIF3IF3F
    cast = _swig_new_static_method(_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_cast)

# Register itkNarrowBandLevelSetImageFilterIF3IF3F in _itkNarrowBandLevelSetImageFilterPython:
_itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_swigregister(itkNarrowBandLevelSetImageFilterIF3IF3F)
itkNarrowBandLevelSetImageFilterIF3IF3F_cast = _itkNarrowBandLevelSetImageFilterPython.itkNarrowBandLevelSetImageFilterIF3IF3F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def narrow_band_level_set_image_filter(*args, **kwargs):
    """Procedural interface for NarrowBandLevelSetImageFilter"""
    import itk
    instance = itk.NarrowBandLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def narrow_band_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.NarrowBandLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.NarrowBandLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.NarrowBandLevelSetImageFilter

    narrow_band_level_set_image_filter.__doc__ = filter_object.__doc__
    narrow_band_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    narrow_band_level_set_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.NarrowBandLevelSetImageFilter, itkTemplate.itkTemplate):
        narrow_band_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        narrow_band_level_set_image_filter.__doc__ += "\n"
        narrow_band_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        narrow_band_level_set_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



