# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1GitlabEventSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token': 'V1SecretKeySelector',
        'delete_hook_on_finish': 'bool',
        'enable_ssl_verification': 'bool',
        'events': 'list[str]',
        'gitlab_base_url': 'str',
        'metadata': 'dict(str, str)',
        'project_id': 'str',
        'webhook': 'V1alpha1WebhookContext'
    }

    attribute_map = {
        'access_token': 'accessToken',
        'delete_hook_on_finish': 'deleteHookOnFinish',
        'enable_ssl_verification': 'enableSSLVerification',
        'events': 'events',
        'gitlab_base_url': 'gitlabBaseURL',
        'metadata': 'metadata',
        'project_id': 'projectID',
        'webhook': 'webhook'
    }

    def __init__(self, access_token=None, delete_hook_on_finish=None, enable_ssl_verification=None, events=None, gitlab_base_url=None, metadata=None, project_id=None, webhook=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1GitlabEventSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_token = None
        self._delete_hook_on_finish = None
        self._enable_ssl_verification = None
        self._events = None
        self._gitlab_base_url = None
        self._metadata = None
        self._project_id = None
        self._webhook = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if delete_hook_on_finish is not None:
            self.delete_hook_on_finish = delete_hook_on_finish
        if enable_ssl_verification is not None:
            self.enable_ssl_verification = enable_ssl_verification
        self.events = events
        self.gitlab_base_url = gitlab_base_url
        if metadata is not None:
            self.metadata = metadata
        self.project_id = project_id
        if webhook is not None:
            self.webhook = webhook

    @property
    def access_token(self):
        """Gets the access_token of this V1alpha1GitlabEventSource.  # noqa: E501


        :return: The access_token of this V1alpha1GitlabEventSource.  # noqa: E501
        :rtype: V1SecretKeySelector
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this V1alpha1GitlabEventSource.


        :param access_token: The access_token of this V1alpha1GitlabEventSource.  # noqa: E501
        :type: V1SecretKeySelector
        """

        self._access_token = access_token

    @property
    def delete_hook_on_finish(self):
        """Gets the delete_hook_on_finish of this V1alpha1GitlabEventSource.  # noqa: E501

        DeleteHookOnFinish determines whether to delete the GitLab hook for the project once the event source is stopped.  # noqa: E501

        :return: The delete_hook_on_finish of this V1alpha1GitlabEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._delete_hook_on_finish

    @delete_hook_on_finish.setter
    def delete_hook_on_finish(self, delete_hook_on_finish):
        """Sets the delete_hook_on_finish of this V1alpha1GitlabEventSource.

        DeleteHookOnFinish determines whether to delete the GitLab hook for the project once the event source is stopped.  # noqa: E501

        :param delete_hook_on_finish: The delete_hook_on_finish of this V1alpha1GitlabEventSource.  # noqa: E501
        :type: bool
        """

        self._delete_hook_on_finish = delete_hook_on_finish

    @property
    def enable_ssl_verification(self):
        """Gets the enable_ssl_verification of this V1alpha1GitlabEventSource.  # noqa: E501

        EnableSSLVerification to enable ssl verification  # noqa: E501

        :return: The enable_ssl_verification of this V1alpha1GitlabEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ssl_verification

    @enable_ssl_verification.setter
    def enable_ssl_verification(self, enable_ssl_verification):
        """Sets the enable_ssl_verification of this V1alpha1GitlabEventSource.

        EnableSSLVerification to enable ssl verification  # noqa: E501

        :param enable_ssl_verification: The enable_ssl_verification of this V1alpha1GitlabEventSource.  # noqa: E501
        :type: bool
        """

        self._enable_ssl_verification = enable_ssl_verification

    @property
    def events(self):
        """Gets the events of this V1alpha1GitlabEventSource.  # noqa: E501

        Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.  # noqa: E501

        :return: The events of this V1alpha1GitlabEventSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this V1alpha1GitlabEventSource.

        Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.  # noqa: E501

        :param events: The events of this V1alpha1GitlabEventSource.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and events is None:  # noqa: E501
            raise ValueError("Invalid value for `events`, must not be `None`")  # noqa: E501

        self._events = events

    @property
    def gitlab_base_url(self):
        """Gets the gitlab_base_url of this V1alpha1GitlabEventSource.  # noqa: E501

        GitlabBaseURL is the base URL for API requests to a custom endpoint  # noqa: E501

        :return: The gitlab_base_url of this V1alpha1GitlabEventSource.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_base_url

    @gitlab_base_url.setter
    def gitlab_base_url(self, gitlab_base_url):
        """Sets the gitlab_base_url of this V1alpha1GitlabEventSource.

        GitlabBaseURL is the base URL for API requests to a custom endpoint  # noqa: E501

        :param gitlab_base_url: The gitlab_base_url of this V1alpha1GitlabEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gitlab_base_url is None:  # noqa: E501
            raise ValueError("Invalid value for `gitlab_base_url`, must not be `None`")  # noqa: E501

        self._gitlab_base_url = gitlab_base_url

    @property
    def metadata(self):
        """Gets the metadata of this V1alpha1GitlabEventSource.  # noqa: E501

        Metadata holds the user defined metadata which will passed along the event payload.  # noqa: E501

        :return: The metadata of this V1alpha1GitlabEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1alpha1GitlabEventSource.

        Metadata holds the user defined metadata which will passed along the event payload.  # noqa: E501

        :param metadata: The metadata of this V1alpha1GitlabEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def project_id(self):
        """Gets the project_id of this V1alpha1GitlabEventSource.  # noqa: E501

        ProjectID is the id of project for which integration needs to setup  # noqa: E501

        :return: The project_id of this V1alpha1GitlabEventSource.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this V1alpha1GitlabEventSource.

        ProjectID is the id of project for which integration needs to setup  # noqa: E501

        :param project_id: The project_id of this V1alpha1GitlabEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def webhook(self):
        """Gets the webhook of this V1alpha1GitlabEventSource.  # noqa: E501


        :return: The webhook of this V1alpha1GitlabEventSource.  # noqa: E501
        :rtype: V1alpha1WebhookContext
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this V1alpha1GitlabEventSource.


        :param webhook: The webhook of this V1alpha1GitlabEventSource.  # noqa: E501
        :type: V1alpha1WebhookContext
        """

        self._webhook = webhook

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1GitlabEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1GitlabEventSource):
            return True

        return self.to_dict() != other.to_dict()
