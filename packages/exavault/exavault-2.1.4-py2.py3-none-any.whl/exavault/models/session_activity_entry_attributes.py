# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SessionActivityEntryAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bytes_transferred': 'int',
        'created': 'str',
        'duration': 'int',
        'file_name': 'str',
        'file_source': 'str',
        'ip_address': 'str',
        'operation': 'str',
        'protocol': 'str',
        'session_id': 'str',
        'status': 'str',
        'username': 'str'
    }

    attribute_map = {
        'bytes_transferred': 'bytesTransferred',
        'created': 'created',
        'duration': 'duration',
        'file_name': 'fileName',
        'file_source': 'fileSource',
        'ip_address': 'ipAddress',
        'operation': 'operation',
        'protocol': 'protocol',
        'session_id': 'sessionId',
        'status': 'status',
        'username': 'username'
    }

    def __init__(self, bytes_transferred=None, created=None, duration=None, file_name=None, file_source=None, ip_address=None, operation=None, protocol=None, session_id=None, status=None, username=None):  # noqa: E501
        """SessionActivityEntryAttributes - a model defined in Swagger"""  # noqa: E501
        self._bytes_transferred = None
        self._created = None
        self._duration = None
        self._file_name = None
        self._file_source = None
        self._ip_address = None
        self._operation = None
        self._protocol = None
        self._session_id = None
        self._status = None
        self._username = None
        self.discriminator = None
        if bytes_transferred is not None:
            self.bytes_transferred = bytes_transferred
        if created is not None:
            self.created = created
        if duration is not None:
            self.duration = duration
        if file_name is not None:
            self.file_name = file_name
        if file_source is not None:
            self.file_source = file_source
        if ip_address is not None:
            self.ip_address = ip_address
        if operation is not None:
            self.operation = operation
        if protocol is not None:
            self.protocol = protocol
        if session_id is not None:
            self.session_id = session_id
        if status is not None:
            self.status = status
        if username is not None:
            self.username = username

    @property
    def bytes_transferred(self):
        """Gets the bytes_transferred of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The bytes_transferred of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: int
        """
        return self._bytes_transferred

    @bytes_transferred.setter
    def bytes_transferred(self, bytes_transferred):
        """Sets the bytes_transferred of this SessionActivityEntryAttributes.


        :param bytes_transferred: The bytes_transferred of this SessionActivityEntryAttributes.  # noqa: E501
        :type: int
        """

        self._bytes_transferred = bytes_transferred

    @property
    def created(self):
        """Gets the created of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The created of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SessionActivityEntryAttributes.


        :param created: The created of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def duration(self):
        """Gets the duration of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The duration of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SessionActivityEntryAttributes.


        :param duration: The duration of this SessionActivityEntryAttributes.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def file_name(self):
        """Gets the file_name of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The file_name of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this SessionActivityEntryAttributes.


        :param file_name: The file_name of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_source(self):
        """Gets the file_source of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The file_source of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._file_source

    @file_source.setter
    def file_source(self, file_source):
        """Sets the file_source of this SessionActivityEntryAttributes.


        :param file_source: The file_source of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._file_source = file_source

    @property
    def ip_address(self):
        """Gets the ip_address of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The ip_address of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this SessionActivityEntryAttributes.


        :param ip_address: The ip_address of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def operation(self):
        """Gets the operation of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The operation of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this SessionActivityEntryAttributes.


        :param operation: The operation of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def protocol(self):
        """Gets the protocol of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The protocol of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this SessionActivityEntryAttributes.


        :param protocol: The protocol of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def session_id(self):
        """Gets the session_id of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The session_id of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SessionActivityEntryAttributes.


        :param session_id: The session_id of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def status(self):
        """Gets the status of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The status of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SessionActivityEntryAttributes.


        :param status: The status of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def username(self):
        """Gets the username of this SessionActivityEntryAttributes.  # noqa: E501


        :return: The username of this SessionActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SessionActivityEntryAttributes.


        :param username: The username of this SessionActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionActivityEntryAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionActivityEntryAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
