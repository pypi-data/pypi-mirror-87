# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageSourcesPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGaborImageSourcePython
else:
    import _itkGaborImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGaborImageSourcePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGaborImageSourcePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkGenerateImageSourcePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython

def itkGaborImageSourceID2_New():
    return itkGaborImageSourceID2.New()

class itkGaborImageSourceID2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID2):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceID2___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceID2
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceID2_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceID2

        Create a new object of the class itkGaborImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceID2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceID2_swigregister(itkGaborImageSourceID2)
itkGaborImageSourceID2___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceID2___New_orig__
itkGaborImageSourceID2_cast = _itkGaborImageSourcePython.itkGaborImageSourceID2_cast


def itkGaborImageSourceID3_New():
    return itkGaborImageSourceID3.New()

class itkGaborImageSourceID3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID3):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceID3___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceID3
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceID3_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceID3

        Create a new object of the class itkGaborImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceID3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceID3_swigregister(itkGaborImageSourceID3)
itkGaborImageSourceID3___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceID3___New_orig__
itkGaborImageSourceID3_cast = _itkGaborImageSourcePython.itkGaborImageSourceID3_cast


def itkGaborImageSourceIF2_New():
    return itkGaborImageSourceIF2.New()

class itkGaborImageSourceIF2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF2):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIF2
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIF2_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIF2

        Create a new object of the class itkGaborImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIF2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIF2_swigregister(itkGaborImageSourceIF2)
itkGaborImageSourceIF2___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceIF2___New_orig__
itkGaborImageSourceIF2_cast = _itkGaborImageSourcePython.itkGaborImageSourceIF2_cast


def itkGaborImageSourceIF3_New():
    return itkGaborImageSourceIF3.New()

class itkGaborImageSourceIF3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF3):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIF3
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIF3_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIF3

        Create a new object of the class itkGaborImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIF3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIF3_swigregister(itkGaborImageSourceIF3)
itkGaborImageSourceIF3___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceIF3___New_orig__
itkGaborImageSourceIF3_cast = _itkGaborImageSourcePython.itkGaborImageSourceIF3_cast


def itkGaborImageSourceISS2_New():
    return itkGaborImageSourceISS2.New()

class itkGaborImageSourceISS2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISS2):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceISS2
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceISS2_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceISS2

        Create a new object of the class itkGaborImageSourceISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceISS2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceISS2_swigregister(itkGaborImageSourceISS2)
itkGaborImageSourceISS2___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceISS2___New_orig__
itkGaborImageSourceISS2_cast = _itkGaborImageSourcePython.itkGaborImageSourceISS2_cast


def itkGaborImageSourceISS3_New():
    return itkGaborImageSourceISS3.New()

class itkGaborImageSourceISS3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceISS3):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceISS3
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceISS3_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceISS3

        Create a new object of the class itkGaborImageSourceISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceISS3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceISS3_swigregister(itkGaborImageSourceISS3)
itkGaborImageSourceISS3___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceISS3___New_orig__
itkGaborImageSourceISS3_cast = _itkGaborImageSourcePython.itkGaborImageSourceISS3_cast


def itkGaborImageSourceIUC2_New():
    return itkGaborImageSourceIUC2.New()

class itkGaborImageSourceIUC2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUC2):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUC2
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUC2

        Create a new object of the class itkGaborImageSourceIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUC2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUC2_swigregister(itkGaborImageSourceIUC2)
itkGaborImageSourceIUC2___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceIUC2___New_orig__
itkGaborImageSourceIUC2_cast = _itkGaborImageSourcePython.itkGaborImageSourceIUC2_cast


def itkGaborImageSourceIUC3_New():
    return itkGaborImageSourceIUC3.New()

class itkGaborImageSourceIUC3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUC3):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUC3
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUC3

        Create a new object of the class itkGaborImageSourceIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUC3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUC3_swigregister(itkGaborImageSourceIUC3)
itkGaborImageSourceIUC3___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceIUC3___New_orig__
itkGaborImageSourceIUC3_cast = _itkGaborImageSourcePython.itkGaborImageSourceIUC3_cast


def itkGaborImageSourceIUS2_New():
    return itkGaborImageSourceIUS2.New()

class itkGaborImageSourceIUS2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUS2):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUS2
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUS2

        Create a new object of the class itkGaborImageSourceIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUS2 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUS2_swigregister(itkGaborImageSourceIUS2)
itkGaborImageSourceIUS2___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceIUS2___New_orig__
itkGaborImageSourceIUS2_cast = _itkGaborImageSourcePython.itkGaborImageSourceIUS2_cast


def itkGaborImageSourceIUS3_New():
    return itkGaborImageSourceIUS3.New()

class itkGaborImageSourceIUS3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIUS3):
    r"""


    Generate an n-dimensional image of a Gabor filter.

    GaborImageSource generates an image of either the real (i.e.
    symmetric) or complex (i.e. antisymmetric) part of the Gabor filter
    with the orientation directed along the x-axis. The
    GaborKernelFunction is used to evaluate the contribution along the
    x-axis whereas a non-normalized 1-D Gaussian envelope provides the
    contribution in each of the remaining N dimensions. Orientation can be
    manipulated via the Transform classes of the toolkit.

    The output image may be of any dimension.

    This implementation was contributed as a paper to the Insight
    Journalhttps://hdl.handle.net/1926/500 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_Clone)
    SetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_GetSigma)
    SetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_SetMean)
    GetMean = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_GetMean)
    SetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_GetFrequency)
    SetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_SetCalculateImaginaryPart)
    GetCalculateImaginaryPart = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_GetCalculateImaginaryPart)
    CalculateImaginaryPartOn = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_CalculateImaginaryPartOn)
    CalculateImaginaryPartOff = _swig_new_instance_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_CalculateImaginaryPartOff)
    __swig_destroy__ = _itkGaborImageSourcePython.delete_itkGaborImageSourceIUS3
    cast = _swig_new_static_method(_itkGaborImageSourcePython.itkGaborImageSourceIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkGaborImageSourceIUS3

        Create a new object of the class itkGaborImageSourceIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGaborImageSourceIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGaborImageSourceIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGaborImageSourceIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGaborImageSourceIUS3 in _itkGaborImageSourcePython:
_itkGaborImageSourcePython.itkGaborImageSourceIUS3_swigregister(itkGaborImageSourceIUS3)
itkGaborImageSourceIUS3___New_orig__ = _itkGaborImageSourcePython.itkGaborImageSourceIUS3___New_orig__
itkGaborImageSourceIUS3_cast = _itkGaborImageSourcePython.itkGaborImageSourceIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def gabor_image_source(*args, **kwargs):
    """Procedural interface for GaborImageSource"""
    import itk
    instance = itk.GaborImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def gabor_image_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.GaborImageSource, itkTemplate.itkTemplate):
        filter_object = itk.GaborImageSource.values()[0]
    else:
        filter_object = itk.GaborImageSource

    gabor_image_source.__doc__ = filter_object.__doc__
    gabor_image_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    gabor_image_source.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.GaborImageSource, itkTemplate.itkTemplate):
        gabor_image_source.__doc__ += itkHelpers.filter_args(filter_object)[0]
        gabor_image_source.__doc__ += "\n"
        gabor_image_source.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        gabor_image_source.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



