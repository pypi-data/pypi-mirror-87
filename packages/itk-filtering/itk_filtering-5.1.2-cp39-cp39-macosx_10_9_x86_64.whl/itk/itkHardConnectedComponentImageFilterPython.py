# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKConnectedComponentsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHardConnectedComponentImageFilterPython
else:
    import _itkHardConnectedComponentImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHardConnectedComponentImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHardConnectedComponentImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkHardConnectedComponentImageFilterISS2ISS2_New():
    return itkHardConnectedComponentImageFilterISS2ISS2.New()

class itkHardConnectedComponentImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterISS2ISS2

        Create a new object of the class itkHardConnectedComponentImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterISS2ISS2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_swigregister(itkHardConnectedComponentImageFilterISS2ISS2)
itkHardConnectedComponentImageFilterISS2ISS2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2___New_orig__
itkHardConnectedComponentImageFilterISS2ISS2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2ISS2_cast


def itkHardConnectedComponentImageFilterISS2IUL2_New():
    return itkHardConnectedComponentImageFilterISS2IUL2.New()

class itkHardConnectedComponentImageFilterISS2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUL2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterISS2IUL2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterISS2IUL2

        Create a new object of the class itkHardConnectedComponentImageFilterISS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterISS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterISS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterISS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterISS2IUL2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_swigregister(itkHardConnectedComponentImageFilterISS2IUL2)
itkHardConnectedComponentImageFilterISS2IUL2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2___New_orig__
itkHardConnectedComponentImageFilterISS2IUL2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUL2_cast


def itkHardConnectedComponentImageFilterISS2IUS2_New():
    return itkHardConnectedComponentImageFilterISS2IUS2.New()

class itkHardConnectedComponentImageFilterISS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterISS2IUS2

        Create a new object of the class itkHardConnectedComponentImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterISS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterISS2IUS2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_swigregister(itkHardConnectedComponentImageFilterISS2IUS2)
itkHardConnectedComponentImageFilterISS2IUS2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2___New_orig__
itkHardConnectedComponentImageFilterISS2IUS2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS2IUS2_cast


def itkHardConnectedComponentImageFilterISS3ISS3_New():
    return itkHardConnectedComponentImageFilterISS3ISS3.New()

class itkHardConnectedComponentImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterISS3ISS3

        Create a new object of the class itkHardConnectedComponentImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterISS3ISS3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_swigregister(itkHardConnectedComponentImageFilterISS3ISS3)
itkHardConnectedComponentImageFilterISS3ISS3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3___New_orig__
itkHardConnectedComponentImageFilterISS3ISS3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3ISS3_cast


def itkHardConnectedComponentImageFilterISS3IUL3_New():
    return itkHardConnectedComponentImageFilterISS3IUL3.New()

class itkHardConnectedComponentImageFilterISS3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUL3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterISS3IUL3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterISS3IUL3

        Create a new object of the class itkHardConnectedComponentImageFilterISS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterISS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterISS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterISS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterISS3IUL3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_swigregister(itkHardConnectedComponentImageFilterISS3IUL3)
itkHardConnectedComponentImageFilterISS3IUL3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3___New_orig__
itkHardConnectedComponentImageFilterISS3IUL3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUL3_cast


def itkHardConnectedComponentImageFilterISS3IUS3_New():
    return itkHardConnectedComponentImageFilterISS3IUS3.New()

class itkHardConnectedComponentImageFilterISS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterISS3IUS3

        Create a new object of the class itkHardConnectedComponentImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterISS3IUS3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_swigregister(itkHardConnectedComponentImageFilterISS3IUS3)
itkHardConnectedComponentImageFilterISS3IUS3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3___New_orig__
itkHardConnectedComponentImageFilterISS3IUS3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterISS3IUS3_cast


def itkHardConnectedComponentImageFilterIUC2ISS2_New():
    return itkHardConnectedComponentImageFilterIUC2ISS2.New()

class itkHardConnectedComponentImageFilterIUC2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUC2ISS2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUC2ISS2

        Create a new object of the class itkHardConnectedComponentImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUC2ISS2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_swigregister(itkHardConnectedComponentImageFilterIUC2ISS2)
itkHardConnectedComponentImageFilterIUC2ISS2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2___New_orig__
itkHardConnectedComponentImageFilterIUC2ISS2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2ISS2_cast


def itkHardConnectedComponentImageFilterIUC2IUL2_New():
    return itkHardConnectedComponentImageFilterIUC2IUL2.New()

class itkHardConnectedComponentImageFilterIUC2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUL2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUC2IUL2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUC2IUL2

        Create a new object of the class itkHardConnectedComponentImageFilterIUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUC2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUC2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUC2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUC2IUL2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_swigregister(itkHardConnectedComponentImageFilterIUC2IUL2)
itkHardConnectedComponentImageFilterIUC2IUL2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2___New_orig__
itkHardConnectedComponentImageFilterIUC2IUL2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUL2_cast


def itkHardConnectedComponentImageFilterIUC2IUS2_New():
    return itkHardConnectedComponentImageFilterIUC2IUS2.New()

class itkHardConnectedComponentImageFilterIUC2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUC2IUS2

        Create a new object of the class itkHardConnectedComponentImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUC2IUS2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_swigregister(itkHardConnectedComponentImageFilterIUC2IUS2)
itkHardConnectedComponentImageFilterIUC2IUS2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2___New_orig__
itkHardConnectedComponentImageFilterIUC2IUS2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC2IUS2_cast


def itkHardConnectedComponentImageFilterIUC3ISS3_New():
    return itkHardConnectedComponentImageFilterIUC3ISS3.New()

class itkHardConnectedComponentImageFilterIUC3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUC3ISS3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUC3ISS3

        Create a new object of the class itkHardConnectedComponentImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUC3ISS3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_swigregister(itkHardConnectedComponentImageFilterIUC3ISS3)
itkHardConnectedComponentImageFilterIUC3ISS3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3___New_orig__
itkHardConnectedComponentImageFilterIUC3ISS3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3ISS3_cast


def itkHardConnectedComponentImageFilterIUC3IUL3_New():
    return itkHardConnectedComponentImageFilterIUC3IUL3.New()

class itkHardConnectedComponentImageFilterIUC3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUL3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUC3IUL3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUC3IUL3

        Create a new object of the class itkHardConnectedComponentImageFilterIUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUC3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUC3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUC3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUC3IUL3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_swigregister(itkHardConnectedComponentImageFilterIUC3IUL3)
itkHardConnectedComponentImageFilterIUC3IUL3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3___New_orig__
itkHardConnectedComponentImageFilterIUC3IUL3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUL3_cast


def itkHardConnectedComponentImageFilterIUC3IUS3_New():
    return itkHardConnectedComponentImageFilterIUC3IUS3.New()

class itkHardConnectedComponentImageFilterIUC3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUC3IUS3

        Create a new object of the class itkHardConnectedComponentImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUC3IUS3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_swigregister(itkHardConnectedComponentImageFilterIUC3IUS3)
itkHardConnectedComponentImageFilterIUC3IUS3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3___New_orig__
itkHardConnectedComponentImageFilterIUC3IUS3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUC3IUS3_cast


def itkHardConnectedComponentImageFilterIUS2ISS2_New():
    return itkHardConnectedComponentImageFilterIUS2ISS2.New()

class itkHardConnectedComponentImageFilterIUS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUS2ISS2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUS2ISS2

        Create a new object of the class itkHardConnectedComponentImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUS2ISS2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_swigregister(itkHardConnectedComponentImageFilterIUS2ISS2)
itkHardConnectedComponentImageFilterIUS2ISS2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2___New_orig__
itkHardConnectedComponentImageFilterIUS2ISS2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2ISS2_cast


def itkHardConnectedComponentImageFilterIUS2IUL2_New():
    return itkHardConnectedComponentImageFilterIUS2IUL2.New()

class itkHardConnectedComponentImageFilterIUS2IUL2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUL2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUS2IUL2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUS2IUL2

        Create a new object of the class itkHardConnectedComponentImageFilterIUS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUS2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUS2IUL2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_swigregister(itkHardConnectedComponentImageFilterIUS2IUL2)
itkHardConnectedComponentImageFilterIUS2IUL2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2___New_orig__
itkHardConnectedComponentImageFilterIUS2IUL2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUL2_cast


def itkHardConnectedComponentImageFilterIUS2IUS2_New():
    return itkHardConnectedComponentImageFilterIUS2IUS2.New()

class itkHardConnectedComponentImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUS2IUS2

        Create a new object of the class itkHardConnectedComponentImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUS2IUS2 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_swigregister(itkHardConnectedComponentImageFilterIUS2IUS2)
itkHardConnectedComponentImageFilterIUS2IUS2___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2___New_orig__
itkHardConnectedComponentImageFilterIUS2IUS2_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS2IUS2_cast


def itkHardConnectedComponentImageFilterIUS3ISS3_New():
    return itkHardConnectedComponentImageFilterIUS3ISS3.New()

class itkHardConnectedComponentImageFilterIUS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUS3ISS3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUS3ISS3

        Create a new object of the class itkHardConnectedComponentImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUS3ISS3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_swigregister(itkHardConnectedComponentImageFilterIUS3ISS3)
itkHardConnectedComponentImageFilterIUS3ISS3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3___New_orig__
itkHardConnectedComponentImageFilterIUS3ISS3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3ISS3_cast


def itkHardConnectedComponentImageFilterIUS3IUL3_New():
    return itkHardConnectedComponentImageFilterIUS3IUL3.New()

class itkHardConnectedComponentImageFilterIUS3IUL3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUL3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUS3IUL3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUS3IUL3

        Create a new object of the class itkHardConnectedComponentImageFilterIUS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUS3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUS3IUL3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_swigregister(itkHardConnectedComponentImageFilterIUS3IUL3)
itkHardConnectedComponentImageFilterIUS3IUL3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3___New_orig__
itkHardConnectedComponentImageFilterIUS3IUL3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUL3_cast


def itkHardConnectedComponentImageFilterIUS3IUS3_New():
    return itkHardConnectedComponentImageFilterIUS3IUS3.New()

class itkHardConnectedComponentImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    The purpose of this program is to produce the connected components for
    any input binary image of dimensionality n.

    The program does a forward pass line by line through the entire image.
    Each cell in the foreground is assigned the same label value as cells
    in its neighborhood. If there is no label among the cells in its
    neighborhood, a new label value is assigned to the cell. This means
    that this cell belongs to a different connected component. We set up
    an equivalence table for each label to indicate the equivalence of the
    labels stored in the table. After the forward pass goes through the
    entire image, we merge the different connected components
    corresponding to the equivalence labels in the table. We implement
    this strategy in the function GenerateData().

    There are two options in the program. Take an nD binary image as
    input, and produce an nD gray image, where intensity indicates label
    assigned to a connected component.

    Take an nD binary image and a set of seed points as input, and output
    an nD binary image containing the cells connected to the seeds. For
    option 2, users need to assign the member variable
    std::list<IndexType> m_Seeds before calling function GenerateData().
    See:  ImageToImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_Clone)
    SetObjectSeed = _swig_new_instance_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_SetObjectSeed)
    SameDimensionCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_SameDimensionCheck
    
    IntConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_IntConvertibleToOutputCheck
    
    UnsignedShortConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_UnsignedShortConvertibleToOutputCheck
    
    OutputEqualityComparableCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_OutputEqualityComparableCheck
    
    UnsignedCharConvertibleToOutputCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_UnsignedCharConvertibleToOutputCheck
    
    OutputIncrementDecrementOperatorsCheck = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_OutputIncrementDecrementOperatorsCheck
    
    __swig_destroy__ = _itkHardConnectedComponentImageFilterPython.delete_itkHardConnectedComponentImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkHardConnectedComponentImageFilterIUS3IUS3

        Create a new object of the class itkHardConnectedComponentImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHardConnectedComponentImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHardConnectedComponentImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHardConnectedComponentImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHardConnectedComponentImageFilterIUS3IUS3 in _itkHardConnectedComponentImageFilterPython:
_itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_swigregister(itkHardConnectedComponentImageFilterIUS3IUS3)
itkHardConnectedComponentImageFilterIUS3IUS3___New_orig__ = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3___New_orig__
itkHardConnectedComponentImageFilterIUS3IUS3_cast = _itkHardConnectedComponentImageFilterPython.itkHardConnectedComponentImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def hard_connected_component_image_filter(*args, **kwargs):
    """Procedural interface for HardConnectedComponentImageFilter"""
    import itk
    instance = itk.HardConnectedComponentImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def hard_connected_component_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HardConnectedComponentImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HardConnectedComponentImageFilter.values()[0]
    else:
        filter_object = itk.HardConnectedComponentImageFilter

    hard_connected_component_image_filter.__doc__ = filter_object.__doc__
    hard_connected_component_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    hard_connected_component_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HardConnectedComponentImageFilter, itkTemplate.itkTemplate):
        hard_connected_component_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        hard_connected_component_image_filter.__doc__ += "\n"
        hard_connected_component_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        hard_connected_component_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



