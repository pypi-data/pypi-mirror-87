# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FormEntryAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields': 'list[FormEntryField]',
        'paths': 'list[str]',
        'status': 'str',
        'created': 'datetime',
        'modified': 'datetime'
    }

    attribute_map = {
        'fields': 'fields',
        'paths': 'paths',
        'status': 'status',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, fields=None, paths=None, status=None, created=None, modified=None):  # noqa: E501
        """FormEntryAttributes - a model defined in Swagger"""  # noqa: E501
        self._fields = None
        self._paths = None
        self._status = None
        self._created = None
        self._modified = None
        self.discriminator = None
        if fields is not None:
            self.fields = fields
        if paths is not None:
            self.paths = paths
        if status is not None:
            self.status = status
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified

    @property
    def fields(self):
        """Gets the fields of this FormEntryAttributes.  # noqa: E501


        :return: The fields of this FormEntryAttributes.  # noqa: E501
        :rtype: list[FormEntryField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this FormEntryAttributes.


        :param fields: The fields of this FormEntryAttributes.  # noqa: E501
        :type: list[FormEntryField]
        """

        self._fields = fields

    @property
    def paths(self):
        """Gets the paths of this FormEntryAttributes.  # noqa: E501

        Full paths to files associated with the form submission  # noqa: E501

        :return: The paths of this FormEntryAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this FormEntryAttributes.

        Full paths to files associated with the form submission  # noqa: E501

        :param paths: The paths of this FormEntryAttributes.  # noqa: E501
        :type: list[str]
        """

        self._paths = paths

    @property
    def status(self):
        """Gets the status of this FormEntryAttributes.  # noqa: E501

        Form entry status  # noqa: E501

        :return: The status of this FormEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FormEntryAttributes.

        Form entry status  # noqa: E501

        :param status: The status of this FormEntryAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created(self):
        """Gets the created of this FormEntryAttributes.  # noqa: E501

        Timestamp of the submission  # noqa: E501

        :return: The created of this FormEntryAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this FormEntryAttributes.

        Timestamp of the submission  # noqa: E501

        :param created: The created of this FormEntryAttributes.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this FormEntryAttributes.  # noqa: E501

        Timestamp of the field modified date  # noqa: E501

        :return: The modified of this FormEntryAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this FormEntryAttributes.

        Timestamp of the field modified date  # noqa: E501

        :param modified: The modified of this FormEntryAttributes.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormEntryAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormEntryAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
