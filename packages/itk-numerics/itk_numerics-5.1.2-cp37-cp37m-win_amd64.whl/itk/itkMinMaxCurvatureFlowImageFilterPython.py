# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCurvatureFlowPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMinMaxCurvatureFlowImageFilterPython
else:
    import _itkMinMaxCurvatureFlowImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMinMaxCurvatureFlowImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMinMaxCurvatureFlowImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkCurvatureFlowImageFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython

def itkMinMaxCurvatureFlowImageFilterID2ID2_New():
    return itkMinMaxCurvatureFlowImageFilterID2ID2.New()

class itkMinMaxCurvatureFlowImageFilterID2ID2(itk.itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2):
    r"""


    Denoise an image using min/max curvature flow.

    MinMaxCurvatureFlowImageFilter implements a curvature driven image
    denoising algorithm. Iso- brightness contours in the grayscale input
    image are viewed as a level set. The level set is then evolved using a
    curvature-based speed function:

    \\[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\]

    where $ F_{\\mbox{minmax}} = \\max(\\kappa,0) $ if $
    \\mbox{Avg}_{\\mbox{stencil}}(x) $ is less than or equal to $
    T_{threshold} $ and $ \\min(\\kappa,0) $, otherwise. $ \\kappa $
    is the mean curvature of the iso-brightness contour at point $ x $.

    In min/max curvature flow, movement is turned on or off depending on
    the scale of the noise one wants to remove. Switching depends on the
    average image value of a region of radius $ R $ around each point. The
    choice of $ R $, the stencil radius, governs the scale of the noise to
    be removed.

    The threshold value $ T_{threshold} $ is the average intensity
    obtained in the direction perpendicular to the gradient at point $ x $
    at the extrema of the local neighborhood.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a MinMaxCurvatureFlowFunction
    object. A zero flux Neumann boundary condition is used when computing
    derivatives near the data boundary.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a real type. This filter works for any dimensional
    images, however for dimensions greater than 3D, an expensive brute-
    force search is used to compute the local threshold.  Reference:
    "Level Set Methods and Fast Marching Methods", J.A. Sethian,
    Cambridge Press, Chapter 16, Second edition, 1999.

    See:  MinMaxCurvatureFlowFunction

    See:   CurvatureFlowImageFilter

    See:   BinaryMinMaxCurvatureFlowImageFilter
    {Filtering/CurvatureFlow/SmoothImageUsingMinMaxCurvatureFlow,Smooth
    Image Using Min Max Curvature Flow} {Filtering/CurvatureFlow/SmoothRGB
    ImageUsingMinMaxCurvatureFlow,SmoothRGBImageUsingMinMaxCurvatureFlow}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_Clone)
    SetStencilRadius = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_SetStencilRadius)
    GetStencilRadius = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_GetStencilRadius)
    UnsignedLongConvertibleToOutputCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_UnsignedLongConvertibleToOutputCheck
    
    OutputLessThanComparableCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_OutputLessThanComparableCheck
    
    LongConvertibleToOutputCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_LongConvertibleToOutputCheck
    
    OutputDoubleComparableCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_OutputDoubleComparableCheck
    
    OutputDoubleMultiplyAndAssignOperatorCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_OutputDoubleMultiplyAndAssignOperatorCheck
    
    OutputGreaterThanUnsignedLongCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_OutputGreaterThanUnsignedLongCheck
    
    UnsignedLongOutputAditiveOperatorsCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_UnsignedLongOutputAditiveOperatorsCheck
    
    __swig_destroy__ = _itkMinMaxCurvatureFlowImageFilterPython.delete_itkMinMaxCurvatureFlowImageFilterID2ID2
    cast = _swig_new_static_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkMinMaxCurvatureFlowImageFilterID2ID2

        Create a new object of the class itkMinMaxCurvatureFlowImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinMaxCurvatureFlowImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinMaxCurvatureFlowImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinMaxCurvatureFlowImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinMaxCurvatureFlowImageFilterID2ID2 in _itkMinMaxCurvatureFlowImageFilterPython:
_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_swigregister(itkMinMaxCurvatureFlowImageFilterID2ID2)
itkMinMaxCurvatureFlowImageFilterID2ID2___New_orig__ = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2___New_orig__
itkMinMaxCurvatureFlowImageFilterID2ID2_cast = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID2ID2_cast


def itkMinMaxCurvatureFlowImageFilterID3ID3_New():
    return itkMinMaxCurvatureFlowImageFilterID3ID3.New()

class itkMinMaxCurvatureFlowImageFilterID3ID3(itk.itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3):
    r"""


    Denoise an image using min/max curvature flow.

    MinMaxCurvatureFlowImageFilter implements a curvature driven image
    denoising algorithm. Iso- brightness contours in the grayscale input
    image are viewed as a level set. The level set is then evolved using a
    curvature-based speed function:

    \\[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\]

    where $ F_{\\mbox{minmax}} = \\max(\\kappa,0) $ if $
    \\mbox{Avg}_{\\mbox{stencil}}(x) $ is less than or equal to $
    T_{threshold} $ and $ \\min(\\kappa,0) $, otherwise. $ \\kappa $
    is the mean curvature of the iso-brightness contour at point $ x $.

    In min/max curvature flow, movement is turned on or off depending on
    the scale of the noise one wants to remove. Switching depends on the
    average image value of a region of radius $ R $ around each point. The
    choice of $ R $, the stencil radius, governs the scale of the noise to
    be removed.

    The threshold value $ T_{threshold} $ is the average intensity
    obtained in the direction perpendicular to the gradient at point $ x $
    at the extrema of the local neighborhood.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a MinMaxCurvatureFlowFunction
    object. A zero flux Neumann boundary condition is used when computing
    derivatives near the data boundary.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a real type. This filter works for any dimensional
    images, however for dimensions greater than 3D, an expensive brute-
    force search is used to compute the local threshold.  Reference:
    "Level Set Methods and Fast Marching Methods", J.A. Sethian,
    Cambridge Press, Chapter 16, Second edition, 1999.

    See:  MinMaxCurvatureFlowFunction

    See:   CurvatureFlowImageFilter

    See:   BinaryMinMaxCurvatureFlowImageFilter
    {Filtering/CurvatureFlow/SmoothImageUsingMinMaxCurvatureFlow,Smooth
    Image Using Min Max Curvature Flow} {Filtering/CurvatureFlow/SmoothRGB
    ImageUsingMinMaxCurvatureFlow,SmoothRGBImageUsingMinMaxCurvatureFlow}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_Clone)
    SetStencilRadius = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_SetStencilRadius)
    GetStencilRadius = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_GetStencilRadius)
    UnsignedLongConvertibleToOutputCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_UnsignedLongConvertibleToOutputCheck
    
    OutputLessThanComparableCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_OutputLessThanComparableCheck
    
    LongConvertibleToOutputCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_LongConvertibleToOutputCheck
    
    OutputDoubleComparableCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_OutputDoubleComparableCheck
    
    OutputDoubleMultiplyAndAssignOperatorCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_OutputDoubleMultiplyAndAssignOperatorCheck
    
    OutputGreaterThanUnsignedLongCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_OutputGreaterThanUnsignedLongCheck
    
    UnsignedLongOutputAditiveOperatorsCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_UnsignedLongOutputAditiveOperatorsCheck
    
    __swig_destroy__ = _itkMinMaxCurvatureFlowImageFilterPython.delete_itkMinMaxCurvatureFlowImageFilterID3ID3
    cast = _swig_new_static_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkMinMaxCurvatureFlowImageFilterID3ID3

        Create a new object of the class itkMinMaxCurvatureFlowImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinMaxCurvatureFlowImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinMaxCurvatureFlowImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinMaxCurvatureFlowImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinMaxCurvatureFlowImageFilterID3ID3 in _itkMinMaxCurvatureFlowImageFilterPython:
_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_swigregister(itkMinMaxCurvatureFlowImageFilterID3ID3)
itkMinMaxCurvatureFlowImageFilterID3ID3___New_orig__ = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3___New_orig__
itkMinMaxCurvatureFlowImageFilterID3ID3_cast = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterID3ID3_cast


def itkMinMaxCurvatureFlowImageFilterIF2IF2_New():
    return itkMinMaxCurvatureFlowImageFilterIF2IF2.New()

class itkMinMaxCurvatureFlowImageFilterIF2IF2(itk.itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2):
    r"""


    Denoise an image using min/max curvature flow.

    MinMaxCurvatureFlowImageFilter implements a curvature driven image
    denoising algorithm. Iso- brightness contours in the grayscale input
    image are viewed as a level set. The level set is then evolved using a
    curvature-based speed function:

    \\[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\]

    where $ F_{\\mbox{minmax}} = \\max(\\kappa,0) $ if $
    \\mbox{Avg}_{\\mbox{stencil}}(x) $ is less than or equal to $
    T_{threshold} $ and $ \\min(\\kappa,0) $, otherwise. $ \\kappa $
    is the mean curvature of the iso-brightness contour at point $ x $.

    In min/max curvature flow, movement is turned on or off depending on
    the scale of the noise one wants to remove. Switching depends on the
    average image value of a region of radius $ R $ around each point. The
    choice of $ R $, the stencil radius, governs the scale of the noise to
    be removed.

    The threshold value $ T_{threshold} $ is the average intensity
    obtained in the direction perpendicular to the gradient at point $ x $
    at the extrema of the local neighborhood.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a MinMaxCurvatureFlowFunction
    object. A zero flux Neumann boundary condition is used when computing
    derivatives near the data boundary.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a real type. This filter works for any dimensional
    images, however for dimensions greater than 3D, an expensive brute-
    force search is used to compute the local threshold.  Reference:
    "Level Set Methods and Fast Marching Methods", J.A. Sethian,
    Cambridge Press, Chapter 16, Second edition, 1999.

    See:  MinMaxCurvatureFlowFunction

    See:   CurvatureFlowImageFilter

    See:   BinaryMinMaxCurvatureFlowImageFilter
    {Filtering/CurvatureFlow/SmoothImageUsingMinMaxCurvatureFlow,Smooth
    Image Using Min Max Curvature Flow} {Filtering/CurvatureFlow/SmoothRGB
    ImageUsingMinMaxCurvatureFlow,SmoothRGBImageUsingMinMaxCurvatureFlow}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_Clone)
    SetStencilRadius = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_SetStencilRadius)
    GetStencilRadius = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_GetStencilRadius)
    UnsignedLongConvertibleToOutputCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_UnsignedLongConvertibleToOutputCheck
    
    OutputLessThanComparableCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_OutputLessThanComparableCheck
    
    LongConvertibleToOutputCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_LongConvertibleToOutputCheck
    
    OutputDoubleComparableCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_OutputDoubleComparableCheck
    
    OutputDoubleMultiplyAndAssignOperatorCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_OutputDoubleMultiplyAndAssignOperatorCheck
    
    OutputGreaterThanUnsignedLongCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_OutputGreaterThanUnsignedLongCheck
    
    UnsignedLongOutputAditiveOperatorsCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_UnsignedLongOutputAditiveOperatorsCheck
    
    __swig_destroy__ = _itkMinMaxCurvatureFlowImageFilterPython.delete_itkMinMaxCurvatureFlowImageFilterIF2IF2
    cast = _swig_new_static_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkMinMaxCurvatureFlowImageFilterIF2IF2

        Create a new object of the class itkMinMaxCurvatureFlowImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinMaxCurvatureFlowImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinMaxCurvatureFlowImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinMaxCurvatureFlowImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinMaxCurvatureFlowImageFilterIF2IF2 in _itkMinMaxCurvatureFlowImageFilterPython:
_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_swigregister(itkMinMaxCurvatureFlowImageFilterIF2IF2)
itkMinMaxCurvatureFlowImageFilterIF2IF2___New_orig__ = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2___New_orig__
itkMinMaxCurvatureFlowImageFilterIF2IF2_cast = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF2IF2_cast


def itkMinMaxCurvatureFlowImageFilterIF3IF3_New():
    return itkMinMaxCurvatureFlowImageFilterIF3IF3.New()

class itkMinMaxCurvatureFlowImageFilterIF3IF3(itk.itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3):
    r"""


    Denoise an image using min/max curvature flow.

    MinMaxCurvatureFlowImageFilter implements a curvature driven image
    denoising algorithm. Iso- brightness contours in the grayscale input
    image are viewed as a level set. The level set is then evolved using a
    curvature-based speed function:

    \\[ I_t = F_{\\mbox{minmax}} |\\nabla I| \\]

    where $ F_{\\mbox{minmax}} = \\max(\\kappa,0) $ if $
    \\mbox{Avg}_{\\mbox{stencil}}(x) $ is less than or equal to $
    T_{threshold} $ and $ \\min(\\kappa,0) $, otherwise. $ \\kappa $
    is the mean curvature of the iso-brightness contour at point $ x $.

    In min/max curvature flow, movement is turned on or off depending on
    the scale of the noise one wants to remove. Switching depends on the
    average image value of a region of radius $ R $ around each point. The
    choice of $ R $, the stencil radius, governs the scale of the noise to
    be removed.

    The threshold value $ T_{threshold} $ is the average intensity
    obtained in the direction perpendicular to the gradient at point $ x $
    at the extrema of the local neighborhood.

    This filter make use of the multi-threaded finite difference solver
    hierarchy. Updates are computed using a MinMaxCurvatureFlowFunction
    object. A zero flux Neumann boundary condition is used when computing
    derivatives near the data boundary.

    WARNING:  This filter assumes that the input and output types have the
    same dimensions. This filter also requires that the output image
    pixels are of a real type. This filter works for any dimensional
    images, however for dimensions greater than 3D, an expensive brute-
    force search is used to compute the local threshold.  Reference:
    "Level Set Methods and Fast Marching Methods", J.A. Sethian,
    Cambridge Press, Chapter 16, Second edition, 1999.

    See:  MinMaxCurvatureFlowFunction

    See:   CurvatureFlowImageFilter

    See:   BinaryMinMaxCurvatureFlowImageFilter
    {Filtering/CurvatureFlow/SmoothImageUsingMinMaxCurvatureFlow,Smooth
    Image Using Min Max Curvature Flow} {Filtering/CurvatureFlow/SmoothRGB
    ImageUsingMinMaxCurvatureFlow,SmoothRGBImageUsingMinMaxCurvatureFlow}

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_Clone)
    SetStencilRadius = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_SetStencilRadius)
    GetStencilRadius = _swig_new_instance_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_GetStencilRadius)
    UnsignedLongConvertibleToOutputCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_UnsignedLongConvertibleToOutputCheck
    
    OutputLessThanComparableCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_OutputLessThanComparableCheck
    
    LongConvertibleToOutputCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_LongConvertibleToOutputCheck
    
    OutputDoubleComparableCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_OutputDoubleComparableCheck
    
    OutputDoubleMultiplyAndAssignOperatorCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_OutputDoubleMultiplyAndAssignOperatorCheck
    
    OutputGreaterThanUnsignedLongCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_OutputGreaterThanUnsignedLongCheck
    
    UnsignedLongOutputAditiveOperatorsCheck = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_UnsignedLongOutputAditiveOperatorsCheck
    
    __swig_destroy__ = _itkMinMaxCurvatureFlowImageFilterPython.delete_itkMinMaxCurvatureFlowImageFilterIF3IF3
    cast = _swig_new_static_method(_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkMinMaxCurvatureFlowImageFilterIF3IF3

        Create a new object of the class itkMinMaxCurvatureFlowImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMinMaxCurvatureFlowImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMinMaxCurvatureFlowImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMinMaxCurvatureFlowImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMinMaxCurvatureFlowImageFilterIF3IF3 in _itkMinMaxCurvatureFlowImageFilterPython:
_itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_swigregister(itkMinMaxCurvatureFlowImageFilterIF3IF3)
itkMinMaxCurvatureFlowImageFilterIF3IF3___New_orig__ = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3___New_orig__
itkMinMaxCurvatureFlowImageFilterIF3IF3_cast = _itkMinMaxCurvatureFlowImageFilterPython.itkMinMaxCurvatureFlowImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def min_max_curvature_flow_image_filter(*args, **kwargs):
    """Procedural interface for MinMaxCurvatureFlowImageFilter"""
    import itk
    instance = itk.MinMaxCurvatureFlowImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def min_max_curvature_flow_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MinMaxCurvatureFlowImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.MinMaxCurvatureFlowImageFilter.values()[0]
    else:
        filter_object = itk.MinMaxCurvatureFlowImageFilter

    min_max_curvature_flow_image_filter.__doc__ = filter_object.__doc__
    min_max_curvature_flow_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    min_max_curvature_flow_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.MinMaxCurvatureFlowImageFilter, itkTemplate.itkTemplate):
        min_max_curvature_flow_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        min_max_curvature_flow_image_filter.__doc__ += "\n"
        min_max_curvature_flow_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        min_max_curvature_flow_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



