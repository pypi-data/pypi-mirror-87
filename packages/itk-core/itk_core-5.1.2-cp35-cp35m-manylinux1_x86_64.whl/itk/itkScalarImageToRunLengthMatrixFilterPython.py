# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScalarImageToRunLengthMatrixFilterPython
else:
    import _itkScalarImageToRunLengthMatrixFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkScalarImageToRunLengthMatrixFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkScalarImageToRunLengthMatrixFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkVectorContainerPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.itkArrayPython

def itkScalarImageToRunLengthMatrixFilterID2_New():
    return itkScalarImageToRunLengthMatrixFilterID2.New()

class itkScalarImageToRunLengthMatrixFilterID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterID2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterID2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterID2 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_swigregister(itkScalarImageToRunLengthMatrixFilterID2)
itkScalarImageToRunLengthMatrixFilterID2___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2___New_orig__
itkScalarImageToRunLengthMatrixFilterID2_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID2_cast


def itkScalarImageToRunLengthMatrixFilterID3_New():
    return itkScalarImageToRunLengthMatrixFilterID3.New()

class itkScalarImageToRunLengthMatrixFilterID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterID3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterID3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterID3 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_swigregister(itkScalarImageToRunLengthMatrixFilterID3)
itkScalarImageToRunLengthMatrixFilterID3___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3___New_orig__
itkScalarImageToRunLengthMatrixFilterID3_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterID3_cast


def itkScalarImageToRunLengthMatrixFilterIF2_New():
    return itkScalarImageToRunLengthMatrixFilterIF2.New()

class itkScalarImageToRunLengthMatrixFilterIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIF2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIF2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterIF2 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_swigregister(itkScalarImageToRunLengthMatrixFilterIF2)
itkScalarImageToRunLengthMatrixFilterIF2___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2___New_orig__
itkScalarImageToRunLengthMatrixFilterIF2_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF2_cast


def itkScalarImageToRunLengthMatrixFilterIF3_New():
    return itkScalarImageToRunLengthMatrixFilterIF3.New()

class itkScalarImageToRunLengthMatrixFilterIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIF3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIF3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterIF3 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_swigregister(itkScalarImageToRunLengthMatrixFilterIF3)
itkScalarImageToRunLengthMatrixFilterIF3___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3___New_orig__
itkScalarImageToRunLengthMatrixFilterIF3_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIF3_cast


def itkScalarImageToRunLengthMatrixFilterISS2_New():
    return itkScalarImageToRunLengthMatrixFilterISS2.New()

class itkScalarImageToRunLengthMatrixFilterISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterISS2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterISS2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterISS2 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_swigregister(itkScalarImageToRunLengthMatrixFilterISS2)
itkScalarImageToRunLengthMatrixFilterISS2___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2___New_orig__
itkScalarImageToRunLengthMatrixFilterISS2_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS2_cast


def itkScalarImageToRunLengthMatrixFilterISS3_New():
    return itkScalarImageToRunLengthMatrixFilterISS3.New()

class itkScalarImageToRunLengthMatrixFilterISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterISS3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterISS3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterISS3 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_swigregister(itkScalarImageToRunLengthMatrixFilterISS3)
itkScalarImageToRunLengthMatrixFilterISS3___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3___New_orig__
itkScalarImageToRunLengthMatrixFilterISS3_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterISS3_cast


def itkScalarImageToRunLengthMatrixFilterIUC2_New():
    return itkScalarImageToRunLengthMatrixFilterIUC2.New()

class itkScalarImageToRunLengthMatrixFilterIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIUC2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIUC2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterIUC2 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_swigregister(itkScalarImageToRunLengthMatrixFilterIUC2)
itkScalarImageToRunLengthMatrixFilterIUC2___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2___New_orig__
itkScalarImageToRunLengthMatrixFilterIUC2_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC2_cast


def itkScalarImageToRunLengthMatrixFilterIUC3_New():
    return itkScalarImageToRunLengthMatrixFilterIUC3.New()

class itkScalarImageToRunLengthMatrixFilterIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIUC3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIUC3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterIUC3 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_swigregister(itkScalarImageToRunLengthMatrixFilterIUC3)
itkScalarImageToRunLengthMatrixFilterIUC3___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3___New_orig__
itkScalarImageToRunLengthMatrixFilterIUC3_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUC3_cast


def itkScalarImageToRunLengthMatrixFilterIUS2_New():
    return itkScalarImageToRunLengthMatrixFilterIUS2.New()

class itkScalarImageToRunLengthMatrixFilterIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIUS2
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIUS2

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterIUS2 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_swigregister(itkScalarImageToRunLengthMatrixFilterIUS2)
itkScalarImageToRunLengthMatrixFilterIUS2___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2___New_orig__
itkScalarImageToRunLengthMatrixFilterIUS2_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS2_cast


def itkScalarImageToRunLengthMatrixFilterIUS3_New():
    return itkScalarImageToRunLengthMatrixFilterIUS3.New()

class itkScalarImageToRunLengthMatrixFilterIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    This class computes a run length matrix (histogram) from a given image
    and a mask image if provided. Run length matrices are used for image
    texture description.

    This filters creates a grey-level run length matrix from a N-D scalar
    image. This is another possible texture description. See the following
    references. M. M. Galloway. Texture analysis using gray level run
    lengths. Computer Graphics and Image Processing, 4:172-179, 1975.

    A. Chu, C. M. Sehgal, and J. F. Greenleaf. Use of gray value
    distribution of run lengths for texture analysis. Pattern Recognition
    Letters, 11:415-420, 1990.

    B. R. Dasarathy and E. B. Holder. Image characterizations based on
    joint gray-level run-length distributions. Pattern Recognition
    Letters, 12:490-502, 1991.

    The basic idea is as follows: Given an image and an offset (e.g. (1,
    -1) for a 2-d image), each element in the joint histogram describes
    the frequency for a particular distance/ intensity pair within a given
    image. This distance/intensity pair can be described as follows: we
    start at a given voxel which has some intensity. We then "jump" to
    neighboring pixels in increments provided by the offset(s) as long as
    the pixel to which we are jumping is within the same intensity bin as
    the original voxel. The distance component is given by the distance
    from the original to the final voxel satisfying our jumping criteria.

    The offset (or offsets) along which the co-occurences are calculated
    can be set by the user. Traditionally, only one offset is used per
    histogram, and offset components in the range [-1, 1] are used. For
    rotation-invariant features averages of features computed over several
    histograms with different offsets are generally used, instead of
    computing features from one histogram create with several offsets.
    Additionally, instead of using offsets of two or more pixels in any
    direction, multi-resolution techniques (e.g. image pyramids) are
    generally used to deal with texture at different spatial resolutions.

    This class calculates a 2-d histogram of all the intensity/distance
    pairs in the given image's requested region, for a given set of
    offsets. That is, if a given offset falls outside of the requested
    region (or outside the mask) at a particular point, that
    distance/intensity pair will not be added to the matrix.

    The number of histogram bins on each axis can be set (defaults to
    256). Also, by default the histogram min and max corresponds to the
    largest and smallest possible pixel value of that pixel type. To
    customize the histogram bounds for a given image, the max and min
    pixel values that will be placed in the histogram can be set manually.
    NB: The min and max are INCLUSIVE.

    Further, the type of histogram frequency container used is an optional
    template parameter. By default, a dense container is used, but for
    images with little texture or in cases where the user wants more
    histogram bins, a sparse container can be used for the histogram
    instead.

    WARNING: This probably won't work for pixels of double or long-double
    type unless you set the histogram min and max manually. This is
    because the largest histogram bin by default has max value of the
    largest possible pixel value plus 1. For double and long-double types,
    whose "RealType" as defined by the NumericTraits class is the same,
    and thus cannot hold any larger values, this would cause a float
    overflow.

    IJ article:https://hdl.handle.net/1926/1374

    See:   ScalarImageToRunLengthFeaturesFilter

    See:   ScalarImageToRunLengthMatrixFilter

    See:   HistogramToRunLengthFeaturesFilter

    : Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_Clone)
    SetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetOffsets)
    SetOffset = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetOffset)
    GetModifiableOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetModifiableOffsets)
    GetOffsets = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetOffsets)
    SetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetNumberOfBinsPerAxis)
    GetNumberOfBinsPerAxis = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetNumberOfBinsPerAxis)
    SetPixelValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetPixelValueMinMax)
    GetMin = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMin)
    GetMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMax)
    SetDistanceValueMinMax = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetDistanceValueMinMax)
    GetMinDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMinDistance)
    GetMaxDistance = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMaxDistance)
    SetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetInput)
    SetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetMaskImage)
    GetOutput = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetOutput)
    SetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_SetInsidePixelValue)
    GetInsidePixelValue = _swig_new_instance_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_GetInsidePixelValue)
    __swig_destroy__ = _itkScalarImageToRunLengthMatrixFilterPython.delete_itkScalarImageToRunLengthMatrixFilterIUS3
    cast = _swig_new_static_method(_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageToRunLengthMatrixFilterIUS3

        Create a new object of the class itkScalarImageToRunLengthMatrixFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageToRunLengthMatrixFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageToRunLengthMatrixFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageToRunLengthMatrixFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageToRunLengthMatrixFilterIUS3 in _itkScalarImageToRunLengthMatrixFilterPython:
_itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_swigregister(itkScalarImageToRunLengthMatrixFilterIUS3)
itkScalarImageToRunLengthMatrixFilterIUS3___New_orig__ = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3___New_orig__
itkScalarImageToRunLengthMatrixFilterIUS3_cast = _itkScalarImageToRunLengthMatrixFilterPython.itkScalarImageToRunLengthMatrixFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def scalar_image_to_run_length_matrix_filter(*args, **kwargs):
    """Procedural interface for ScalarImageToRunLengthMatrixFilter"""
    import itk
    instance = itk.ScalarImageToRunLengthMatrixFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def scalar_image_to_run_length_matrix_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ScalarImageToRunLengthMatrixFilter, itkTemplate.itkTemplate):
        filter_object = itk.ScalarImageToRunLengthMatrixFilter.values()[0]
    else:
        filter_object = itk.ScalarImageToRunLengthMatrixFilter

    scalar_image_to_run_length_matrix_filter.__doc__ = filter_object.__doc__
    scalar_image_to_run_length_matrix_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    scalar_image_to_run_length_matrix_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ScalarImageToRunLengthMatrixFilter, itkTemplate.itkTemplate):
        scalar_image_to_run_length_matrix_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        scalar_image_to_run_length_matrix_filter.__doc__ += "\n"
        scalar_image_to_run_length_matrix_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        scalar_image_to_run_length_matrix_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



