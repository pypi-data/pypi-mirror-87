# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFunctionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNearestNeighborInterpolateImageFunctionPython
else:
    import _itkNearestNeighborInterpolateImageFunctionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNearestNeighborInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNearestNeighborInterpolateImageFunctionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkContinuousIndexPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkInterpolateImageFunctionPython
import itk.itkRGBPixelPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageFunctionBasePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkFunctionBasePython
import itk.itkArrayPython

def itkNearestNeighborInterpolateImageFunctionID2D_New():
    return itkNearestNeighborInterpolateImageFunctionID2D.New()

class itkNearestNeighborInterpolateImageFunctionID2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionID2D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionID2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionID2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D_swigregister(itkNearestNeighborInterpolateImageFunctionID2D)
itkNearestNeighborInterpolateImageFunctionID2D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D___New_orig__
itkNearestNeighborInterpolateImageFunctionID2D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID2D_cast


def itkNearestNeighborInterpolateImageFunctionID3D_New():
    return itkNearestNeighborInterpolateImageFunctionID3D.New()

class itkNearestNeighborInterpolateImageFunctionID3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionID3D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionID3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionID3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D_swigregister(itkNearestNeighborInterpolateImageFunctionID3D)
itkNearestNeighborInterpolateImageFunctionID3D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D___New_orig__
itkNearestNeighborInterpolateImageFunctionID3D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionID3D_cast


def itkNearestNeighborInterpolateImageFunctionIF2D_New():
    return itkNearestNeighborInterpolateImageFunctionIF2D.New()

class itkNearestNeighborInterpolateImageFunctionIF2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIF2D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIF2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIF2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIF2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIF2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D_swigregister(itkNearestNeighborInterpolateImageFunctionIF2D)
itkNearestNeighborInterpolateImageFunctionIF2D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D___New_orig__
itkNearestNeighborInterpolateImageFunctionIF2D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF2D_cast


def itkNearestNeighborInterpolateImageFunctionIF3D_New():
    return itkNearestNeighborInterpolateImageFunctionIF3D.New()

class itkNearestNeighborInterpolateImageFunctionIF3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIF3D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIF3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIF3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D_swigregister(itkNearestNeighborInterpolateImageFunctionIF3D)
itkNearestNeighborInterpolateImageFunctionIF3D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D___New_orig__
itkNearestNeighborInterpolateImageFunctionIF3D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIF3D_cast


def itkNearestNeighborInterpolateImageFunctionISS2D_New():
    return itkNearestNeighborInterpolateImageFunctionISS2D.New()

class itkNearestNeighborInterpolateImageFunctionISS2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS2D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionISS2D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionISS2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionISS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionISS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionISS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionISS2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D_swigregister(itkNearestNeighborInterpolateImageFunctionISS2D)
itkNearestNeighborInterpolateImageFunctionISS2D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D___New_orig__
itkNearestNeighborInterpolateImageFunctionISS2D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS2D_cast


def itkNearestNeighborInterpolateImageFunctionISS3D_New():
    return itkNearestNeighborInterpolateImageFunctionISS3D.New()

class itkNearestNeighborInterpolateImageFunctionISS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionISS3D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionISS3D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionISS3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionISS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionISS3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D_swigregister(itkNearestNeighborInterpolateImageFunctionISS3D)
itkNearestNeighborInterpolateImageFunctionISS3D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D___New_orig__
itkNearestNeighborInterpolateImageFunctionISS3D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionISS3D_cast


def itkNearestNeighborInterpolateImageFunctionIUC2D_New():
    return itkNearestNeighborInterpolateImageFunctionIUC2D.New()

class itkNearestNeighborInterpolateImageFunctionIUC2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUC2D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUC2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUC2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D_swigregister(itkNearestNeighborInterpolateImageFunctionIUC2D)
itkNearestNeighborInterpolateImageFunctionIUC2D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D___New_orig__
itkNearestNeighborInterpolateImageFunctionIUC2D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC2D_cast


def itkNearestNeighborInterpolateImageFunctionIUC3D_New():
    return itkNearestNeighborInterpolateImageFunctionIUC3D.New()

class itkNearestNeighborInterpolateImageFunctionIUC3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUC3D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUC3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUC3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D_swigregister(itkNearestNeighborInterpolateImageFunctionIUC3D)
itkNearestNeighborInterpolateImageFunctionIUC3D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D___New_orig__
itkNearestNeighborInterpolateImageFunctionIUC3D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUC3D_cast


def itkNearestNeighborInterpolateImageFunctionIUS2D_New():
    return itkNearestNeighborInterpolateImageFunctionIUS2D.New()

class itkNearestNeighborInterpolateImageFunctionIUS2D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUS2D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUS2D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUS2D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D_swigregister(itkNearestNeighborInterpolateImageFunctionIUS2D)
itkNearestNeighborInterpolateImageFunctionIUS2D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D___New_orig__
itkNearestNeighborInterpolateImageFunctionIUS2D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS2D_cast


def itkNearestNeighborInterpolateImageFunctionIUS3D_New():
    return itkNearestNeighborInterpolateImageFunctionIUS3D.New()

class itkNearestNeighborInterpolateImageFunctionIUS3D(itk.itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    r"""


    Nearest neighbor interpolation of a scalar image.

    NearestNeighborInterpolateImageFunction interpolates image intensity
    at a non-integer pixel position by copying the intensity for the
    nearest neighbor. This class is templated over the input image type
    and the coordinate representation type (e.g. float or double). 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D_Clone)
    __swig_destroy__ = _itkNearestNeighborInterpolateImageFunctionPython.delete_itkNearestNeighborInterpolateImageFunctionIUS3D
    cast = _swig_new_static_method(_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D_cast)

    def New(*args, **kargs):
        """New() -> itkNearestNeighborInterpolateImageFunctionIUS3D

        Create a new object of the class itkNearestNeighborInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNearestNeighborInterpolateImageFunctionIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNearestNeighborInterpolateImageFunctionIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNearestNeighborInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNearestNeighborInterpolateImageFunctionIUS3D in _itkNearestNeighborInterpolateImageFunctionPython:
_itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D_swigregister(itkNearestNeighborInterpolateImageFunctionIUS3D)
itkNearestNeighborInterpolateImageFunctionIUS3D___New_orig__ = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D___New_orig__
itkNearestNeighborInterpolateImageFunctionIUS3D_cast = _itkNearestNeighborInterpolateImageFunctionPython.itkNearestNeighborInterpolateImageFunctionIUS3D_cast



