# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHessianRecursiveGaussianImageFilterPython
else:
    import _itkHessianRecursiveGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHessianRecursiveGaussianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHessianRecursiveGaussianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkHessianRecursiveGaussianImageFilterID2_New():
    return itkHessianRecursiveGaussianImageFilterID2.New()

class itkHessianRecursiveGaussianImageFilterID2(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ISSRTD22):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterID2
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterID2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterID2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_swigregister(itkHessianRecursiveGaussianImageFilterID2)
itkHessianRecursiveGaussianImageFilterID2___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2___New_orig__
itkHessianRecursiveGaussianImageFilterID2_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID2_cast


def itkHessianRecursiveGaussianImageFilterID3_New():
    return itkHessianRecursiveGaussianImageFilterID3.New()

class itkHessianRecursiveGaussianImageFilterID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3ISSRTD33):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterID3
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterID3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterID3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_swigregister(itkHessianRecursiveGaussianImageFilterID3)
itkHessianRecursiveGaussianImageFilterID3___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3___New_orig__
itkHessianRecursiveGaussianImageFilterID3_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterID3_cast


def itkHessianRecursiveGaussianImageFilterIF2_New():
    return itkHessianRecursiveGaussianImageFilterIF2.New()

class itkHessianRecursiveGaussianImageFilterIF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ISSRTD22):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIF2
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIF2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIF2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_swigregister(itkHessianRecursiveGaussianImageFilterIF2)
itkHessianRecursiveGaussianImageFilterIF2___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2___New_orig__
itkHessianRecursiveGaussianImageFilterIF2_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF2_cast


def itkHessianRecursiveGaussianImageFilterIF3_New():
    return itkHessianRecursiveGaussianImageFilterIF3.New()

class itkHessianRecursiveGaussianImageFilterIF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ISSRTD33):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIF3
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIF3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIF3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_swigregister(itkHessianRecursiveGaussianImageFilterIF3)
itkHessianRecursiveGaussianImageFilterIF3___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3___New_orig__
itkHessianRecursiveGaussianImageFilterIF3_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIF3_cast


def itkHessianRecursiveGaussianImageFilterISS2_New():
    return itkHessianRecursiveGaussianImageFilterISS2.New()

class itkHessianRecursiveGaussianImageFilterISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISSRTD22):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterISS2
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterISS2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterISS2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_swigregister(itkHessianRecursiveGaussianImageFilterISS2)
itkHessianRecursiveGaussianImageFilterISS2___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2___New_orig__
itkHessianRecursiveGaussianImageFilterISS2_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS2_cast


def itkHessianRecursiveGaussianImageFilterISS3_New():
    return itkHessianRecursiveGaussianImageFilterISS3.New()

class itkHessianRecursiveGaussianImageFilterISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3ISSRTD33):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterISS3
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterISS3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterISS3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_swigregister(itkHessianRecursiveGaussianImageFilterISS3)
itkHessianRecursiveGaussianImageFilterISS3___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3___New_orig__
itkHessianRecursiveGaussianImageFilterISS3_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterISS3_cast


def itkHessianRecursiveGaussianImageFilterIUC2_New():
    return itkHessianRecursiveGaussianImageFilterIUC2.New()

class itkHessianRecursiveGaussianImageFilterIUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2ISSRTD22):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUC2
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUC2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUC2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_swigregister(itkHessianRecursiveGaussianImageFilterIUC2)
itkHessianRecursiveGaussianImageFilterIUC2___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2___New_orig__
itkHessianRecursiveGaussianImageFilterIUC2_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC2_cast


def itkHessianRecursiveGaussianImageFilterIUC3_New():
    return itkHessianRecursiveGaussianImageFilterIUC3.New()

class itkHessianRecursiveGaussianImageFilterIUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3ISSRTD33):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUC3
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUC3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUC3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_swigregister(itkHessianRecursiveGaussianImageFilterIUC3)
itkHessianRecursiveGaussianImageFilterIUC3___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3___New_orig__
itkHessianRecursiveGaussianImageFilterIUC3_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUC3_cast


def itkHessianRecursiveGaussianImageFilterIUS2_New():
    return itkHessianRecursiveGaussianImageFilterIUS2.New()

class itkHessianRecursiveGaussianImageFilterIUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2ISSRTD22):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUS2
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUS2

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUS2 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_swigregister(itkHessianRecursiveGaussianImageFilterIUS2)
itkHessianRecursiveGaussianImageFilterIUS2___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2___New_orig__
itkHessianRecursiveGaussianImageFilterIUS2_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS2_cast


def itkHessianRecursiveGaussianImageFilterIUS3_New():
    return itkHessianRecursiveGaussianImageFilterIUS3.New()

class itkHessianRecursiveGaussianImageFilterIUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3ISSRTD33):
    r"""


    Computes the Hessian matrix of an image by convolution with the Second
    and Cross derivatives of a Gaussian.

    This filter is implemented using the recursive gaussian filters 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_Clone)
    SetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_SetSigma)
    GetSigma = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_GetSigma)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_GetNormalizeAcrossScale)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_GenerateInputRequestedRegion)
    InputHasNumericTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_InputHasNumericTraitsCheck
    
    OutputHasPixelTraitsCheck = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_OutputHasPixelTraitsCheck
    
    __swig_destroy__ = _itkHessianRecursiveGaussianImageFilterPython.delete_itkHessianRecursiveGaussianImageFilterIUS3
    cast = _swig_new_static_method(_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkHessianRecursiveGaussianImageFilterIUS3

        Create a new object of the class itkHessianRecursiveGaussianImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHessianRecursiveGaussianImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHessianRecursiveGaussianImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHessianRecursiveGaussianImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHessianRecursiveGaussianImageFilterIUS3 in _itkHessianRecursiveGaussianImageFilterPython:
_itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_swigregister(itkHessianRecursiveGaussianImageFilterIUS3)
itkHessianRecursiveGaussianImageFilterIUS3___New_orig__ = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3___New_orig__
itkHessianRecursiveGaussianImageFilterIUS3_cast = _itkHessianRecursiveGaussianImageFilterPython.itkHessianRecursiveGaussianImageFilterIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def hessian_recursive_gaussian_image_filter(*args, **kwargs):
    """Procedural interface for HessianRecursiveGaussianImageFilter"""
    import itk
    instance = itk.HessianRecursiveGaussianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def hessian_recursive_gaussian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HessianRecursiveGaussianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HessianRecursiveGaussianImageFilter.values()[0]
    else:
        filter_object = itk.HessianRecursiveGaussianImageFilter

    hessian_recursive_gaussian_image_filter.__doc__ = filter_object.__doc__
    hessian_recursive_gaussian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    hessian_recursive_gaussian_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HessianRecursiveGaussianImageFilter, itkTemplate.itkTemplate):
        hessian_recursive_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        hessian_recursive_gaussian_image_filter.__doc__ += "\n"
        hessian_recursive_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        hessian_recursive_gaussian_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



