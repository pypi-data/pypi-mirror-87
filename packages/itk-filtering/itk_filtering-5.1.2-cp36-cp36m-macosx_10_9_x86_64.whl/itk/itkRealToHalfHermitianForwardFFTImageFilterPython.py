# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkRealToHalfHermitianForwardFFTImageFilterPython
else:
    import _itkRealToHalfHermitianForwardFFTImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkRealToHalfHermitianForwardFFTImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkRealToHalfHermitianForwardFFTImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_New():
    return itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New()

class itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2ICF2):
    r"""


    Base class for specialized real-to-complex forward Fast Fourier
    Transform.

    This is a base class for the "forward" or "direct" discrete
    Fourier Transform. This is an abstract base class: the actual
    implementation is provided by the best child class available on the
    system when the object is created via the object factory system.

    This class transforms a real input image into its complex Fourier
    transform. The Fourier transform of a real input image has Hermitian
    symmetry: $ f(\\mathbf{x}) = f^*(-\\mathbf{x}) $. That is, when
    the result of the transform is split in half along the X-dimension,
    the values in the second half of the transform are the complex
    conjugates of values in the first half reflected about the center of
    the image in each dimension. This filter takes advantage of the
    Hermitian symmetry property and reduces the size of the output in the
    first dimension to N/2+1, where N is the size of the input image in
    that dimension and the division by 2 is rounded down.

    See:   HalfHermitianToRealInverseFFTImageFilter

    See:   ForwardFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2___New_orig__)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetSizeGreatestPrimeFactor)
    GetActualXDimensionIsOddOutput = _swig_new_instance_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetActualXDimensionIsOddOutput)
    GetActualXDimensionIsOdd = _swig_new_instance_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_GetActualXDimensionIsOdd)
    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2
    cast = _swig_new_static_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2 in _itkRealToHalfHermitianForwardFFTImageFilterPython:
_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_swigregister(itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2)
itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2___New_orig__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2___New_orig__
itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_cast = _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF2ICF2_cast


def itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_New():
    return itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New()

class itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3ICF3):
    r"""


    Base class for specialized real-to-complex forward Fast Fourier
    Transform.

    This is a base class for the "forward" or "direct" discrete
    Fourier Transform. This is an abstract base class: the actual
    implementation is provided by the best child class available on the
    system when the object is created via the object factory system.

    This class transforms a real input image into its complex Fourier
    transform. The Fourier transform of a real input image has Hermitian
    symmetry: $ f(\\mathbf{x}) = f^*(-\\mathbf{x}) $. That is, when
    the result of the transform is split in half along the X-dimension,
    the values in the second half of the transform are the complex
    conjugates of values in the first half reflected about the center of
    the image in each dimension. This filter takes advantage of the
    Hermitian symmetry property and reduces the size of the output in the
    first dimension to N/2+1, where N is the size of the input image in
    that dimension and the division by 2 is rounded down.

    See:   HalfHermitianToRealInverseFFTImageFilter

    See:   ForwardFFTImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3___New_orig__)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetSizeGreatestPrimeFactor)
    GetActualXDimensionIsOddOutput = _swig_new_instance_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetActualXDimensionIsOddOutput)
    GetActualXDimensionIsOdd = _swig_new_instance_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_GetActualXDimensionIsOdd)
    __swig_destroy__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.delete_itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3
    cast = _swig_new_static_method(_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3

        Create a new object of the class itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3 in _itkRealToHalfHermitianForwardFFTImageFilterPython:
_itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_swigregister(itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3)
itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3___New_orig__ = _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3___New_orig__
itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_cast = _itkRealToHalfHermitianForwardFFTImageFilterPython.itkRealToHalfHermitianForwardFFTImageFilterIF3ICF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def real_to_half_hermitian_forward_fft_image_filter(*args, **kwargs):
    """Procedural interface for RealToHalfHermitianForwardFFTImageFilter"""
    import itk
    instance = itk.RealToHalfHermitianForwardFFTImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def real_to_half_hermitian_forward_fft_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.RealToHalfHermitianForwardFFTImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.RealToHalfHermitianForwardFFTImageFilter.values()[0]
    else:
        filter_object = itk.RealToHalfHermitianForwardFFTImageFilter

    real_to_half_hermitian_forward_fft_image_filter.__doc__ = filter_object.__doc__
    real_to_half_hermitian_forward_fft_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    real_to_half_hermitian_forward_fft_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.RealToHalfHermitianForwardFFTImageFilter, itkTemplate.itkTemplate):
        real_to_half_hermitian_forward_fft_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        real_to_half_hermitian_forward_fft_image_filter.__doc__ += "\n"
        real_to_half_hermitian_forward_fft_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        real_to_half_hermitian_forward_fft_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



