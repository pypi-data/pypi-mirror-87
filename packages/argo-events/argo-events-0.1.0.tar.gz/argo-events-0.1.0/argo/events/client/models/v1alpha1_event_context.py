# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1EventContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'datacontenttype': 'str',
        'id': 'str',
        'source': 'str',
        'specversion': 'str',
        'subject': 'str',
        'time': 'datetime',
        'type': 'str'
    }

    attribute_map = {
        'datacontenttype': 'datacontenttype',
        'id': 'id',
        'source': 'source',
        'specversion': 'specversion',
        'subject': 'subject',
        'time': 'time',
        'type': 'type'
    }

    def __init__(self, datacontenttype=None, id=None, source=None, specversion=None, subject=None, time=None, type=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1EventContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._datacontenttype = None
        self._id = None
        self._source = None
        self._specversion = None
        self._subject = None
        self._time = None
        self._type = None
        self.discriminator = None

        self.datacontenttype = datacontenttype
        self.id = id
        self.source = source
        self.specversion = specversion
        self.subject = subject
        self.time = time
        self.type = type

    @property
    def datacontenttype(self):
        """Gets the datacontenttype of this V1alpha1EventContext.  # noqa: E501

        DataContentType - A MIME (RFC2046) string describing the media type of `data`.  # noqa: E501

        :return: The datacontenttype of this V1alpha1EventContext.  # noqa: E501
        :rtype: str
        """
        return self._datacontenttype

    @datacontenttype.setter
    def datacontenttype(self, datacontenttype):
        """Sets the datacontenttype of this V1alpha1EventContext.

        DataContentType - A MIME (RFC2046) string describing the media type of `data`.  # noqa: E501

        :param datacontenttype: The datacontenttype of this V1alpha1EventContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and datacontenttype is None:  # noqa: E501
            raise ValueError("Invalid value for `datacontenttype`, must not be `None`")  # noqa: E501

        self._datacontenttype = datacontenttype

    @property
    def id(self):
        """Gets the id of this V1alpha1EventContext.  # noqa: E501

        ID of the event; must be non-empty and unique within the scope of the producer.  # noqa: E501

        :return: The id of this V1alpha1EventContext.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this V1alpha1EventContext.

        ID of the event; must be non-empty and unique within the scope of the producer.  # noqa: E501

        :param id: The id of this V1alpha1EventContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def source(self):
        """Gets the source of this V1alpha1EventContext.  # noqa: E501

        Source - A URI describing the event producer.  # noqa: E501

        :return: The source of this V1alpha1EventContext.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this V1alpha1EventContext.

        Source - A URI describing the event producer.  # noqa: E501

        :param source: The source of this V1alpha1EventContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def specversion(self):
        """Gets the specversion of this V1alpha1EventContext.  # noqa: E501

        SpecVersion - The version of the CloudEvents specification used by the event.  # noqa: E501

        :return: The specversion of this V1alpha1EventContext.  # noqa: E501
        :rtype: str
        """
        return self._specversion

    @specversion.setter
    def specversion(self, specversion):
        """Sets the specversion of this V1alpha1EventContext.

        SpecVersion - The version of the CloudEvents specification used by the event.  # noqa: E501

        :param specversion: The specversion of this V1alpha1EventContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and specversion is None:  # noqa: E501
            raise ValueError("Invalid value for `specversion`, must not be `None`")  # noqa: E501

        self._specversion = specversion

    @property
    def subject(self):
        """Gets the subject of this V1alpha1EventContext.  # noqa: E501

        Subject - The subject of the event in the context of the event producer  # noqa: E501

        :return: The subject of this V1alpha1EventContext.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this V1alpha1EventContext.

        Subject - The subject of the event in the context of the event producer  # noqa: E501

        :param subject: The subject of this V1alpha1EventContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and subject is None:  # noqa: E501
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def time(self):
        """Gets the time of this V1alpha1EventContext.  # noqa: E501

        Time - A Timestamp when the event happened.  # noqa: E501

        :return: The time of this V1alpha1EventContext.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this V1alpha1EventContext.

        Time - A Timestamp when the event happened.  # noqa: E501

        :param time: The time of this V1alpha1EventContext.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and time is None:  # noqa: E501
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def type(self):
        """Gets the type of this V1alpha1EventContext.  # noqa: E501

        Type - The type of the occurrence which has happened.  # noqa: E501

        :return: The type of this V1alpha1EventContext.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this V1alpha1EventContext.

        Type - The type of the occurrence which has happened.  # noqa: E501

        :param type: The type of this V1alpha1EventContext.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1EventContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1EventContext):
            return True

        return self.to_dict() != other.to_dict()
