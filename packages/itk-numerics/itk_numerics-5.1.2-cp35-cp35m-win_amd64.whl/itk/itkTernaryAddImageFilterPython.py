# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTernaryAddImageFilterPython
else:
    import _itkTernaryAddImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTernaryAddImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTernaryAddImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_New():
    return itkTernaryAddImageFilterID2ID2ID2ID2_Superclass.New()

class itkTernaryAddImageFilterID2ID2ID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkTernaryAddImageFilterID2ID2ID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterID2ID2ID2ID2_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterID2ID2ID2ID2_Superclass

        Create a new object of the class itkTernaryAddImageFilterID2ID2ID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterID2ID2ID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterID2ID2ID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterID2ID2ID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterID2ID2ID2ID2_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_swigregister(itkTernaryAddImageFilterID2ID2ID2ID2_Superclass)
itkTernaryAddImageFilterID2ID2ID2ID2_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass___New_orig__
itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Superclass_cast


def itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_New():
    return itkTernaryAddImageFilterID3ID3ID3ID3_Superclass.New()

class itkTernaryAddImageFilterID3ID3ID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkTernaryAddImageFilterID3ID3ID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterID3ID3ID3ID3_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterID3ID3ID3ID3_Superclass

        Create a new object of the class itkTernaryAddImageFilterID3ID3ID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterID3ID3ID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterID3ID3ID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterID3ID3ID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterID3ID3ID3ID3_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_swigregister(itkTernaryAddImageFilterID3ID3ID3ID3_Superclass)
itkTernaryAddImageFilterID3ID3ID3ID3_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass___New_orig__
itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Superclass_cast


def itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_New():
    return itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass.New()

class itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass

        Create a new object of the class itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_swigregister(itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass)
itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass___New_orig__
itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass_cast


def itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_New():
    return itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass.New()

class itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass

        Create a new object of the class itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_swigregister(itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass)
itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass___New_orig__
itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass_cast


def itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_New():
    return itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass.New()

class itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass

        Create a new object of the class itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_swigregister(itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass)
itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass___New_orig__
itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass_cast


def itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_New():
    return itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass.New()

class itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass

        Create a new object of the class itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_swigregister(itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass)
itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass___New_orig__
itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass_cast


def itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_New():
    return itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass.New()

class itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass

        Create a new object of the class itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_swigregister(itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass)
itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass___New_orig__
itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass_cast


def itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_New():
    return itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass.New()

class itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass

        Create a new object of the class itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_swigregister(itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass)
itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass___New_orig__
itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass_cast


def itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_New():
    return itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass.New()

class itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass

        Create a new object of the class itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_swigregister(itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass)
itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass___New_orig__
itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass_cast


def itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_New():
    return itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass.New()

class itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_Clone)
    SetInput1 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_SetInput2)
    SetInput3 = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_SetInput3)
    GetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_SetFunctor)
    SameDimensionCheck1 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_SameDimensionCheck1
    
    SameDimensionCheck2 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_SameDimensionCheck2
    
    SameDimensionCheck3 = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_SameDimensionCheck3
    
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass

        Create a new object of the class itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_swigregister(itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass)
itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass___New_orig__
itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass_cast


def itkTernaryAddImageFilterID2ID2ID2ID2_New():
    return itkTernaryAddImageFilterID2ID2ID2ID2.New()

class itkTernaryAddImageFilterID2ID2ID2ID2(itkTernaryAddImageFilterID2ID2ID2ID2_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterID2ID2ID2ID2
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterID2ID2ID2ID2

        Create a new object of the class itkTernaryAddImageFilterID2ID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterID2ID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterID2ID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterID2ID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterID2ID2ID2ID2 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_swigregister(itkTernaryAddImageFilterID2ID2ID2ID2)
itkTernaryAddImageFilterID2ID2ID2ID2___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2___New_orig__
itkTernaryAddImageFilterID2ID2ID2ID2_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID2ID2ID2ID2_cast


def itkTernaryAddImageFilterID3ID3ID3ID3_New():
    return itkTernaryAddImageFilterID3ID3ID3ID3.New()

class itkTernaryAddImageFilterID3ID3ID3ID3(itkTernaryAddImageFilterID3ID3ID3ID3_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterID3ID3ID3ID3
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterID3ID3ID3ID3

        Create a new object of the class itkTernaryAddImageFilterID3ID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterID3ID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterID3ID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterID3ID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterID3ID3ID3ID3 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_swigregister(itkTernaryAddImageFilterID3ID3ID3ID3)
itkTernaryAddImageFilterID3ID3ID3ID3___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3___New_orig__
itkTernaryAddImageFilterID3ID3ID3ID3_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterID3ID3ID3ID3_cast


def itkTernaryAddImageFilterIF2IF2IF2IF2_New():
    return itkTernaryAddImageFilterIF2IF2IF2IF2.New()

class itkTernaryAddImageFilterIF2IF2IF2IF2(itkTernaryAddImageFilterIF2IF2IF2IF2_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIF2IF2IF2IF2
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIF2IF2IF2IF2

        Create a new object of the class itkTernaryAddImageFilterIF2IF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIF2IF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIF2IF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIF2IF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIF2IF2IF2IF2 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_swigregister(itkTernaryAddImageFilterIF2IF2IF2IF2)
itkTernaryAddImageFilterIF2IF2IF2IF2___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2___New_orig__
itkTernaryAddImageFilterIF2IF2IF2IF2_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF2IF2IF2IF2_cast


def itkTernaryAddImageFilterIF3IF3IF3IF3_New():
    return itkTernaryAddImageFilterIF3IF3IF3IF3.New()

class itkTernaryAddImageFilterIF3IF3IF3IF3(itkTernaryAddImageFilterIF3IF3IF3IF3_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIF3IF3IF3IF3
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIF3IF3IF3IF3

        Create a new object of the class itkTernaryAddImageFilterIF3IF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIF3IF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIF3IF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIF3IF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIF3IF3IF3IF3 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_swigregister(itkTernaryAddImageFilterIF3IF3IF3IF3)
itkTernaryAddImageFilterIF3IF3IF3IF3___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3___New_orig__
itkTernaryAddImageFilterIF3IF3IF3IF3_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIF3IF3IF3IF3_cast


def itkTernaryAddImageFilterISS2ISS2ISS2ISS2_New():
    return itkTernaryAddImageFilterISS2ISS2ISS2ISS2.New()

class itkTernaryAddImageFilterISS2ISS2ISS2ISS2(itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterISS2ISS2ISS2ISS2
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterISS2ISS2ISS2ISS2

        Create a new object of the class itkTernaryAddImageFilterISS2ISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterISS2ISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterISS2ISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterISS2ISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterISS2ISS2ISS2ISS2 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_swigregister(itkTernaryAddImageFilterISS2ISS2ISS2ISS2)
itkTernaryAddImageFilterISS2ISS2ISS2ISS2___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2___New_orig__
itkTernaryAddImageFilterISS2ISS2ISS2ISS2_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS2ISS2ISS2ISS2_cast


def itkTernaryAddImageFilterISS3ISS3ISS3ISS3_New():
    return itkTernaryAddImageFilterISS3ISS3ISS3ISS3.New()

class itkTernaryAddImageFilterISS3ISS3ISS3ISS3(itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterISS3ISS3ISS3ISS3
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterISS3ISS3ISS3ISS3

        Create a new object of the class itkTernaryAddImageFilterISS3ISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterISS3ISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterISS3ISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterISS3ISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterISS3ISS3ISS3ISS3 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_swigregister(itkTernaryAddImageFilterISS3ISS3ISS3ISS3)
itkTernaryAddImageFilterISS3ISS3ISS3ISS3___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3___New_orig__
itkTernaryAddImageFilterISS3ISS3ISS3ISS3_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterISS3ISS3ISS3ISS3_cast


def itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_New():
    return itkTernaryAddImageFilterIUC2IUC2IUC2IUC2.New()

class itkTernaryAddImageFilterIUC2IUC2IUC2IUC2(itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIUC2IUC2IUC2IUC2
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIUC2IUC2IUC2IUC2

        Create a new object of the class itkTernaryAddImageFilterIUC2IUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIUC2IUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIUC2IUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIUC2IUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIUC2IUC2IUC2IUC2 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_swigregister(itkTernaryAddImageFilterIUC2IUC2IUC2IUC2)
itkTernaryAddImageFilterIUC2IUC2IUC2IUC2___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2___New_orig__
itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC2IUC2IUC2IUC2_cast


def itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_New():
    return itkTernaryAddImageFilterIUC3IUC3IUC3IUC3.New()

class itkTernaryAddImageFilterIUC3IUC3IUC3IUC3(itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIUC3IUC3IUC3IUC3
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIUC3IUC3IUC3IUC3

        Create a new object of the class itkTernaryAddImageFilterIUC3IUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIUC3IUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIUC3IUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIUC3IUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIUC3IUC3IUC3IUC3 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_swigregister(itkTernaryAddImageFilterIUC3IUC3IUC3IUC3)
itkTernaryAddImageFilterIUC3IUC3IUC3IUC3___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3___New_orig__
itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUC3IUC3IUC3IUC3_cast


def itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_New():
    return itkTernaryAddImageFilterIUS2IUS2IUS2IUS2.New()

class itkTernaryAddImageFilterIUS2IUS2IUS2IUS2(itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIUS2IUS2IUS2IUS2
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIUS2IUS2IUS2IUS2

        Create a new object of the class itkTernaryAddImageFilterIUS2IUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIUS2IUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIUS2IUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIUS2IUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIUS2IUS2IUS2IUS2 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_swigregister(itkTernaryAddImageFilterIUS2IUS2IUS2IUS2)
itkTernaryAddImageFilterIUS2IUS2IUS2IUS2___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2___New_orig__
itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS2IUS2IUS2IUS2_cast


def itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_New():
    return itkTernaryAddImageFilterIUS3IUS3IUS3IUS3.New()

class itkTernaryAddImageFilterIUS3IUS3IUS3IUS3(itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Superclass):
    r"""


    Pixel-wise addition of three images.

    This class is templated over the types of the three input images and
    the type of the output image. Numeric conversions (castings) are done
    by the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_Clone)
    __swig_destroy__ = _itkTernaryAddImageFilterPython.delete_itkTernaryAddImageFilterIUS3IUS3IUS3IUS3
    cast = _swig_new_static_method(_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkTernaryAddImageFilterIUS3IUS3IUS3IUS3

        Create a new object of the class itkTernaryAddImageFilterIUS3IUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTernaryAddImageFilterIUS3IUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTernaryAddImageFilterIUS3IUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTernaryAddImageFilterIUS3IUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTernaryAddImageFilterIUS3IUS3IUS3IUS3 in _itkTernaryAddImageFilterPython:
_itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_swigregister(itkTernaryAddImageFilterIUS3IUS3IUS3IUS3)
itkTernaryAddImageFilterIUS3IUS3IUS3IUS3___New_orig__ = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3___New_orig__
itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_cast = _itkTernaryAddImageFilterPython.itkTernaryAddImageFilterIUS3IUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def ternary_functor_image_filter(*args, **kwargs):
    """Procedural interface for TernaryFunctorImageFilter"""
    import itk
    instance = itk.TernaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def ternary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TernaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.TernaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.TernaryFunctorImageFilter

    ternary_functor_image_filter.__doc__ = filter_object.__doc__
    ternary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    ternary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.TernaryFunctorImageFilter, itkTemplate.itkTemplate):
        ternary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        ternary_functor_image_filter.__doc__ += "\n"
        ternary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        ternary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def ternary_add_image_filter(*args, **kwargs):
    """Procedural interface for TernaryAddImageFilter"""
    import itk
    instance = itk.TernaryAddImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def ternary_add_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TernaryAddImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.TernaryAddImageFilter.values()[0]
    else:
        filter_object = itk.TernaryAddImageFilter

    ternary_add_image_filter.__doc__ = filter_object.__doc__
    ternary_add_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    ternary_add_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.TernaryAddImageFilter, itkTemplate.itkTemplate):
        ternary_add_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        ternary_add_image_filter.__doc__ += "\n"
        ternary_add_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        ternary_add_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



