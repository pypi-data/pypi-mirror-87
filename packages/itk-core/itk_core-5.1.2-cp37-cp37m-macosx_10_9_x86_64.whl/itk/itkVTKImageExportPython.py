# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKVTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVTKImageExportPython
else:
    import _itkVTKImageExportPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVTKImageExportPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVTKImageExportPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
class itkVTKImageExportBase(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Superclass for VTKImageExport instantiations.

    VTKImageExportBase provides the functions that serve as callbacks
    given to vtkImageImport to connect the end of an ITK pipeline to the
    beginning of a VTK pipeline.

    See:   VTKImageExport 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetCallbackUserData = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportBase_GetCallbackUserData)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportBase
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportBase_cast)

# Register itkVTKImageExportBase in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportBase_swigregister(itkVTKImageExportBase)
itkVTKImageExportBase_cast = _itkVTKImageExportPython.itkVTKImageExportBase_cast


def itkVTKImageExportICVF22_New():
    return itkVTKImageExportICVF22.New()

class itkVTKImageExportICVF22(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF22_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportICVF22_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF22_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportICVF22
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportICVF22

        Create a new object of the class itkVTKImageExportICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportICVF22 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportICVF22_swigregister(itkVTKImageExportICVF22)
itkVTKImageExportICVF22___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportICVF22___New_orig__
itkVTKImageExportICVF22_cast = _itkVTKImageExportPython.itkVTKImageExportICVF22_cast


def itkVTKImageExportICVF23_New():
    return itkVTKImageExportICVF23.New()

class itkVTKImageExportICVF23(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF23_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportICVF23_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF23_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportICVF23
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportICVF23

        Create a new object of the class itkVTKImageExportICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportICVF23 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportICVF23_swigregister(itkVTKImageExportICVF23)
itkVTKImageExportICVF23___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportICVF23___New_orig__
itkVTKImageExportICVF23_cast = _itkVTKImageExportPython.itkVTKImageExportICVF23_cast


def itkVTKImageExportICVF32_New():
    return itkVTKImageExportICVF32.New()

class itkVTKImageExportICVF32(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF32_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportICVF32_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF32_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportICVF32
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportICVF32

        Create a new object of the class itkVTKImageExportICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportICVF32 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportICVF32_swigregister(itkVTKImageExportICVF32)
itkVTKImageExportICVF32___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportICVF32___New_orig__
itkVTKImageExportICVF32_cast = _itkVTKImageExportPython.itkVTKImageExportICVF32_cast


def itkVTKImageExportICVF33_New():
    return itkVTKImageExportICVF33.New()

class itkVTKImageExportICVF33(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF33_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportICVF33_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF33_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportICVF33
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportICVF33

        Create a new object of the class itkVTKImageExportICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportICVF33 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportICVF33_swigregister(itkVTKImageExportICVF33)
itkVTKImageExportICVF33___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportICVF33___New_orig__
itkVTKImageExportICVF33_cast = _itkVTKImageExportPython.itkVTKImageExportICVF33_cast


def itkVTKImageExportICVF42_New():
    return itkVTKImageExportICVF42.New()

class itkVTKImageExportICVF42(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF42_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportICVF42_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF42_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportICVF42
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportICVF42

        Create a new object of the class itkVTKImageExportICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportICVF42 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportICVF42_swigregister(itkVTKImageExportICVF42)
itkVTKImageExportICVF42___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportICVF42___New_orig__
itkVTKImageExportICVF42_cast = _itkVTKImageExportPython.itkVTKImageExportICVF42_cast


def itkVTKImageExportICVF43_New():
    return itkVTKImageExportICVF43.New()

class itkVTKImageExportICVF43(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF43_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportICVF43_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportICVF43_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportICVF43
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportICVF43

        Create a new object of the class itkVTKImageExportICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportICVF43 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportICVF43_swigregister(itkVTKImageExportICVF43)
itkVTKImageExportICVF43___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportICVF43___New_orig__
itkVTKImageExportICVF43_cast = _itkVTKImageExportPython.itkVTKImageExportICVF43_cast


def itkVTKImageExportID2_New():
    return itkVTKImageExportID2.New()

class itkVTKImageExportID2(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportID2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportID2_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportID2_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportID2_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportID2_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportID2
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportID2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportID2

        Create a new object of the class itkVTKImageExportID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportID2 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportID2_swigregister(itkVTKImageExportID2)
itkVTKImageExportID2___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportID2___New_orig__
itkVTKImageExportID2_cast = _itkVTKImageExportPython.itkVTKImageExportID2_cast


def itkVTKImageExportID3_New():
    return itkVTKImageExportID3.New()

class itkVTKImageExportID3(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportID3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportID3_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportID3_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportID3_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportID3_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportID3
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportID3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportID3

        Create a new object of the class itkVTKImageExportID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportID3 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportID3_swigregister(itkVTKImageExportID3)
itkVTKImageExportID3___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportID3___New_orig__
itkVTKImageExportID3_cast = _itkVTKImageExportPython.itkVTKImageExportID3_cast


def itkVTKImageExportIF2_New():
    return itkVTKImageExportIF2.New()

class itkVTKImageExportIF2(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIF2_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIF2_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIF2_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIF2
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIF2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIF2

        Create a new object of the class itkVTKImageExportIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIF2 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIF2_swigregister(itkVTKImageExportIF2)
itkVTKImageExportIF2___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIF2___New_orig__
itkVTKImageExportIF2_cast = _itkVTKImageExportPython.itkVTKImageExportIF2_cast


def itkVTKImageExportIF3_New():
    return itkVTKImageExportIF3.New()

class itkVTKImageExportIF3(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIF3_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIF3_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIF3_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIF3
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIF3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIF3

        Create a new object of the class itkVTKImageExportIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIF3 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIF3_swigregister(itkVTKImageExportIF3)
itkVTKImageExportIF3___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIF3___New_orig__
itkVTKImageExportIF3_cast = _itkVTKImageExportPython.itkVTKImageExportIF3_cast


def itkVTKImageExportIRGBAUC2_New():
    return itkVTKImageExportIRGBAUC2.New()

class itkVTKImageExportIRGBAUC2(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC2_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIRGBAUC2_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC2_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIRGBAUC2
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIRGBAUC2

        Create a new object of the class itkVTKImageExportIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIRGBAUC2 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIRGBAUC2_swigregister(itkVTKImageExportIRGBAUC2)
itkVTKImageExportIRGBAUC2___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIRGBAUC2___New_orig__
itkVTKImageExportIRGBAUC2_cast = _itkVTKImageExportPython.itkVTKImageExportIRGBAUC2_cast


def itkVTKImageExportIRGBAUC3_New():
    return itkVTKImageExportIRGBAUC3.New()

class itkVTKImageExportIRGBAUC3(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC3_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIRGBAUC3_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC3_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIRGBAUC3
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIRGBAUC3

        Create a new object of the class itkVTKImageExportIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIRGBAUC3 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIRGBAUC3_swigregister(itkVTKImageExportIRGBAUC3)
itkVTKImageExportIRGBAUC3___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIRGBAUC3___New_orig__
itkVTKImageExportIRGBAUC3_cast = _itkVTKImageExportPython.itkVTKImageExportIRGBAUC3_cast


def itkVTKImageExportIRGBUC2_New():
    return itkVTKImageExportIRGBUC2.New()

class itkVTKImageExportIRGBUC2(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC2_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIRGBUC2_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC2_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIRGBUC2
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIRGBUC2

        Create a new object of the class itkVTKImageExportIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIRGBUC2 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIRGBUC2_swigregister(itkVTKImageExportIRGBUC2)
itkVTKImageExportIRGBUC2___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIRGBUC2___New_orig__
itkVTKImageExportIRGBUC2_cast = _itkVTKImageExportPython.itkVTKImageExportIRGBUC2_cast


def itkVTKImageExportIRGBUC3_New():
    return itkVTKImageExportIRGBUC3.New()

class itkVTKImageExportIRGBUC3(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC3_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIRGBUC3_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC3_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIRGBUC3
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIRGBUC3

        Create a new object of the class itkVTKImageExportIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIRGBUC3 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIRGBUC3_swigregister(itkVTKImageExportIRGBUC3)
itkVTKImageExportIRGBUC3___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIRGBUC3___New_orig__
itkVTKImageExportIRGBUC3_cast = _itkVTKImageExportPython.itkVTKImageExportIRGBUC3_cast


def itkVTKImageExportISS2_New():
    return itkVTKImageExportISS2.New()

class itkVTKImageExportISS2(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportISS2_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportISS2_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportISS2_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportISS2
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportISS2

        Create a new object of the class itkVTKImageExportISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportISS2 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportISS2_swigregister(itkVTKImageExportISS2)
itkVTKImageExportISS2___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportISS2___New_orig__
itkVTKImageExportISS2_cast = _itkVTKImageExportPython.itkVTKImageExportISS2_cast


def itkVTKImageExportISS3_New():
    return itkVTKImageExportISS3.New()

class itkVTKImageExportISS3(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportISS3_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportISS3_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportISS3_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportISS3
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportISS3

        Create a new object of the class itkVTKImageExportISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportISS3 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportISS3_swigregister(itkVTKImageExportISS3)
itkVTKImageExportISS3___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportISS3___New_orig__
itkVTKImageExportISS3_cast = _itkVTKImageExportPython.itkVTKImageExportISS3_cast


def itkVTKImageExportIUC2_New():
    return itkVTKImageExportIUC2.New()

class itkVTKImageExportIUC2(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUC2_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIUC2_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUC2_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIUC2
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIUC2

        Create a new object of the class itkVTKImageExportIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIUC2 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIUC2_swigregister(itkVTKImageExportIUC2)
itkVTKImageExportIUC2___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIUC2___New_orig__
itkVTKImageExportIUC2_cast = _itkVTKImageExportPython.itkVTKImageExportIUC2_cast


def itkVTKImageExportIUC3_New():
    return itkVTKImageExportIUC3.New()

class itkVTKImageExportIUC3(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUC3_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIUC3_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUC3_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIUC3
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIUC3

        Create a new object of the class itkVTKImageExportIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIUC3 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIUC3_swigregister(itkVTKImageExportIUC3)
itkVTKImageExportIUC3___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIUC3___New_orig__
itkVTKImageExportIUC3_cast = _itkVTKImageExportPython.itkVTKImageExportIUC3_cast


def itkVTKImageExportIUL2_New():
    return itkVTKImageExportIUL2.New()

class itkVTKImageExportIUL2(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUL2_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIUL2_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUL2_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUL2_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIUL2
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUL2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIUL2

        Create a new object of the class itkVTKImageExportIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIUL2 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIUL2_swigregister(itkVTKImageExportIUL2)
itkVTKImageExportIUL2___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIUL2___New_orig__
itkVTKImageExportIUL2_cast = _itkVTKImageExportPython.itkVTKImageExportIUL2_cast


def itkVTKImageExportIUL3_New():
    return itkVTKImageExportIUL3.New()

class itkVTKImageExportIUL3(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUL3_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIUL3_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUL3_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUL3_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIUL3
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUL3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIUL3

        Create a new object of the class itkVTKImageExportIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIUL3 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIUL3_swigregister(itkVTKImageExportIUL3)
itkVTKImageExportIUL3___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIUL3___New_orig__
itkVTKImageExportIUL3_cast = _itkVTKImageExportPython.itkVTKImageExportIUL3_cast


def itkVTKImageExportIUS2_New():
    return itkVTKImageExportIUS2.New()

class itkVTKImageExportIUS2(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUS2_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIUS2_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUS2_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIUS2
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIUS2

        Create a new object of the class itkVTKImageExportIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIUS2 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIUS2_swigregister(itkVTKImageExportIUS2)
itkVTKImageExportIUS2___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIUS2___New_orig__
itkVTKImageExportIUS2_cast = _itkVTKImageExportPython.itkVTKImageExportIUS2_cast


def itkVTKImageExportIUS3_New():
    return itkVTKImageExportIUS3.New()

class itkVTKImageExportIUS3(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUS3_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIUS3_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIUS3_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIUS3
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIUS3

        Create a new object of the class itkVTKImageExportIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIUS3 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIUS3_swigregister(itkVTKImageExportIUS3)
itkVTKImageExportIUS3___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIUS3___New_orig__
itkVTKImageExportIUS3_cast = _itkVTKImageExportPython.itkVTKImageExportIUS3_cast


def itkVTKImageExportIVF22_New():
    return itkVTKImageExportIVF22.New()

class itkVTKImageExportIVF22(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF22_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIVF22_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF22_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIVF22
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF22_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIVF22

        Create a new object of the class itkVTKImageExportIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIVF22 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIVF22_swigregister(itkVTKImageExportIVF22)
itkVTKImageExportIVF22___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIVF22___New_orig__
itkVTKImageExportIVF22_cast = _itkVTKImageExportPython.itkVTKImageExportIVF22_cast


def itkVTKImageExportIVF23_New():
    return itkVTKImageExportIVF23.New()

class itkVTKImageExportIVF23(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF23_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIVF23_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF23_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIVF23
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF23_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIVF23

        Create a new object of the class itkVTKImageExportIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIVF23 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIVF23_swigregister(itkVTKImageExportIVF23)
itkVTKImageExportIVF23___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIVF23___New_orig__
itkVTKImageExportIVF23_cast = _itkVTKImageExportPython.itkVTKImageExportIVF23_cast


def itkVTKImageExportIVF32_New():
    return itkVTKImageExportIVF32.New()

class itkVTKImageExportIVF32(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF32_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIVF32_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF32_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIVF32
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF32_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIVF32

        Create a new object of the class itkVTKImageExportIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIVF32 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIVF32_swigregister(itkVTKImageExportIVF32)
itkVTKImageExportIVF32___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIVF32___New_orig__
itkVTKImageExportIVF32_cast = _itkVTKImageExportPython.itkVTKImageExportIVF32_cast


def itkVTKImageExportIVF33_New():
    return itkVTKImageExportIVF33.New()

class itkVTKImageExportIVF33(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF33_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIVF33_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF33_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIVF33
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF33_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIVF33

        Create a new object of the class itkVTKImageExportIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIVF33 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIVF33_swigregister(itkVTKImageExportIVF33)
itkVTKImageExportIVF33___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIVF33___New_orig__
itkVTKImageExportIVF33_cast = _itkVTKImageExportPython.itkVTKImageExportIVF33_cast


def itkVTKImageExportIVF42_New():
    return itkVTKImageExportIVF42.New()

class itkVTKImageExportIVF42(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF42_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIVF42_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF42_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIVF42
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF42_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIVF42

        Create a new object of the class itkVTKImageExportIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIVF42 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIVF42_swigregister(itkVTKImageExportIVF42)
itkVTKImageExportIVF42___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIVF42___New_orig__
itkVTKImageExportIVF42_cast = _itkVTKImageExportPython.itkVTKImageExportIVF42_cast


def itkVTKImageExportIVF43_New():
    return itkVTKImageExportIVF43.New()

class itkVTKImageExportIVF43(itkVTKImageExportBase):
    r"""


    Connect the end of an ITK image pipeline to a VTK pipeline.

    VTKImageExport can be used at the end of an ITK image pipeline to
    connect with a VTK pipeline that begins with vtkImageImport. Callbacks
    provided by VTKImageExport are registered with vtkImageImport to
    connect the pipeline execution together. Once connected, update
    requests coming through the VTK pipeline are automatically propagated
    to the ITK pipeline.

    While VTKImageExportBase provides the pipeline functionality
    independent of image type, instances must be created through
    VTKImageExport. This class provides the implementations for callbacks
    that depend on the image type.

    Note that not all image types will work correctly. VTK will only
    support images of 1, 2, or 3 dimensions. Scalar value types can be one
    of: float, double, char, unsigned char, short, unsigned short, int,
    unsigned int, long, unsigned long.

    VTKImageExport also supports pixel types with multiple components
    (like RGBPixel).

    See:   VTKImageExportBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF43_Clone)
    ImageDimensionCheck = _itkVTKImageExportPython.itkVTKImageExportIVF43_ImageDimensionCheck
    
    SetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkVTKImageExportPython.itkVTKImageExportIVF43_GetInput)
    __swig_destroy__ = _itkVTKImageExportPython.delete_itkVTKImageExportIVF43
    cast = _swig_new_static_method(_itkVTKImageExportPython.itkVTKImageExportIVF43_cast)

    def New(*args, **kargs):
        """New() -> itkVTKImageExportIVF43

        Create a new object of the class itkVTKImageExportIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVTKImageExportIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVTKImageExportIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVTKImageExportIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVTKImageExportIVF43 in _itkVTKImageExportPython:
_itkVTKImageExportPython.itkVTKImageExportIVF43_swigregister(itkVTKImageExportIVF43)
itkVTKImageExportIVF43___New_orig__ = _itkVTKImageExportPython.itkVTKImageExportIVF43___New_orig__
itkVTKImageExportIVF43_cast = _itkVTKImageExportPython.itkVTKImageExportIVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vtk_image_export(*args, **kwargs):
    """Procedural interface for VTKImageExport"""
    import itk
    instance = itk.VTKImageExport.New(*args, **kwargs)
    return instance.__internal_call__()

def vtk_image_export_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VTKImageExport, itkTemplate.itkTemplate):
        filter_object = itk.VTKImageExport.values()[0]
    else:
        filter_object = itk.VTKImageExport

    vtk_image_export.__doc__ = filter_object.__doc__
    vtk_image_export.__doc__ += "\n Args are Input(s) to the filter.\n"
    vtk_image_export.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.VTKImageExport, itkTemplate.itkTemplate):
        vtk_image_export.__doc__ += itkHelpers.filter_args(filter_object)[0]
        vtk_image_export.__doc__ += "\n"
        vtk_image_export.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        vtk_image_export.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vtk_image_export_base(*args, **kwargs):
    """Procedural interface for VTKImageExportBase"""
    import itk
    instance = itk.VTKImageExportBase.New(*args, **kwargs)
    return instance.__internal_call__()

def vtk_image_export_base_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.VTKImageExportBase, itkTemplate.itkTemplate):
        filter_object = itk.VTKImageExportBase.values()[0]
    else:
        filter_object = itk.VTKImageExportBase

    vtk_image_export_base.__doc__ = filter_object.__doc__
    vtk_image_export_base.__doc__ += "\n Args are Input(s) to the filter.\n"
    vtk_image_export_base.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.VTKImageExportBase, itkTemplate.itkTemplate):
        vtk_image_export_base.__doc__ += itkHelpers.filter_args(filter_object)[0]
        vtk_image_export_base.__doc__ += "\n"
        vtk_image_export_base.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        vtk_image_export_base.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



