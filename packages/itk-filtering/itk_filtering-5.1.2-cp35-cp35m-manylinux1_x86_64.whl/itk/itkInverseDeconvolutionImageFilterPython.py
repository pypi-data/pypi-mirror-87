# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKDeconvolutionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInverseDeconvolutionImageFilterPython
else:
    import _itkInverseDeconvolutionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkInverseDeconvolutionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkInverseDeconvolutionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkFFTConvolutionImageFilterPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkConvolutionImageFilterBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageBoundaryConditionPython

def itkInverseDeconvolutionImageFilterID2ID2_New():
    return itkInverseDeconvolutionImageFilterID2ID2.New()

class itkInverseDeconvolutionImageFilterID2ID2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID2ID2):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterID2ID2
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterID2ID2

        Create a new object of the class itkInverseDeconvolutionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterID2ID2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_swigregister(itkInverseDeconvolutionImageFilterID2ID2)
itkInverseDeconvolutionImageFilterID2ID2___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2___New_orig__
itkInverseDeconvolutionImageFilterID2ID2_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID2ID2_cast


def itkInverseDeconvolutionImageFilterID3ID3_New():
    return itkInverseDeconvolutionImageFilterID3ID3.New()

class itkInverseDeconvolutionImageFilterID3ID3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterID3ID3):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterID3ID3
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterID3ID3

        Create a new object of the class itkInverseDeconvolutionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterID3ID3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_swigregister(itkInverseDeconvolutionImageFilterID3ID3)
itkInverseDeconvolutionImageFilterID3ID3___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3___New_orig__
itkInverseDeconvolutionImageFilterID3ID3_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterID3ID3_cast


def itkInverseDeconvolutionImageFilterIF2IF2_New():
    return itkInverseDeconvolutionImageFilterIF2IF2.New()

class itkInverseDeconvolutionImageFilterIF2IF2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF2IF2):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIF2IF2

        Create a new object of the class itkInverseDeconvolutionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIF2IF2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_swigregister(itkInverseDeconvolutionImageFilterIF2IF2)
itkInverseDeconvolutionImageFilterIF2IF2___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2___New_orig__
itkInverseDeconvolutionImageFilterIF2IF2_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF2IF2_cast


def itkInverseDeconvolutionImageFilterIF3IF3_New():
    return itkInverseDeconvolutionImageFilterIF3IF3.New()

class itkInverseDeconvolutionImageFilterIF3IF3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIF3IF3):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIF3IF3

        Create a new object of the class itkInverseDeconvolutionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIF3IF3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_swigregister(itkInverseDeconvolutionImageFilterIF3IF3)
itkInverseDeconvolutionImageFilterIF3IF3___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3___New_orig__
itkInverseDeconvolutionImageFilterIF3IF3_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIF3IF3_cast


def itkInverseDeconvolutionImageFilterISS2ISS2_New():
    return itkInverseDeconvolutionImageFilterISS2ISS2.New()

class itkInverseDeconvolutionImageFilterISS2ISS2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS2ISS2):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterISS2ISS2

        Create a new object of the class itkInverseDeconvolutionImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterISS2ISS2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_swigregister(itkInverseDeconvolutionImageFilterISS2ISS2)
itkInverseDeconvolutionImageFilterISS2ISS2___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2___New_orig__
itkInverseDeconvolutionImageFilterISS2ISS2_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS2ISS2_cast


def itkInverseDeconvolutionImageFilterISS3ISS3_New():
    return itkInverseDeconvolutionImageFilterISS3ISS3.New()

class itkInverseDeconvolutionImageFilterISS3ISS3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterISS3ISS3):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterISS3ISS3

        Create a new object of the class itkInverseDeconvolutionImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterISS3ISS3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_swigregister(itkInverseDeconvolutionImageFilterISS3ISS3)
itkInverseDeconvolutionImageFilterISS3ISS3___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3___New_orig__
itkInverseDeconvolutionImageFilterISS3ISS3_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterISS3ISS3_cast


def itkInverseDeconvolutionImageFilterIUC2IUC2_New():
    return itkInverseDeconvolutionImageFilterIUC2IUC2.New()

class itkInverseDeconvolutionImageFilterIUC2IUC2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC2IUC2):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUC2IUC2

        Create a new object of the class itkInverseDeconvolutionImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUC2IUC2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_swigregister(itkInverseDeconvolutionImageFilterIUC2IUC2)
itkInverseDeconvolutionImageFilterIUC2IUC2___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2___New_orig__
itkInverseDeconvolutionImageFilterIUC2IUC2_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC2IUC2_cast


def itkInverseDeconvolutionImageFilterIUC3IUC3_New():
    return itkInverseDeconvolutionImageFilterIUC3IUC3.New()

class itkInverseDeconvolutionImageFilterIUC3IUC3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUC3IUC3):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUC3IUC3

        Create a new object of the class itkInverseDeconvolutionImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUC3IUC3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_swigregister(itkInverseDeconvolutionImageFilterIUC3IUC3)
itkInverseDeconvolutionImageFilterIUC3IUC3___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3___New_orig__
itkInverseDeconvolutionImageFilterIUC3IUC3_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUC3IUC3_cast


def itkInverseDeconvolutionImageFilterIUS2IUS2_New():
    return itkInverseDeconvolutionImageFilterIUS2IUS2.New()

class itkInverseDeconvolutionImageFilterIUS2IUS2(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS2IUS2):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUS2IUS2

        Create a new object of the class itkInverseDeconvolutionImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUS2IUS2 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_swigregister(itkInverseDeconvolutionImageFilterIUS2IUS2)
itkInverseDeconvolutionImageFilterIUS2IUS2___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2___New_orig__
itkInverseDeconvolutionImageFilterIUS2IUS2_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS2IUS2_cast


def itkInverseDeconvolutionImageFilterIUS3IUS3_New():
    return itkInverseDeconvolutionImageFilterIUS3IUS3.New()

class itkInverseDeconvolutionImageFilterIUS3IUS3(itk.itkFFTConvolutionImageFilterPython.itkFFTConvolutionImageFilterIUS3IUS3):
    r"""


    The direct linear inverse deconvolution filter.

    The inverse filter is the most straightforward deconvolution method.
    Considering that convolution of two images in the spatial domain is
    equivalent to multiplying the Fourier transform of the two images, the
    inverse filter consists of inverting the multiplication. In other
    words, this filter computes the following: \\[ hat{F}(\\omega) =
    \\begin{cases} G(\\omega) / H(\\omega) & \\text{if
    $|H(\\omega)| \\geq \\epsilon$} \\\\ 0 & \\text{otherwise}
    \\end{cases} \\] where $\\hat{F}(\\omega)$ is the Fourier
    transform of the estimate produced by this filter, $G(\\omega)$ is
    the Fourier transform of the input blurred image, $H(\\omega)$ is
    the Fourier transform of the blurring kernel, and $\\epsilon$ is a
    constant real non-negative threshold (called
    KernelZeroMagnitudeThreshold in this filter) that determines when the
    magnitude of a complex number is considered zero.

    Gaetan Lehmann, Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France

    Cory Quammen, The University of North Carolina at Chapel Hill 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_Clone)
    SetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_SetKernelZeroMagnitudeThreshold)
    GetKernelZeroMagnitudeThreshold = _swig_new_instance_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_GetKernelZeroMagnitudeThreshold)
    __swig_destroy__ = _itkInverseDeconvolutionImageFilterPython.delete_itkInverseDeconvolutionImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkInverseDeconvolutionImageFilterIUS3IUS3

        Create a new object of the class itkInverseDeconvolutionImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInverseDeconvolutionImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInverseDeconvolutionImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInverseDeconvolutionImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInverseDeconvolutionImageFilterIUS3IUS3 in _itkInverseDeconvolutionImageFilterPython:
_itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_swigregister(itkInverseDeconvolutionImageFilterIUS3IUS3)
itkInverseDeconvolutionImageFilterIUS3IUS3___New_orig__ = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3___New_orig__
itkInverseDeconvolutionImageFilterIUS3IUS3_cast = _itkInverseDeconvolutionImageFilterPython.itkInverseDeconvolutionImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def inverse_deconvolution_image_filter(*args, **kwargs):
    """Procedural interface for InverseDeconvolutionImageFilter"""
    import itk
    instance = itk.InverseDeconvolutionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def inverse_deconvolution_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.InverseDeconvolutionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.InverseDeconvolutionImageFilter.values()[0]
    else:
        filter_object = itk.InverseDeconvolutionImageFilter

    inverse_deconvolution_image_filter.__doc__ = filter_object.__doc__
    inverse_deconvolution_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    inverse_deconvolution_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.InverseDeconvolutionImageFilter, itkTemplate.itkTemplate):
        inverse_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        inverse_deconvolution_image_filter.__doc__ += "\n"
        inverse_deconvolution_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        inverse_deconvolution_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



