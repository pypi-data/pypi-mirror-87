# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkInterpolateImageFilterPython
else:
    import _itkInterpolateImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkInterpolateImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkInterpolateImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkArrayPython
import itk.itkContinuousIndexPython

def itkInterpolateImageFilterID2ID2_New():
    return itkInterpolateImageFilterID2ID2.New()

class itkInterpolateImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterID2ID2
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterID2ID2

        Create a new object of the class itkInterpolateImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterID2ID2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_swigregister(itkInterpolateImageFilterID2ID2)
itkInterpolateImageFilterID2ID2___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2___New_orig__
itkInterpolateImageFilterID2ID2_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID2ID2_cast


def itkInterpolateImageFilterID3ID3_New():
    return itkInterpolateImageFilterID3ID3.New()

class itkInterpolateImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterID3ID3
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterID3ID3

        Create a new object of the class itkInterpolateImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterID3ID3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_swigregister(itkInterpolateImageFilterID3ID3)
itkInterpolateImageFilterID3ID3___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3___New_orig__
itkInterpolateImageFilterID3ID3_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterID3ID3_cast


def itkInterpolateImageFilterIF2IF2_New():
    return itkInterpolateImageFilterIF2IF2.New()

class itkInterpolateImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIF2IF2
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIF2IF2

        Create a new object of the class itkInterpolateImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIF2IF2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_swigregister(itkInterpolateImageFilterIF2IF2)
itkInterpolateImageFilterIF2IF2___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2___New_orig__
itkInterpolateImageFilterIF2IF2_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF2IF2_cast


def itkInterpolateImageFilterIF3IF3_New():
    return itkInterpolateImageFilterIF3IF3.New()

class itkInterpolateImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIF3IF3
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIF3IF3

        Create a new object of the class itkInterpolateImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIF3IF3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_swigregister(itkInterpolateImageFilterIF3IF3)
itkInterpolateImageFilterIF3IF3___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3___New_orig__
itkInterpolateImageFilterIF3IF3_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIF3IF3_cast


def itkInterpolateImageFilterISS2ISS2_New():
    return itkInterpolateImageFilterISS2ISS2.New()

class itkInterpolateImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterISS2ISS2

        Create a new object of the class itkInterpolateImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterISS2ISS2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_swigregister(itkInterpolateImageFilterISS2ISS2)
itkInterpolateImageFilterISS2ISS2___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2___New_orig__
itkInterpolateImageFilterISS2ISS2_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS2ISS2_cast


def itkInterpolateImageFilterISS3ISS3_New():
    return itkInterpolateImageFilterISS3ISS3.New()

class itkInterpolateImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterISS3ISS3

        Create a new object of the class itkInterpolateImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterISS3ISS3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_swigregister(itkInterpolateImageFilterISS3ISS3)
itkInterpolateImageFilterISS3ISS3___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3___New_orig__
itkInterpolateImageFilterISS3ISS3_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterISS3ISS3_cast


def itkInterpolateImageFilterIUC2IUC2_New():
    return itkInterpolateImageFilterIUC2IUC2.New()

class itkInterpolateImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUC2IUC2

        Create a new object of the class itkInterpolateImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUC2IUC2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_swigregister(itkInterpolateImageFilterIUC2IUC2)
itkInterpolateImageFilterIUC2IUC2___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2___New_orig__
itkInterpolateImageFilterIUC2IUC2_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC2IUC2_cast


def itkInterpolateImageFilterIUC3IUC3_New():
    return itkInterpolateImageFilterIUC3IUC3.New()

class itkInterpolateImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUC3IUC3

        Create a new object of the class itkInterpolateImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUC3IUC3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_swigregister(itkInterpolateImageFilterIUC3IUC3)
itkInterpolateImageFilterIUC3IUC3___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3___New_orig__
itkInterpolateImageFilterIUC3IUC3_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUC3IUC3_cast


def itkInterpolateImageFilterIUS2IUS2_New():
    return itkInterpolateImageFilterIUS2IUS2.New()

class itkInterpolateImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUS2IUS2

        Create a new object of the class itkInterpolateImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUS2IUS2 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_swigregister(itkInterpolateImageFilterIUS2IUS2)
itkInterpolateImageFilterIUS2IUS2___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2___New_orig__
itkInterpolateImageFilterIUS2IUS2_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS2IUS2_cast


def itkInterpolateImageFilterIUS3IUS3_New():
    return itkInterpolateImageFilterIUS3IUS3.New()

class itkInterpolateImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Interpolate an image from two N-D images.

    Interpolates an image from two input images of the same type and same
    dimension (N). In particular, this filter forms an intermediate (N+1)D
    image by concatenating the two input images and interpolating an image
    a distance $ d \\in [0,1] $ away from the first image.

    The interpolation is delegated to a user specified
    InterpolateImageFunction. By default, linear interpolation is used.

    The filter is templated over the input image type and output image
    type. It assumes that the input and output have the same number of
    dimensions. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_Clone)
    SetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_SetInput1)
    GetInput1 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetInput1)
    SetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_SetInput2)
    GetInput2 = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetInput2)
    SetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_SetDistance)
    GetDistance = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetDistance)
    SetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_GetInterpolator)
    BeforeThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_BeforeThreadedGenerateData)
    AfterThreadedGenerateData = _swig_new_instance_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_AfterThreadedGenerateData)
    InputHasNumericTraitsCheck = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkInterpolateImageFilterPython.delete_itkInterpolateImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFilterIUS3IUS3

        Create a new object of the class itkInterpolateImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkInterpolateImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkInterpolateImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkInterpolateImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkInterpolateImageFilterIUS3IUS3 in _itkInterpolateImageFilterPython:
_itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_swigregister(itkInterpolateImageFilterIUS3IUS3)
itkInterpolateImageFilterIUS3IUS3___New_orig__ = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3___New_orig__
itkInterpolateImageFilterIUS3IUS3_cast = _itkInterpolateImageFilterPython.itkInterpolateImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def interpolate_image_filter(*args, **kwargs):
    """Procedural interface for InterpolateImageFilter"""
    import itk
    instance = itk.InterpolateImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def interpolate_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.InterpolateImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.InterpolateImageFilter.values()[0]
    else:
        filter_object = itk.InterpolateImageFilter

    interpolate_image_filter.__doc__ = filter_object.__doc__
    interpolate_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    interpolate_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.InterpolateImageFilter, itkTemplate.itkTemplate):
        interpolate_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        interpolate_image_filter.__doc__ += "\n"
        interpolate_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        interpolate_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



