# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKSpatialObjectsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDTITubeSpatialObjectPointPython
else:
    import _itkDTITubeSpatialObjectPointPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDTITubeSpatialObjectPointPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDTITubeSpatialObjectPointPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkTubeSpatialObjectPointPython
import itk.itkSpatialObjectPointPython
import itk.itkRGBAPixelPython
import itk.itkSpatialObjectBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkSpatialObjectPropertyPython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkArray2DPython
import itk.itkMatrixOffsetTransformBasePython
class vectoritkDTITubeSpatialObjectPoint3(object):
    r"""Proxy of C++ std::vector< itkDTITubeSpatialObjectPoint3 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___nonzero__)
    __bool__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___bool__)
    __len__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___len__)
    __getslice__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___getslice__)
    __setslice__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___setslice__)
    __delslice__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___delslice__)
    __delitem__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___delitem__)
    __getitem__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___getitem__)
    __setitem__ = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3___setitem__)
    pop = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_pop)
    append = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_append)
    empty = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_empty)
    size = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_size)
    swap = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_swap)
    begin = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_begin)
    end = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_end)
    rbegin = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_rbegin)
    rend = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_rend)
    clear = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_clear)
    get_allocator = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_get_allocator)
    pop_back = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_pop_back)
    erase = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_erase)

    def __init__(self, *args):
        r"""
        __init__(vectoritkDTITubeSpatialObjectPoint3 self) -> vectoritkDTITubeSpatialObjectPoint3
        __init__(vectoritkDTITubeSpatialObjectPoint3 self, vectoritkDTITubeSpatialObjectPoint3 other) -> vectoritkDTITubeSpatialObjectPoint3
        __init__(vectoritkDTITubeSpatialObjectPoint3 self, std::vector< itkDTITubeSpatialObjectPoint3 >::size_type size) -> vectoritkDTITubeSpatialObjectPoint3
        __init__(vectoritkDTITubeSpatialObjectPoint3 self, std::vector< itkDTITubeSpatialObjectPoint3 >::size_type size, itkDTITubeSpatialObjectPoint3 value) -> vectoritkDTITubeSpatialObjectPoint3
        """
        _itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_swiginit(self, _itkDTITubeSpatialObjectPointPython.new_vectoritkDTITubeSpatialObjectPoint3(*args))
    push_back = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_push_back)
    front = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_front)
    back = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_back)
    assign = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_assign)
    resize = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_resize)
    insert = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_insert)
    reserve = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_reserve)
    capacity = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_capacity)
    __swig_destroy__ = _itkDTITubeSpatialObjectPointPython.delete_vectoritkDTITubeSpatialObjectPoint3

# Register vectoritkDTITubeSpatialObjectPoint3 in _itkDTITubeSpatialObjectPointPython:
_itkDTITubeSpatialObjectPointPython.vectoritkDTITubeSpatialObjectPoint3_swigregister(vectoritkDTITubeSpatialObjectPoint3)

class itkDTITubeSpatialObjectPoint3(itk.itkTubeSpatialObjectPointPython.itkTubeSpatialObjectPoint3):
    r"""


    Point used for a tube definition.

    This class contains all the functions necessary to define a point that
    can be used to build tubes.

    See:   DTITubeSpatialObject 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkDTITubeSpatialObjectPointPython.delete_itkDTITubeSpatialObjectPoint3
    SetTensorMatrix = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_SetTensorMatrix)
    GetTensorMatrix = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_GetTensorMatrix)
    AddField = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_AddField)
    SetField = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_SetField)
    GetFields = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_GetFields)
    GetField = _swig_new_instance_method(_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_GetField)

    def __init__(self, *args):
        r"""
        __init__(itkDTITubeSpatialObjectPoint3 self) -> itkDTITubeSpatialObjectPoint3
        __init__(itkDTITubeSpatialObjectPoint3 self, itkDTITubeSpatialObjectPoint3 arg0) -> itkDTITubeSpatialObjectPoint3


        Point used for a tube definition.

        This class contains all the functions necessary to define a point that
        can be used to build tubes.

        See:   DTITubeSpatialObject 
        """
        _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_swiginit(self, _itkDTITubeSpatialObjectPointPython.new_itkDTITubeSpatialObjectPoint3(*args))

# Register itkDTITubeSpatialObjectPoint3 in _itkDTITubeSpatialObjectPointPython:
_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPoint3_swigregister(itkDTITubeSpatialObjectPoint3)

class itkDTITubeSpatialObjectPointEnums(object):
    r"""Proxy of C++ itkDTITubeSpatialObjectPointEnums class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DTITubeSpatialObjectPointField_FA = _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_DTITubeSpatialObjectPointField_FA
    
    DTITubeSpatialObjectPointField_ADC = _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_DTITubeSpatialObjectPointField_ADC
    
    DTITubeSpatialObjectPointField_GA = _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_DTITubeSpatialObjectPointField_GA
    

    def __init__(self, *args):
        r"""
        __init__(itkDTITubeSpatialObjectPointEnums self) -> itkDTITubeSpatialObjectPointEnums
        __init__(itkDTITubeSpatialObjectPointEnums self, itkDTITubeSpatialObjectPointEnums arg0) -> itkDTITubeSpatialObjectPointEnums
        """
        _itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_swiginit(self, _itkDTITubeSpatialObjectPointPython.new_itkDTITubeSpatialObjectPointEnums(*args))
    __swig_destroy__ = _itkDTITubeSpatialObjectPointPython.delete_itkDTITubeSpatialObjectPointEnums

# Register itkDTITubeSpatialObjectPointEnums in _itkDTITubeSpatialObjectPointPython:
_itkDTITubeSpatialObjectPointPython.itkDTITubeSpatialObjectPointEnums_swigregister(itkDTITubeSpatialObjectPointEnums)



