# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkZeroCrossingImageFilterPython
else:
    import _itkZeroCrossingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkZeroCrossingImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkZeroCrossingImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkZeroCrossingImageFilterID2ID2_New():
    return itkZeroCrossingImageFilterID2ID2.New()

class itkZeroCrossingImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    This filter finds the closest pixel to the zero-crossings (sign
    changes) in a signed itk::Image.

    Pixels closest to zero-crossings are labeled with a foreground value.
    All other pixels are marked with a background value. The algorithm
    works by detecting differences in sign among neighbors using city-
    block style connectivity (4-neighbors in 2d, 6-neighbors in 3d, etc.).

    Inputs and Outputs The input to this filter is an itk::Image of
    arbitrary dimension. The algorithm assumes a signed data type (zero-
    crossings are not defined for unsigned data types), and requires that
    operator>, operator<, operator==, and operator!= are defined.

    The output of the filter is a binary, labeled image of user-specified
    type. By default, zero-crossing pixels are labeled with a default
    "foreground" value of
    itk::NumericTraits<OutputDataType>::OneValue(), where OutputDataType
    is the data type of the output image. All other pixels are labeled
    with a default "background" value of
    itk::NumericTraits<OutputDataType>::ZeroValue(). Parameters There are
    two parameters for this filter. ForegroundValue is the value that
    marks zero-crossing pixels. The BackgroundValue is the value given to
    all other pixels.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_GenerateInputRequestedRegion)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_GetBackgroundValue)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterID2ID2
    cast = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterID2ID2

        Create a new object of the class itkZeroCrossingImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterID2ID2 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_swigregister(itkZeroCrossingImageFilterID2ID2)
itkZeroCrossingImageFilterID2ID2___New_orig__ = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2___New_orig__
itkZeroCrossingImageFilterID2ID2_cast = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID2ID2_cast


def itkZeroCrossingImageFilterID3ID3_New():
    return itkZeroCrossingImageFilterID3ID3.New()

class itkZeroCrossingImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    This filter finds the closest pixel to the zero-crossings (sign
    changes) in a signed itk::Image.

    Pixels closest to zero-crossings are labeled with a foreground value.
    All other pixels are marked with a background value. The algorithm
    works by detecting differences in sign among neighbors using city-
    block style connectivity (4-neighbors in 2d, 6-neighbors in 3d, etc.).

    Inputs and Outputs The input to this filter is an itk::Image of
    arbitrary dimension. The algorithm assumes a signed data type (zero-
    crossings are not defined for unsigned data types), and requires that
    operator>, operator<, operator==, and operator!= are defined.

    The output of the filter is a binary, labeled image of user-specified
    type. By default, zero-crossing pixels are labeled with a default
    "foreground" value of
    itk::NumericTraits<OutputDataType>::OneValue(), where OutputDataType
    is the data type of the output image. All other pixels are labeled
    with a default "background" value of
    itk::NumericTraits<OutputDataType>::ZeroValue(). Parameters There are
    two parameters for this filter. ForegroundValue is the value that
    marks zero-crossing pixels. The BackgroundValue is the value given to
    all other pixels.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_GenerateInputRequestedRegion)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_GetBackgroundValue)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterID3ID3
    cast = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterID3ID3

        Create a new object of the class itkZeroCrossingImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterID3ID3 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_swigregister(itkZeroCrossingImageFilterID3ID3)
itkZeroCrossingImageFilterID3ID3___New_orig__ = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3___New_orig__
itkZeroCrossingImageFilterID3ID3_cast = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterID3ID3_cast


def itkZeroCrossingImageFilterIF2IF2_New():
    return itkZeroCrossingImageFilterIF2IF2.New()

class itkZeroCrossingImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    This filter finds the closest pixel to the zero-crossings (sign
    changes) in a signed itk::Image.

    Pixels closest to zero-crossings are labeled with a foreground value.
    All other pixels are marked with a background value. The algorithm
    works by detecting differences in sign among neighbors using city-
    block style connectivity (4-neighbors in 2d, 6-neighbors in 3d, etc.).

    Inputs and Outputs The input to this filter is an itk::Image of
    arbitrary dimension. The algorithm assumes a signed data type (zero-
    crossings are not defined for unsigned data types), and requires that
    operator>, operator<, operator==, and operator!= are defined.

    The output of the filter is a binary, labeled image of user-specified
    type. By default, zero-crossing pixels are labeled with a default
    "foreground" value of
    itk::NumericTraits<OutputDataType>::OneValue(), where OutputDataType
    is the data type of the output image. All other pixels are labeled
    with a default "background" value of
    itk::NumericTraits<OutputDataType>::ZeroValue(). Parameters There are
    two parameters for this filter. ForegroundValue is the value that
    marks zero-crossing pixels. The BackgroundValue is the value given to
    all other pixels.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_GenerateInputRequestedRegion)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_GetBackgroundValue)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterIF2IF2
    cast = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterIF2IF2

        Create a new object of the class itkZeroCrossingImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterIF2IF2 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_swigregister(itkZeroCrossingImageFilterIF2IF2)
itkZeroCrossingImageFilterIF2IF2___New_orig__ = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2___New_orig__
itkZeroCrossingImageFilterIF2IF2_cast = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF2IF2_cast


def itkZeroCrossingImageFilterIF3IF3_New():
    return itkZeroCrossingImageFilterIF3IF3.New()

class itkZeroCrossingImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    This filter finds the closest pixel to the zero-crossings (sign
    changes) in a signed itk::Image.

    Pixels closest to zero-crossings are labeled with a foreground value.
    All other pixels are marked with a background value. The algorithm
    works by detecting differences in sign among neighbors using city-
    block style connectivity (4-neighbors in 2d, 6-neighbors in 3d, etc.).

    Inputs and Outputs The input to this filter is an itk::Image of
    arbitrary dimension. The algorithm assumes a signed data type (zero-
    crossings are not defined for unsigned data types), and requires that
    operator>, operator<, operator==, and operator!= are defined.

    The output of the filter is a binary, labeled image of user-specified
    type. By default, zero-crossing pixels are labeled with a default
    "foreground" value of
    itk::NumericTraits<OutputDataType>::OneValue(), where OutputDataType
    is the data type of the output image. All other pixels are labeled
    with a default "background" value of
    itk::NumericTraits<OutputDataType>::ZeroValue(). Parameters There are
    two parameters for this filter. ForegroundValue is the value that
    marks zero-crossing pixels. The BackgroundValue is the value given to
    all other pixels.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_GenerateInputRequestedRegion)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_GetBackgroundValue)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterIF3IF3
    cast = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterIF3IF3

        Create a new object of the class itkZeroCrossingImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterIF3IF3 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_swigregister(itkZeroCrossingImageFilterIF3IF3)
itkZeroCrossingImageFilterIF3IF3___New_orig__ = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3___New_orig__
itkZeroCrossingImageFilterIF3IF3_cast = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterIF3IF3_cast


def itkZeroCrossingImageFilterISS2ISS2_New():
    return itkZeroCrossingImageFilterISS2ISS2.New()

class itkZeroCrossingImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    This filter finds the closest pixel to the zero-crossings (sign
    changes) in a signed itk::Image.

    Pixels closest to zero-crossings are labeled with a foreground value.
    All other pixels are marked with a background value. The algorithm
    works by detecting differences in sign among neighbors using city-
    block style connectivity (4-neighbors in 2d, 6-neighbors in 3d, etc.).

    Inputs and Outputs The input to this filter is an itk::Image of
    arbitrary dimension. The algorithm assumes a signed data type (zero-
    crossings are not defined for unsigned data types), and requires that
    operator>, operator<, operator==, and operator!= are defined.

    The output of the filter is a binary, labeled image of user-specified
    type. By default, zero-crossing pixels are labeled with a default
    "foreground" value of
    itk::NumericTraits<OutputDataType>::OneValue(), where OutputDataType
    is the data type of the output image. All other pixels are labeled
    with a default "background" value of
    itk::NumericTraits<OutputDataType>::ZeroValue(). Parameters There are
    two parameters for this filter. ForegroundValue is the value that
    marks zero-crossing pixels. The BackgroundValue is the value given to
    all other pixels.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_GenerateInputRequestedRegion)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_GetBackgroundValue)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterISS2ISS2

        Create a new object of the class itkZeroCrossingImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterISS2ISS2 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_swigregister(itkZeroCrossingImageFilterISS2ISS2)
itkZeroCrossingImageFilterISS2ISS2___New_orig__ = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2___New_orig__
itkZeroCrossingImageFilterISS2ISS2_cast = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS2ISS2_cast


def itkZeroCrossingImageFilterISS3ISS3_New():
    return itkZeroCrossingImageFilterISS3ISS3.New()

class itkZeroCrossingImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    This filter finds the closest pixel to the zero-crossings (sign
    changes) in a signed itk::Image.

    Pixels closest to zero-crossings are labeled with a foreground value.
    All other pixels are marked with a background value. The algorithm
    works by detecting differences in sign among neighbors using city-
    block style connectivity (4-neighbors in 2d, 6-neighbors in 3d, etc.).

    Inputs and Outputs The input to this filter is an itk::Image of
    arbitrary dimension. The algorithm assumes a signed data type (zero-
    crossings are not defined for unsigned data types), and requires that
    operator>, operator<, operator==, and operator!= are defined.

    The output of the filter is a binary, labeled image of user-specified
    type. By default, zero-crossing pixels are labeled with a default
    "foreground" value of
    itk::NumericTraits<OutputDataType>::OneValue(), where OutputDataType
    is the data type of the output image. All other pixels are labeled
    with a default "background" value of
    itk::NumericTraits<OutputDataType>::ZeroValue(). Parameters There are
    two parameters for this filter. ForegroundValue is the value that
    marks zero-crossing pixels. The BackgroundValue is the value given to
    all other pixels.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_Clone)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_GenerateInputRequestedRegion)
    SetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_SetForegroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_GetForegroundValue)
    SetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_GetBackgroundValue)
    OutputEqualityComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_OutputEqualityComparableCheck
    
    SameDimensionCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_SameDimensionCheck
    
    InputComparableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_InputComparableCheck
    
    OutputOStreamWritableCheck = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkZeroCrossingImageFilterPython.delete_itkZeroCrossingImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkZeroCrossingImageFilterISS3ISS3

        Create a new object of the class itkZeroCrossingImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkZeroCrossingImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkZeroCrossingImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkZeroCrossingImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkZeroCrossingImageFilterISS3ISS3 in _itkZeroCrossingImageFilterPython:
_itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_swigregister(itkZeroCrossingImageFilterISS3ISS3)
itkZeroCrossingImageFilterISS3ISS3___New_orig__ = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3___New_orig__
itkZeroCrossingImageFilterISS3ISS3_cast = _itkZeroCrossingImageFilterPython.itkZeroCrossingImageFilterISS3ISS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def zero_crossing_image_filter(*args, **kwargs):
    """Procedural interface for ZeroCrossingImageFilter"""
    import itk
    instance = itk.ZeroCrossingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def zero_crossing_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ZeroCrossingImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ZeroCrossingImageFilter.values()[0]
    else:
        filter_object = itk.ZeroCrossingImageFilter

    zero_crossing_image_filter.__doc__ = filter_object.__doc__
    zero_crossing_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    zero_crossing_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ZeroCrossingImageFilter, itkTemplate.itkTemplate):
        zero_crossing_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        zero_crossing_image_filter.__doc__ += "\n"
        zero_crossing_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        zero_crossing_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



