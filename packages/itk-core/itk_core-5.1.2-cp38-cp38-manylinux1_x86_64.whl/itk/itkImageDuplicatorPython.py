# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageDuplicatorPython
else:
    import _itkImageDuplicatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageDuplicatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageDuplicatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython

def itkImageDuplicatorICVF22_New():
    return itkImageDuplicatorICVF22.New()

class itkImageDuplicatorICVF22(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF22_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF22_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF22_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF22_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorICVF22
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF22_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorICVF22

        Create a new object of the class itkImageDuplicatorICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorICVF22 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorICVF22_swigregister(itkImageDuplicatorICVF22)
itkImageDuplicatorICVF22___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorICVF22___New_orig__
itkImageDuplicatorICVF22_cast = _itkImageDuplicatorPython.itkImageDuplicatorICVF22_cast


def itkImageDuplicatorICVF23_New():
    return itkImageDuplicatorICVF23.New()

class itkImageDuplicatorICVF23(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF23_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF23_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF23_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF23_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorICVF23
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF23_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorICVF23

        Create a new object of the class itkImageDuplicatorICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorICVF23 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorICVF23_swigregister(itkImageDuplicatorICVF23)
itkImageDuplicatorICVF23___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorICVF23___New_orig__
itkImageDuplicatorICVF23_cast = _itkImageDuplicatorPython.itkImageDuplicatorICVF23_cast


def itkImageDuplicatorICVF32_New():
    return itkImageDuplicatorICVF32.New()

class itkImageDuplicatorICVF32(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF32_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF32_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF32_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF32_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorICVF32
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF32_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorICVF32

        Create a new object of the class itkImageDuplicatorICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorICVF32 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorICVF32_swigregister(itkImageDuplicatorICVF32)
itkImageDuplicatorICVF32___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorICVF32___New_orig__
itkImageDuplicatorICVF32_cast = _itkImageDuplicatorPython.itkImageDuplicatorICVF32_cast


def itkImageDuplicatorICVF33_New():
    return itkImageDuplicatorICVF33.New()

class itkImageDuplicatorICVF33(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF33_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF33_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF33_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF33_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorICVF33
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF33_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorICVF33

        Create a new object of the class itkImageDuplicatorICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorICVF33 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorICVF33_swigregister(itkImageDuplicatorICVF33)
itkImageDuplicatorICVF33___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorICVF33___New_orig__
itkImageDuplicatorICVF33_cast = _itkImageDuplicatorPython.itkImageDuplicatorICVF33_cast


def itkImageDuplicatorICVF42_New():
    return itkImageDuplicatorICVF42.New()

class itkImageDuplicatorICVF42(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF42_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF42_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF42_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF42_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorICVF42
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF42_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorICVF42

        Create a new object of the class itkImageDuplicatorICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorICVF42 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorICVF42_swigregister(itkImageDuplicatorICVF42)
itkImageDuplicatorICVF42___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorICVF42___New_orig__
itkImageDuplicatorICVF42_cast = _itkImageDuplicatorPython.itkImageDuplicatorICVF42_cast


def itkImageDuplicatorICVF43_New():
    return itkImageDuplicatorICVF43.New()

class itkImageDuplicatorICVF43(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF43_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF43_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF43_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF43_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorICVF43
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorICVF43_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorICVF43

        Create a new object of the class itkImageDuplicatorICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorICVF43 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorICVF43_swigregister(itkImageDuplicatorICVF43)
itkImageDuplicatorICVF43___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorICVF43___New_orig__
itkImageDuplicatorICVF43_cast = _itkImageDuplicatorPython.itkImageDuplicatorICVF43_cast


def itkImageDuplicatorID2_New():
    return itkImageDuplicatorID2.New()

class itkImageDuplicatorID2(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorID2_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorID2_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorID2_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorID2_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorID2
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorID2_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorID2

        Create a new object of the class itkImageDuplicatorID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorID2 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorID2_swigregister(itkImageDuplicatorID2)
itkImageDuplicatorID2___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorID2___New_orig__
itkImageDuplicatorID2_cast = _itkImageDuplicatorPython.itkImageDuplicatorID2_cast


def itkImageDuplicatorID3_New():
    return itkImageDuplicatorID3.New()

class itkImageDuplicatorID3(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorID3_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorID3_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorID3_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorID3_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorID3
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorID3_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorID3

        Create a new object of the class itkImageDuplicatorID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorID3 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorID3_swigregister(itkImageDuplicatorID3)
itkImageDuplicatorID3___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorID3___New_orig__
itkImageDuplicatorID3_cast = _itkImageDuplicatorPython.itkImageDuplicatorID3_cast


def itkImageDuplicatorIF2_New():
    return itkImageDuplicatorIF2.New()

class itkImageDuplicatorIF2(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIF2_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIF2_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIF2_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIF2_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIF2
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIF2_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIF2

        Create a new object of the class itkImageDuplicatorIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIF2 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIF2_swigregister(itkImageDuplicatorIF2)
itkImageDuplicatorIF2___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIF2___New_orig__
itkImageDuplicatorIF2_cast = _itkImageDuplicatorPython.itkImageDuplicatorIF2_cast


def itkImageDuplicatorIF3_New():
    return itkImageDuplicatorIF3.New()

class itkImageDuplicatorIF3(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIF3_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIF3_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIF3_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIF3_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIF3
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIF3_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIF3

        Create a new object of the class itkImageDuplicatorIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIF3 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIF3_swigregister(itkImageDuplicatorIF3)
itkImageDuplicatorIF3___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIF3___New_orig__
itkImageDuplicatorIF3_cast = _itkImageDuplicatorPython.itkImageDuplicatorIF3_cast


def itkImageDuplicatorIRGBAUC2_New():
    return itkImageDuplicatorIRGBAUC2.New()

class itkImageDuplicatorIRGBAUC2(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIRGBAUC2
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIRGBAUC2

        Create a new object of the class itkImageDuplicatorIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIRGBAUC2 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2_swigregister(itkImageDuplicatorIRGBAUC2)
itkImageDuplicatorIRGBAUC2___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2___New_orig__
itkImageDuplicatorIRGBAUC2_cast = _itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC2_cast


def itkImageDuplicatorIRGBAUC3_New():
    return itkImageDuplicatorIRGBAUC3.New()

class itkImageDuplicatorIRGBAUC3(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIRGBAUC3
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIRGBAUC3

        Create a new object of the class itkImageDuplicatorIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIRGBAUC3 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3_swigregister(itkImageDuplicatorIRGBAUC3)
itkImageDuplicatorIRGBAUC3___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3___New_orig__
itkImageDuplicatorIRGBAUC3_cast = _itkImageDuplicatorPython.itkImageDuplicatorIRGBAUC3_cast


def itkImageDuplicatorIRGBUC2_New():
    return itkImageDuplicatorIRGBUC2.New()

class itkImageDuplicatorIRGBUC2(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIRGBUC2
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIRGBUC2

        Create a new object of the class itkImageDuplicatorIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIRGBUC2 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2_swigregister(itkImageDuplicatorIRGBUC2)
itkImageDuplicatorIRGBUC2___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2___New_orig__
itkImageDuplicatorIRGBUC2_cast = _itkImageDuplicatorPython.itkImageDuplicatorIRGBUC2_cast


def itkImageDuplicatorIRGBUC3_New():
    return itkImageDuplicatorIRGBUC3.New()

class itkImageDuplicatorIRGBUC3(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIRGBUC3
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIRGBUC3

        Create a new object of the class itkImageDuplicatorIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIRGBUC3 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3_swigregister(itkImageDuplicatorIRGBUC3)
itkImageDuplicatorIRGBUC3___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3___New_orig__
itkImageDuplicatorIRGBUC3_cast = _itkImageDuplicatorPython.itkImageDuplicatorIRGBUC3_cast


def itkImageDuplicatorISS2_New():
    return itkImageDuplicatorISS2.New()

class itkImageDuplicatorISS2(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISS2_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISS2_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISS2_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISS2_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorISS2
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorISS2_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorISS2

        Create a new object of the class itkImageDuplicatorISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorISS2 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorISS2_swigregister(itkImageDuplicatorISS2)
itkImageDuplicatorISS2___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorISS2___New_orig__
itkImageDuplicatorISS2_cast = _itkImageDuplicatorPython.itkImageDuplicatorISS2_cast


def itkImageDuplicatorISS3_New():
    return itkImageDuplicatorISS3.New()

class itkImageDuplicatorISS3(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISS3_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISS3_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISS3_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISS3_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorISS3
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorISS3_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorISS3

        Create a new object of the class itkImageDuplicatorISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorISS3 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorISS3_swigregister(itkImageDuplicatorISS3)
itkImageDuplicatorISS3___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorISS3___New_orig__
itkImageDuplicatorISS3_cast = _itkImageDuplicatorPython.itkImageDuplicatorISS3_cast


def itkImageDuplicatorISSRTD22_New():
    return itkImageDuplicatorISSRTD22.New()

class itkImageDuplicatorISSRTD22(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD22___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD22_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD22_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD22_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD22_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorISSRTD22
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD22_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorISSRTD22

        Create a new object of the class itkImageDuplicatorISSRTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorISSRTD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorISSRTD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorISSRTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorISSRTD22 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorISSRTD22_swigregister(itkImageDuplicatorISSRTD22)
itkImageDuplicatorISSRTD22___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorISSRTD22___New_orig__
itkImageDuplicatorISSRTD22_cast = _itkImageDuplicatorPython.itkImageDuplicatorISSRTD22_cast


def itkImageDuplicatorISSRTD33_New():
    return itkImageDuplicatorISSRTD33.New()

class itkImageDuplicatorISSRTD33(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD33___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD33_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD33_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD33_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD33_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorISSRTD33
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorISSRTD33_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorISSRTD33

        Create a new object of the class itkImageDuplicatorISSRTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorISSRTD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorISSRTD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorISSRTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorISSRTD33 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorISSRTD33_swigregister(itkImageDuplicatorISSRTD33)
itkImageDuplicatorISSRTD33___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorISSRTD33___New_orig__
itkImageDuplicatorISSRTD33_cast = _itkImageDuplicatorPython.itkImageDuplicatorISSRTD33_cast


def itkImageDuplicatorIUC2_New():
    return itkImageDuplicatorIUC2.New()

class itkImageDuplicatorIUC2(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC2_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC2_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC2_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC2_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIUC2
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC2_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIUC2

        Create a new object of the class itkImageDuplicatorIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIUC2 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIUC2_swigregister(itkImageDuplicatorIUC2)
itkImageDuplicatorIUC2___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIUC2___New_orig__
itkImageDuplicatorIUC2_cast = _itkImageDuplicatorPython.itkImageDuplicatorIUC2_cast


def itkImageDuplicatorIUC3_New():
    return itkImageDuplicatorIUC3.New()

class itkImageDuplicatorIUC3(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC3_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC3_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC3_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC3_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIUC3
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUC3_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIUC3

        Create a new object of the class itkImageDuplicatorIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIUC3 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIUC3_swigregister(itkImageDuplicatorIUC3)
itkImageDuplicatorIUC3___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIUC3___New_orig__
itkImageDuplicatorIUC3_cast = _itkImageDuplicatorPython.itkImageDuplicatorIUC3_cast


def itkImageDuplicatorIUL2_New():
    return itkImageDuplicatorIUL2.New()

class itkImageDuplicatorIUL2(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL2_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL2_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL2_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL2_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIUL2
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL2_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIUL2

        Create a new object of the class itkImageDuplicatorIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIUL2 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIUL2_swigregister(itkImageDuplicatorIUL2)
itkImageDuplicatorIUL2___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIUL2___New_orig__
itkImageDuplicatorIUL2_cast = _itkImageDuplicatorPython.itkImageDuplicatorIUL2_cast


def itkImageDuplicatorIUL3_New():
    return itkImageDuplicatorIUL3.New()

class itkImageDuplicatorIUL3(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL3_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL3_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL3_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL3_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIUL3
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUL3_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIUL3

        Create a new object of the class itkImageDuplicatorIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIUL3 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIUL3_swigregister(itkImageDuplicatorIUL3)
itkImageDuplicatorIUL3___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIUL3___New_orig__
itkImageDuplicatorIUL3_cast = _itkImageDuplicatorPython.itkImageDuplicatorIUL3_cast


def itkImageDuplicatorIUS2_New():
    return itkImageDuplicatorIUS2.New()

class itkImageDuplicatorIUS2(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS2_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS2_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS2_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS2_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIUS2
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS2_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIUS2

        Create a new object of the class itkImageDuplicatorIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIUS2 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIUS2_swigregister(itkImageDuplicatorIUS2)
itkImageDuplicatorIUS2___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIUS2___New_orig__
itkImageDuplicatorIUS2_cast = _itkImageDuplicatorPython.itkImageDuplicatorIUS2_cast


def itkImageDuplicatorIUS3_New():
    return itkImageDuplicatorIUS3.New()

class itkImageDuplicatorIUS3(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS3_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS3_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS3_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS3_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIUS3
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIUS3_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIUS3

        Create a new object of the class itkImageDuplicatorIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIUS3 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIUS3_swigregister(itkImageDuplicatorIUS3)
itkImageDuplicatorIUS3___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIUS3___New_orig__
itkImageDuplicatorIUS3_cast = _itkImageDuplicatorPython.itkImageDuplicatorIUS3_cast


def itkImageDuplicatorIVF22_New():
    return itkImageDuplicatorIVF22.New()

class itkImageDuplicatorIVF22(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF22_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF22_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF22_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF22_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIVF22
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF22_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIVF22

        Create a new object of the class itkImageDuplicatorIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIVF22 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIVF22_swigregister(itkImageDuplicatorIVF22)
itkImageDuplicatorIVF22___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIVF22___New_orig__
itkImageDuplicatorIVF22_cast = _itkImageDuplicatorPython.itkImageDuplicatorIVF22_cast


def itkImageDuplicatorIVF23_New():
    return itkImageDuplicatorIVF23.New()

class itkImageDuplicatorIVF23(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF23_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF23_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF23_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF23_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIVF23
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF23_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIVF23

        Create a new object of the class itkImageDuplicatorIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIVF23 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIVF23_swigregister(itkImageDuplicatorIVF23)
itkImageDuplicatorIVF23___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIVF23___New_orig__
itkImageDuplicatorIVF23_cast = _itkImageDuplicatorPython.itkImageDuplicatorIVF23_cast


def itkImageDuplicatorIVF32_New():
    return itkImageDuplicatorIVF32.New()

class itkImageDuplicatorIVF32(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF32_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF32_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF32_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF32_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIVF32
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF32_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIVF32

        Create a new object of the class itkImageDuplicatorIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIVF32 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIVF32_swigregister(itkImageDuplicatorIVF32)
itkImageDuplicatorIVF32___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIVF32___New_orig__
itkImageDuplicatorIVF32_cast = _itkImageDuplicatorPython.itkImageDuplicatorIVF32_cast


def itkImageDuplicatorIVF33_New():
    return itkImageDuplicatorIVF33.New()

class itkImageDuplicatorIVF33(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF33_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF33_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF33_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF33_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIVF33
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF33_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIVF33

        Create a new object of the class itkImageDuplicatorIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIVF33 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIVF33_swigregister(itkImageDuplicatorIVF33)
itkImageDuplicatorIVF33___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIVF33___New_orig__
itkImageDuplicatorIVF33_cast = _itkImageDuplicatorPython.itkImageDuplicatorIVF33_cast


def itkImageDuplicatorIVF42_New():
    return itkImageDuplicatorIVF42.New()

class itkImageDuplicatorIVF42(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF42_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF42_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF42_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF42_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIVF42
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF42_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIVF42

        Create a new object of the class itkImageDuplicatorIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIVF42 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIVF42_swigregister(itkImageDuplicatorIVF42)
itkImageDuplicatorIVF42___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIVF42___New_orig__
itkImageDuplicatorIVF42_cast = _itkImageDuplicatorPython.itkImageDuplicatorIVF42_cast


def itkImageDuplicatorIVF43_New():
    return itkImageDuplicatorIVF43.New()

class itkImageDuplicatorIVF43(itk.ITKCommonBasePython.itkObject):
    r"""


    A helper class which creates an image which is perfect copy of the
    input image.

    This class is NOT a filter. Although it has an API similar to a
    filter, this class is not intended to be used in a pipeline. Instead,
    the typical use will be like it is illustrated in the following code:

    Note that the Update() method must be called explicitly in the filter
    that provides the input to the ImageDuplicator object. This is needed
    because the ImageDuplicator is not a pipeline filter. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF43_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF43_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF43_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF43_Update)
    __swig_destroy__ = _itkImageDuplicatorPython.delete_itkImageDuplicatorIVF43
    cast = _swig_new_static_method(_itkImageDuplicatorPython.itkImageDuplicatorIVF43_cast)

    def __internal_call__(self):
        """Create an object, update with the inputs and
        attributes, and return the result.

        The syntax is the same as the one used in New().
        Update() is ran once the input are changed, and
        the current output.
        """
        self.Update()
        return self.GetOutput()


    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIVF43

        Create a new object of the class itkImageDuplicatorIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIVF43 in _itkImageDuplicatorPython:
_itkImageDuplicatorPython.itkImageDuplicatorIVF43_swigregister(itkImageDuplicatorIVF43)
itkImageDuplicatorIVF43___New_orig__ = _itkImageDuplicatorPython.itkImageDuplicatorIVF43___New_orig__
itkImageDuplicatorIVF43_cast = _itkImageDuplicatorPython.itkImageDuplicatorIVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_duplicator(*args, **kwargs):
    """Procedural interface for ImageDuplicator"""
    import itk
    instance = itk.ImageDuplicator.New(*args, **kwargs)
    return instance.__internal_call__()

def image_duplicator_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageDuplicator, itkTemplate.itkTemplate):
        filter_object = itk.ImageDuplicator.values()[0]
    else:
        filter_object = itk.ImageDuplicator

    image_duplicator.__doc__ = filter_object.__doc__
    image_duplicator.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_duplicator.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageDuplicator, itkTemplate.itkTemplate):
        image_duplicator.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_duplicator.__doc__ += "\n"
        image_duplicator.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_duplicator.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



