# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WebhooksActivityEntryAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attempt': 'int',
        'created': 'str',
        'endpoint_url': 'str',
        'event': 'str',
        'response': 'str',
        'response_size': 'int',
        'status': 'int'
    }

    attribute_map = {
        'attempt': 'attempt',
        'created': 'created',
        'endpoint_url': 'endpointUrl',
        'event': 'event',
        'response': 'response',
        'response_size': 'responseSize',
        'status': 'status'
    }

    def __init__(self, attempt=None, created=None, endpoint_url=None, event=None, response=None, response_size=None, status=None):  # noqa: E501
        """WebhooksActivityEntryAttributes - a model defined in Swagger"""  # noqa: E501
        self._attempt = None
        self._created = None
        self._endpoint_url = None
        self._event = None
        self._response = None
        self._response_size = None
        self._status = None
        self.discriminator = None
        if attempt is not None:
            self.attempt = attempt
        if created is not None:
            self.created = created
        if endpoint_url is not None:
            self.endpoint_url = endpoint_url
        if event is not None:
            self.event = event
        if response is not None:
            self.response = response
        if response_size is not None:
            self.response_size = response_size
        if status is not None:
            self.status = status

    @property
    def attempt(self):
        """Gets the attempt of this WebhooksActivityEntryAttributes.  # noqa: E501


        :return: The attempt of this WebhooksActivityEntryAttributes.  # noqa: E501
        :rtype: int
        """
        return self._attempt

    @attempt.setter
    def attempt(self, attempt):
        """Sets the attempt of this WebhooksActivityEntryAttributes.


        :param attempt: The attempt of this WebhooksActivityEntryAttributes.  # noqa: E501
        :type: int
        """

        self._attempt = attempt

    @property
    def created(self):
        """Gets the created of this WebhooksActivityEntryAttributes.  # noqa: E501


        :return: The created of this WebhooksActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this WebhooksActivityEntryAttributes.


        :param created: The created of this WebhooksActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this WebhooksActivityEntryAttributes.  # noqa: E501


        :return: The endpoint_url of this WebhooksActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this WebhooksActivityEntryAttributes.


        :param endpoint_url: The endpoint_url of this WebhooksActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._endpoint_url = endpoint_url

    @property
    def event(self):
        """Gets the event of this WebhooksActivityEntryAttributes.  # noqa: E501


        :return: The event of this WebhooksActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WebhooksActivityEntryAttributes.


        :param event: The event of this WebhooksActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._event = event

    @property
    def response(self):
        """Gets the response of this WebhooksActivityEntryAttributes.  # noqa: E501


        :return: The response of this WebhooksActivityEntryAttributes.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this WebhooksActivityEntryAttributes.


        :param response: The response of this WebhooksActivityEntryAttributes.  # noqa: E501
        :type: str
        """

        self._response = response

    @property
    def response_size(self):
        """Gets the response_size of this WebhooksActivityEntryAttributes.  # noqa: E501


        :return: The response_size of this WebhooksActivityEntryAttributes.  # noqa: E501
        :rtype: int
        """
        return self._response_size

    @response_size.setter
    def response_size(self, response_size):
        """Sets the response_size of this WebhooksActivityEntryAttributes.


        :param response_size: The response_size of this WebhooksActivityEntryAttributes.  # noqa: E501
        :type: int
        """

        self._response_size = response_size

    @property
    def status(self):
        """Gets the status of this WebhooksActivityEntryAttributes.  # noqa: E501


        :return: The status of this WebhooksActivityEntryAttributes.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WebhooksActivityEntryAttributes.


        :param status: The status of this WebhooksActivityEntryAttributes.  # noqa: E501
        :type: int
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhooksActivityEntryAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhooksActivityEntryAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
