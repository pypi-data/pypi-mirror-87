# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryThresholdImageFilterPython
else:
    import _itkBinaryThresholdImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinaryThresholdImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinaryThresholdImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkBinaryThresholdImageFilterID2ID2_Superclass_New():
    return itkBinaryThresholdImageFilterID2ID2_Superclass.New()

class itkBinaryThresholdImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2ID2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2ID2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Superclass_swigregister(itkBinaryThresholdImageFilterID2ID2_Superclass)
itkBinaryThresholdImageFilterID2ID2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Superclass___New_orig__
itkBinaryThresholdImageFilterID2ID2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Superclass_cast


def itkBinaryThresholdImageFilterID2IF2_Superclass_New():
    return itkBinaryThresholdImageFilterID2IF2_Superclass.New()

class itkBinaryThresholdImageFilterID2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2IF2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2IF2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2IF2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Superclass_swigregister(itkBinaryThresholdImageFilterID2IF2_Superclass)
itkBinaryThresholdImageFilterID2IF2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Superclass___New_orig__
itkBinaryThresholdImageFilterID2IF2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Superclass_cast


def itkBinaryThresholdImageFilterID2ISS2_Superclass_New():
    return itkBinaryThresholdImageFilterID2ISS2_Superclass.New()

class itkBinaryThresholdImageFilterID2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2ISS2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2ISS2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2ISS2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Superclass_swigregister(itkBinaryThresholdImageFilterID2ISS2_Superclass)
itkBinaryThresholdImageFilterID2ISS2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Superclass___New_orig__
itkBinaryThresholdImageFilterID2ISS2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Superclass_cast


def itkBinaryThresholdImageFilterID2IUC2_Superclass_New():
    return itkBinaryThresholdImageFilterID2IUC2_Superclass.New()

class itkBinaryThresholdImageFilterID2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2IUC2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2IUC2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2IUC2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Superclass_swigregister(itkBinaryThresholdImageFilterID2IUC2_Superclass)
itkBinaryThresholdImageFilterID2IUC2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Superclass___New_orig__
itkBinaryThresholdImageFilterID2IUC2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Superclass_cast


def itkBinaryThresholdImageFilterID2IUS2_Superclass_New():
    return itkBinaryThresholdImageFilterID2IUS2_Superclass.New()

class itkBinaryThresholdImageFilterID2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2IUS2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2IUS2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2IUS2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Superclass_swigregister(itkBinaryThresholdImageFilterID2IUS2_Superclass)
itkBinaryThresholdImageFilterID2IUS2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Superclass___New_orig__
itkBinaryThresholdImageFilterID2IUS2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Superclass_cast


def itkBinaryThresholdImageFilterID3ID3_Superclass_New():
    return itkBinaryThresholdImageFilterID3ID3_Superclass.New()

class itkBinaryThresholdImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3ID3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3ID3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Superclass_swigregister(itkBinaryThresholdImageFilterID3ID3_Superclass)
itkBinaryThresholdImageFilterID3ID3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Superclass___New_orig__
itkBinaryThresholdImageFilterID3ID3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Superclass_cast


def itkBinaryThresholdImageFilterID3IF3_Superclass_New():
    return itkBinaryThresholdImageFilterID3IF3_Superclass.New()

class itkBinaryThresholdImageFilterID3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3IF3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3IF3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3IF3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Superclass_swigregister(itkBinaryThresholdImageFilterID3IF3_Superclass)
itkBinaryThresholdImageFilterID3IF3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Superclass___New_orig__
itkBinaryThresholdImageFilterID3IF3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Superclass_cast


def itkBinaryThresholdImageFilterID3ISS3_Superclass_New():
    return itkBinaryThresholdImageFilterID3ISS3_Superclass.New()

class itkBinaryThresholdImageFilterID3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3ISS3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3ISS3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3ISS3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Superclass_swigregister(itkBinaryThresholdImageFilterID3ISS3_Superclass)
itkBinaryThresholdImageFilterID3ISS3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Superclass___New_orig__
itkBinaryThresholdImageFilterID3ISS3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Superclass_cast


def itkBinaryThresholdImageFilterID3IUC3_Superclass_New():
    return itkBinaryThresholdImageFilterID3IUC3_Superclass.New()

class itkBinaryThresholdImageFilterID3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3IUC3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3IUC3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3IUC3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Superclass_swigregister(itkBinaryThresholdImageFilterID3IUC3_Superclass)
itkBinaryThresholdImageFilterID3IUC3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Superclass___New_orig__
itkBinaryThresholdImageFilterID3IUC3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Superclass_cast


def itkBinaryThresholdImageFilterID3IUS3_Superclass_New():
    return itkBinaryThresholdImageFilterID3IUS3_Superclass.New()

class itkBinaryThresholdImageFilterID3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3IUS3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3IUS3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterID3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3IUS3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Superclass_swigregister(itkBinaryThresholdImageFilterID3IUS3_Superclass)
itkBinaryThresholdImageFilterID3IUS3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Superclass___New_orig__
itkBinaryThresholdImageFilterID3IUS3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Superclass_cast


def itkBinaryThresholdImageFilterIF2IF2_Superclass_New():
    return itkBinaryThresholdImageFilterIF2IF2_Superclass.New()

class itkBinaryThresholdImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF2IF2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF2IF2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Superclass_swigregister(itkBinaryThresholdImageFilterIF2IF2_Superclass)
itkBinaryThresholdImageFilterIF2IF2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Superclass___New_orig__
itkBinaryThresholdImageFilterIF2IF2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Superclass_cast


def itkBinaryThresholdImageFilterIF2ISS2_Superclass_New():
    return itkBinaryThresholdImageFilterIF2ISS2_Superclass.New()

class itkBinaryThresholdImageFilterIF2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIF2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF2ISS2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF2ISS2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIF2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF2ISS2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Superclass_swigregister(itkBinaryThresholdImageFilterIF2ISS2_Superclass)
itkBinaryThresholdImageFilterIF2ISS2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Superclass___New_orig__
itkBinaryThresholdImageFilterIF2ISS2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Superclass_cast


def itkBinaryThresholdImageFilterIF2IUC2_Superclass_New():
    return itkBinaryThresholdImageFilterIF2IUC2_Superclass.New()

class itkBinaryThresholdImageFilterIF2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIF2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF2IUC2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF2IUC2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIF2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF2IUC2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Superclass_swigregister(itkBinaryThresholdImageFilterIF2IUC2_Superclass)
itkBinaryThresholdImageFilterIF2IUC2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Superclass___New_orig__
itkBinaryThresholdImageFilterIF2IUC2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Superclass_cast


def itkBinaryThresholdImageFilterIF2IUS2_Superclass_New():
    return itkBinaryThresholdImageFilterIF2IUS2_Superclass.New()

class itkBinaryThresholdImageFilterIF2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF2IUS2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF2IUS2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIF2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF2IUS2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Superclass_swigregister(itkBinaryThresholdImageFilterIF2IUS2_Superclass)
itkBinaryThresholdImageFilterIF2IUS2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Superclass___New_orig__
itkBinaryThresholdImageFilterIF2IUS2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Superclass_cast


def itkBinaryThresholdImageFilterIF3IF3_Superclass_New():
    return itkBinaryThresholdImageFilterIF3IF3_Superclass.New()

class itkBinaryThresholdImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF3IF3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF3IF3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Superclass_swigregister(itkBinaryThresholdImageFilterIF3IF3_Superclass)
itkBinaryThresholdImageFilterIF3IF3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Superclass___New_orig__
itkBinaryThresholdImageFilterIF3IF3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Superclass_cast


def itkBinaryThresholdImageFilterIF3ISS3_Superclass_New():
    return itkBinaryThresholdImageFilterIF3ISS3_Superclass.New()

class itkBinaryThresholdImageFilterIF3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIF3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF3ISS3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF3ISS3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIF3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF3ISS3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Superclass_swigregister(itkBinaryThresholdImageFilterIF3ISS3_Superclass)
itkBinaryThresholdImageFilterIF3ISS3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Superclass___New_orig__
itkBinaryThresholdImageFilterIF3ISS3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Superclass_cast


def itkBinaryThresholdImageFilterIF3IUC3_Superclass_New():
    return itkBinaryThresholdImageFilterIF3IUC3_Superclass.New()

class itkBinaryThresholdImageFilterIF3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIF3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF3IUC3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF3IUC3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIF3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF3IUC3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Superclass_swigregister(itkBinaryThresholdImageFilterIF3IUC3_Superclass)
itkBinaryThresholdImageFilterIF3IUC3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Superclass___New_orig__
itkBinaryThresholdImageFilterIF3IUC3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Superclass_cast


def itkBinaryThresholdImageFilterIF3IUS3_Superclass_New():
    return itkBinaryThresholdImageFilterIF3IUS3_Superclass.New()

class itkBinaryThresholdImageFilterIF3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF3IUS3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF3IUS3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIF3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF3IUS3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Superclass_swigregister(itkBinaryThresholdImageFilterIF3IUS3_Superclass)
itkBinaryThresholdImageFilterIF3IUS3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Superclass___New_orig__
itkBinaryThresholdImageFilterIF3IUS3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Superclass_cast


def itkBinaryThresholdImageFilterISS2ISS2_Superclass_New():
    return itkBinaryThresholdImageFilterISS2ISS2_Superclass.New()

class itkBinaryThresholdImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterISS2ISS2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterISS2ISS2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Superclass_swigregister(itkBinaryThresholdImageFilterISS2ISS2_Superclass)
itkBinaryThresholdImageFilterISS2ISS2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Superclass___New_orig__
itkBinaryThresholdImageFilterISS2ISS2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Superclass_cast


def itkBinaryThresholdImageFilterISS2IUC2_Superclass_New():
    return itkBinaryThresholdImageFilterISS2IUC2_Superclass.New()

class itkBinaryThresholdImageFilterISS2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterISS2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterISS2IUC2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterISS2IUC2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterISS2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterISS2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterISS2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterISS2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterISS2IUC2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Superclass_swigregister(itkBinaryThresholdImageFilterISS2IUC2_Superclass)
itkBinaryThresholdImageFilterISS2IUC2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Superclass___New_orig__
itkBinaryThresholdImageFilterISS2IUC2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Superclass_cast


def itkBinaryThresholdImageFilterISS3ISS3_Superclass_New():
    return itkBinaryThresholdImageFilterISS3ISS3_Superclass.New()

class itkBinaryThresholdImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterISS3ISS3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterISS3ISS3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Superclass_swigregister(itkBinaryThresholdImageFilterISS3ISS3_Superclass)
itkBinaryThresholdImageFilterISS3ISS3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Superclass___New_orig__
itkBinaryThresholdImageFilterISS3ISS3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Superclass_cast


def itkBinaryThresholdImageFilterISS3IUC3_Superclass_New():
    return itkBinaryThresholdImageFilterISS3IUC3_Superclass.New()

class itkBinaryThresholdImageFilterISS3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterISS3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterISS3IUC3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterISS3IUC3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterISS3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterISS3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterISS3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterISS3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterISS3IUC3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Superclass_swigregister(itkBinaryThresholdImageFilterISS3IUC3_Superclass)
itkBinaryThresholdImageFilterISS3IUC3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Superclass___New_orig__
itkBinaryThresholdImageFilterISS3IUC3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Superclass_cast


def itkBinaryThresholdImageFilterIUC2IUC2_Superclass_New():
    return itkBinaryThresholdImageFilterIUC2IUC2_Superclass.New()

class itkBinaryThresholdImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUC2IUC2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Superclass_swigregister(itkBinaryThresholdImageFilterIUC2IUC2_Superclass)
itkBinaryThresholdImageFilterIUC2IUC2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Superclass___New_orig__
itkBinaryThresholdImageFilterIUC2IUC2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Superclass_cast


def itkBinaryThresholdImageFilterIUC3IUC3_Superclass_New():
    return itkBinaryThresholdImageFilterIUC3IUC3_Superclass.New()

class itkBinaryThresholdImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUC3IUC3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Superclass_swigregister(itkBinaryThresholdImageFilterIUC3IUC3_Superclass)
itkBinaryThresholdImageFilterIUC3IUC3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Superclass___New_orig__
itkBinaryThresholdImageFilterIUC3IUC3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Superclass_cast


def itkBinaryThresholdImageFilterIUS2IUC2_Superclass_New():
    return itkBinaryThresholdImageFilterIUS2IUC2_Superclass.New()

class itkBinaryThresholdImageFilterIUS2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIUS2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUS2IUC2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUS2IUC2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIUS2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUS2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUS2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUS2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUS2IUC2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Superclass_swigregister(itkBinaryThresholdImageFilterIUS2IUC2_Superclass)
itkBinaryThresholdImageFilterIUS2IUC2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Superclass___New_orig__
itkBinaryThresholdImageFilterIUS2IUC2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Superclass_cast


def itkBinaryThresholdImageFilterIUS2IUS2_Superclass_New():
    return itkBinaryThresholdImageFilterIUS2IUS2_Superclass.New()

class itkBinaryThresholdImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUS2IUS2_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Superclass_swigregister(itkBinaryThresholdImageFilterIUS2IUS2_Superclass)
itkBinaryThresholdImageFilterIUS2IUS2_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Superclass___New_orig__
itkBinaryThresholdImageFilterIUS2IUS2_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Superclass_cast


def itkBinaryThresholdImageFilterIUS3IUC3_Superclass_New():
    return itkBinaryThresholdImageFilterIUS3IUC3_Superclass.New()

class itkBinaryThresholdImageFilterIUS3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIUS3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUS3IUC3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUS3IUC3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIUS3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUS3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUS3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUS3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUS3IUC3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Superclass_swigregister(itkBinaryThresholdImageFilterIUS3IUC3_Superclass)
itkBinaryThresholdImageFilterIUS3IUC3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Superclass___New_orig__
itkBinaryThresholdImageFilterIUS3IUC3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Superclass_cast


def itkBinaryThresholdImageFilterIUS3IUS3_Superclass_New():
    return itkBinaryThresholdImageFilterIUS3IUS3_Superclass.New()

class itkBinaryThresholdImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkBinaryThresholdImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkBinaryThresholdImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUS3IUS3_Superclass in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Superclass_swigregister(itkBinaryThresholdImageFilterIUS3IUS3_Superclass)
itkBinaryThresholdImageFilterIUS3IUS3_Superclass___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Superclass___New_orig__
itkBinaryThresholdImageFilterIUS3IUS3_Superclass_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Superclass_cast


def itkBinaryThresholdImageFilterID2ID2_New():
    return itkBinaryThresholdImageFilterID2ID2.New()

class itkBinaryThresholdImageFilterID2ID2(itkBinaryThresholdImageFilterID2ID2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2ID2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2ID2

        Create a new object of the class itkBinaryThresholdImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2ID2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_swigregister(itkBinaryThresholdImageFilterID2ID2)
itkBinaryThresholdImageFilterID2ID2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2___New_orig__
itkBinaryThresholdImageFilterID2ID2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ID2_cast


def itkBinaryThresholdImageFilterID2IF2_New():
    return itkBinaryThresholdImageFilterID2IF2.New()

class itkBinaryThresholdImageFilterID2IF2(itkBinaryThresholdImageFilterID2IF2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2IF2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2IF2

        Create a new object of the class itkBinaryThresholdImageFilterID2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2IF2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_swigregister(itkBinaryThresholdImageFilterID2IF2)
itkBinaryThresholdImageFilterID2IF2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2___New_orig__
itkBinaryThresholdImageFilterID2IF2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IF2_cast


def itkBinaryThresholdImageFilterID2ISS2_New():
    return itkBinaryThresholdImageFilterID2ISS2.New()

class itkBinaryThresholdImageFilterID2ISS2(itkBinaryThresholdImageFilterID2ISS2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2ISS2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2ISS2

        Create a new object of the class itkBinaryThresholdImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2ISS2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_swigregister(itkBinaryThresholdImageFilterID2ISS2)
itkBinaryThresholdImageFilterID2ISS2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2___New_orig__
itkBinaryThresholdImageFilterID2ISS2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2ISS2_cast


def itkBinaryThresholdImageFilterID2IUC2_New():
    return itkBinaryThresholdImageFilterID2IUC2.New()

class itkBinaryThresholdImageFilterID2IUC2(itkBinaryThresholdImageFilterID2IUC2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2IUC2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2IUC2

        Create a new object of the class itkBinaryThresholdImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2IUC2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_swigregister(itkBinaryThresholdImageFilterID2IUC2)
itkBinaryThresholdImageFilterID2IUC2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2___New_orig__
itkBinaryThresholdImageFilterID2IUC2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUC2_cast


def itkBinaryThresholdImageFilterID2IUS2_New():
    return itkBinaryThresholdImageFilterID2IUS2.New()

class itkBinaryThresholdImageFilterID2IUS2(itkBinaryThresholdImageFilterID2IUS2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID2IUS2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID2IUS2

        Create a new object of the class itkBinaryThresholdImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID2IUS2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_swigregister(itkBinaryThresholdImageFilterID2IUS2)
itkBinaryThresholdImageFilterID2IUS2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2___New_orig__
itkBinaryThresholdImageFilterID2IUS2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID2IUS2_cast


def itkBinaryThresholdImageFilterID3ID3_New():
    return itkBinaryThresholdImageFilterID3ID3.New()

class itkBinaryThresholdImageFilterID3ID3(itkBinaryThresholdImageFilterID3ID3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3ID3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3ID3

        Create a new object of the class itkBinaryThresholdImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3ID3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_swigregister(itkBinaryThresholdImageFilterID3ID3)
itkBinaryThresholdImageFilterID3ID3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3___New_orig__
itkBinaryThresholdImageFilterID3ID3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ID3_cast


def itkBinaryThresholdImageFilterID3IF3_New():
    return itkBinaryThresholdImageFilterID3IF3.New()

class itkBinaryThresholdImageFilterID3IF3(itkBinaryThresholdImageFilterID3IF3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3IF3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3IF3

        Create a new object of the class itkBinaryThresholdImageFilterID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3IF3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_swigregister(itkBinaryThresholdImageFilterID3IF3)
itkBinaryThresholdImageFilterID3IF3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3___New_orig__
itkBinaryThresholdImageFilterID3IF3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IF3_cast


def itkBinaryThresholdImageFilterID3ISS3_New():
    return itkBinaryThresholdImageFilterID3ISS3.New()

class itkBinaryThresholdImageFilterID3ISS3(itkBinaryThresholdImageFilterID3ISS3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3ISS3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3ISS3

        Create a new object of the class itkBinaryThresholdImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3ISS3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_swigregister(itkBinaryThresholdImageFilterID3ISS3)
itkBinaryThresholdImageFilterID3ISS3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3___New_orig__
itkBinaryThresholdImageFilterID3ISS3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3ISS3_cast


def itkBinaryThresholdImageFilterID3IUC3_New():
    return itkBinaryThresholdImageFilterID3IUC3.New()

class itkBinaryThresholdImageFilterID3IUC3(itkBinaryThresholdImageFilterID3IUC3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3IUC3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3IUC3

        Create a new object of the class itkBinaryThresholdImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3IUC3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_swigregister(itkBinaryThresholdImageFilterID3IUC3)
itkBinaryThresholdImageFilterID3IUC3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3___New_orig__
itkBinaryThresholdImageFilterID3IUC3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUC3_cast


def itkBinaryThresholdImageFilterID3IUS3_New():
    return itkBinaryThresholdImageFilterID3IUS3.New()

class itkBinaryThresholdImageFilterID3IUS3(itkBinaryThresholdImageFilterID3IUS3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterID3IUS3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterID3IUS3

        Create a new object of the class itkBinaryThresholdImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterID3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterID3IUS3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_swigregister(itkBinaryThresholdImageFilterID3IUS3)
itkBinaryThresholdImageFilterID3IUS3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3___New_orig__
itkBinaryThresholdImageFilterID3IUS3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterID3IUS3_cast


def itkBinaryThresholdImageFilterIF2IF2_New():
    return itkBinaryThresholdImageFilterIF2IF2.New()

class itkBinaryThresholdImageFilterIF2IF2(itkBinaryThresholdImageFilterIF2IF2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF2IF2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF2IF2

        Create a new object of the class itkBinaryThresholdImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF2IF2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_swigregister(itkBinaryThresholdImageFilterIF2IF2)
itkBinaryThresholdImageFilterIF2IF2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2___New_orig__
itkBinaryThresholdImageFilterIF2IF2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IF2_cast


def itkBinaryThresholdImageFilterIF2ISS2_New():
    return itkBinaryThresholdImageFilterIF2ISS2.New()

class itkBinaryThresholdImageFilterIF2ISS2(itkBinaryThresholdImageFilterIF2ISS2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF2ISS2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF2ISS2

        Create a new object of the class itkBinaryThresholdImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF2ISS2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_swigregister(itkBinaryThresholdImageFilterIF2ISS2)
itkBinaryThresholdImageFilterIF2ISS2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2___New_orig__
itkBinaryThresholdImageFilterIF2ISS2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2ISS2_cast


def itkBinaryThresholdImageFilterIF2IUC2_New():
    return itkBinaryThresholdImageFilterIF2IUC2.New()

class itkBinaryThresholdImageFilterIF2IUC2(itkBinaryThresholdImageFilterIF2IUC2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF2IUC2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF2IUC2

        Create a new object of the class itkBinaryThresholdImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF2IUC2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_swigregister(itkBinaryThresholdImageFilterIF2IUC2)
itkBinaryThresholdImageFilterIF2IUC2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2___New_orig__
itkBinaryThresholdImageFilterIF2IUC2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUC2_cast


def itkBinaryThresholdImageFilterIF2IUS2_New():
    return itkBinaryThresholdImageFilterIF2IUS2.New()

class itkBinaryThresholdImageFilterIF2IUS2(itkBinaryThresholdImageFilterIF2IUS2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF2IUS2

        Create a new object of the class itkBinaryThresholdImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF2IUS2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_swigregister(itkBinaryThresholdImageFilterIF2IUS2)
itkBinaryThresholdImageFilterIF2IUS2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2___New_orig__
itkBinaryThresholdImageFilterIF2IUS2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF2IUS2_cast


def itkBinaryThresholdImageFilterIF3IF3_New():
    return itkBinaryThresholdImageFilterIF3IF3.New()

class itkBinaryThresholdImageFilterIF3IF3(itkBinaryThresholdImageFilterIF3IF3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF3IF3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF3IF3

        Create a new object of the class itkBinaryThresholdImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF3IF3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_swigregister(itkBinaryThresholdImageFilterIF3IF3)
itkBinaryThresholdImageFilterIF3IF3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3___New_orig__
itkBinaryThresholdImageFilterIF3IF3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IF3_cast


def itkBinaryThresholdImageFilterIF3ISS3_New():
    return itkBinaryThresholdImageFilterIF3ISS3.New()

class itkBinaryThresholdImageFilterIF3ISS3(itkBinaryThresholdImageFilterIF3ISS3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF3ISS3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF3ISS3

        Create a new object of the class itkBinaryThresholdImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF3ISS3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_swigregister(itkBinaryThresholdImageFilterIF3ISS3)
itkBinaryThresholdImageFilterIF3ISS3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3___New_orig__
itkBinaryThresholdImageFilterIF3ISS3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3ISS3_cast


def itkBinaryThresholdImageFilterIF3IUC3_New():
    return itkBinaryThresholdImageFilterIF3IUC3.New()

class itkBinaryThresholdImageFilterIF3IUC3(itkBinaryThresholdImageFilterIF3IUC3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF3IUC3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF3IUC3

        Create a new object of the class itkBinaryThresholdImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF3IUC3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_swigregister(itkBinaryThresholdImageFilterIF3IUC3)
itkBinaryThresholdImageFilterIF3IUC3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3___New_orig__
itkBinaryThresholdImageFilterIF3IUC3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUC3_cast


def itkBinaryThresholdImageFilterIF3IUS3_New():
    return itkBinaryThresholdImageFilterIF3IUS3.New()

class itkBinaryThresholdImageFilterIF3IUS3(itkBinaryThresholdImageFilterIF3IUS3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIF3IUS3

        Create a new object of the class itkBinaryThresholdImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIF3IUS3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_swigregister(itkBinaryThresholdImageFilterIF3IUS3)
itkBinaryThresholdImageFilterIF3IUS3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3___New_orig__
itkBinaryThresholdImageFilterIF3IUS3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIF3IUS3_cast


def itkBinaryThresholdImageFilterISS2ISS2_New():
    return itkBinaryThresholdImageFilterISS2ISS2.New()

class itkBinaryThresholdImageFilterISS2ISS2(itkBinaryThresholdImageFilterISS2ISS2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterISS2ISS2

        Create a new object of the class itkBinaryThresholdImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterISS2ISS2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_swigregister(itkBinaryThresholdImageFilterISS2ISS2)
itkBinaryThresholdImageFilterISS2ISS2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2___New_orig__
itkBinaryThresholdImageFilterISS2ISS2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2ISS2_cast


def itkBinaryThresholdImageFilterISS2IUC2_New():
    return itkBinaryThresholdImageFilterISS2IUC2.New()

class itkBinaryThresholdImageFilterISS2IUC2(itkBinaryThresholdImageFilterISS2IUC2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterISS2IUC2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterISS2IUC2

        Create a new object of the class itkBinaryThresholdImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterISS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterISS2IUC2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_swigregister(itkBinaryThresholdImageFilterISS2IUC2)
itkBinaryThresholdImageFilterISS2IUC2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2___New_orig__
itkBinaryThresholdImageFilterISS2IUC2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS2IUC2_cast


def itkBinaryThresholdImageFilterISS3ISS3_New():
    return itkBinaryThresholdImageFilterISS3ISS3.New()

class itkBinaryThresholdImageFilterISS3ISS3(itkBinaryThresholdImageFilterISS3ISS3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterISS3ISS3

        Create a new object of the class itkBinaryThresholdImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterISS3ISS3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_swigregister(itkBinaryThresholdImageFilterISS3ISS3)
itkBinaryThresholdImageFilterISS3ISS3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3___New_orig__
itkBinaryThresholdImageFilterISS3ISS3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3ISS3_cast


def itkBinaryThresholdImageFilterISS3IUC3_New():
    return itkBinaryThresholdImageFilterISS3IUC3.New()

class itkBinaryThresholdImageFilterISS3IUC3(itkBinaryThresholdImageFilterISS3IUC3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterISS3IUC3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterISS3IUC3

        Create a new object of the class itkBinaryThresholdImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterISS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterISS3IUC3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_swigregister(itkBinaryThresholdImageFilterISS3IUC3)
itkBinaryThresholdImageFilterISS3IUC3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3___New_orig__
itkBinaryThresholdImageFilterISS3IUC3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterISS3IUC3_cast


def itkBinaryThresholdImageFilterIUC2IUC2_New():
    return itkBinaryThresholdImageFilterIUC2IUC2.New()

class itkBinaryThresholdImageFilterIUC2IUC2(itkBinaryThresholdImageFilterIUC2IUC2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUC2IUC2

        Create a new object of the class itkBinaryThresholdImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUC2IUC2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_swigregister(itkBinaryThresholdImageFilterIUC2IUC2)
itkBinaryThresholdImageFilterIUC2IUC2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2___New_orig__
itkBinaryThresholdImageFilterIUC2IUC2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC2IUC2_cast


def itkBinaryThresholdImageFilterIUC3IUC3_New():
    return itkBinaryThresholdImageFilterIUC3IUC3.New()

class itkBinaryThresholdImageFilterIUC3IUC3(itkBinaryThresholdImageFilterIUC3IUC3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUC3IUC3

        Create a new object of the class itkBinaryThresholdImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUC3IUC3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_swigregister(itkBinaryThresholdImageFilterIUC3IUC3)
itkBinaryThresholdImageFilterIUC3IUC3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3___New_orig__
itkBinaryThresholdImageFilterIUC3IUC3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUC3IUC3_cast


def itkBinaryThresholdImageFilterIUS2IUC2_New():
    return itkBinaryThresholdImageFilterIUS2IUC2.New()

class itkBinaryThresholdImageFilterIUS2IUC2(itkBinaryThresholdImageFilterIUS2IUC2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUS2IUC2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUS2IUC2

        Create a new object of the class itkBinaryThresholdImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUS2IUC2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_swigregister(itkBinaryThresholdImageFilterIUS2IUC2)
itkBinaryThresholdImageFilterIUS2IUC2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2___New_orig__
itkBinaryThresholdImageFilterIUS2IUC2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUC2_cast


def itkBinaryThresholdImageFilterIUS2IUS2_New():
    return itkBinaryThresholdImageFilterIUS2IUS2.New()

class itkBinaryThresholdImageFilterIUS2IUS2(itkBinaryThresholdImageFilterIUS2IUS2_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUS2IUS2

        Create a new object of the class itkBinaryThresholdImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUS2IUS2 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_swigregister(itkBinaryThresholdImageFilterIUS2IUS2)
itkBinaryThresholdImageFilterIUS2IUS2___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2___New_orig__
itkBinaryThresholdImageFilterIUS2IUS2_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS2IUS2_cast


def itkBinaryThresholdImageFilterIUS3IUC3_New():
    return itkBinaryThresholdImageFilterIUS3IUC3.New()

class itkBinaryThresholdImageFilterIUS3IUC3(itkBinaryThresholdImageFilterIUS3IUC3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUS3IUC3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUS3IUC3

        Create a new object of the class itkBinaryThresholdImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUS3IUC3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_swigregister(itkBinaryThresholdImageFilterIUS3IUC3)
itkBinaryThresholdImageFilterIUS3IUC3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3___New_orig__
itkBinaryThresholdImageFilterIUS3IUC3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUC3_cast


def itkBinaryThresholdImageFilterIUS3IUS3_New():
    return itkBinaryThresholdImageFilterIUS3IUS3.New()

class itkBinaryThresholdImageFilterIUS3IUS3(itkBinaryThresholdImageFilterIUS3IUS3_Superclass):
    r"""


    Binarize an input image by thresholding.

    This filter produces an output image whose pixels are either one of
    two values ( OutsideValue or InsideValue ), depending on whether the
    corresponding input image pixels lie between the two thresholds (
    LowerThreshold and UpperThreshold ). Values equal to either threshold
    is considered to be between the thresholds.

    More precisely \\[ Output(x_i) = \\begin{cases} InsideValue &
    \\text{if $LowerThreshold \\leq x_i \\leq UpperThreshold$}
    \\\\ OutsideValue & \\text{otherwise} \\end{cases} \\]

    This filter is templated over the input image type and the output
    image type.

    The filter expect both images to have the same number of dimensions.

    The default values for LowerThreshold and UpperThreshold are:
    LowerThreshold = NumericTraits<TInput>::NonpositiveMin();
    UpperThreshold = NumericTraits<TInput>::max(); Therefore, generally
    only one of these needs to be set, depending on whether the user wants
    to threshold above or below the desired threshold.

    example{Filtering/Thresholding/ThresholdAnImageUsingBinary,Threshold
    An Image Using Binary Thresholding} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_Clone)
    SetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_SetOutsideValue)
    GetOutsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_GetOutsideValue)
    SetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_SetInsideValue)
    GetInsideValue = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_GetInsideValue)
    SetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_SetUpperThreshold)
    SetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_SetUpperThresholdInput)
    SetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_SetLowerThreshold)
    SetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_SetLowerThresholdInput)
    GetUpperThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_GetUpperThreshold)
    GetUpperThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_GetUpperThresholdInput)
    GetLowerThreshold = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_GetLowerThreshold)
    GetLowerThresholdInput = _swig_new_instance_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_GetLowerThresholdInput)
    OutputEqualityComparableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_OutputEqualityComparableCheck
    
    InputPixelTypeComparable = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_InputPixelTypeComparable
    
    InputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_InputOStreamWritableCheck
    
    OutputOStreamWritableCheck = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryThresholdImageFilterPython.delete_itkBinaryThresholdImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryThresholdImageFilterIUS3IUS3

        Create a new object of the class itkBinaryThresholdImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryThresholdImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryThresholdImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryThresholdImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryThresholdImageFilterIUS3IUS3 in _itkBinaryThresholdImageFilterPython:
_itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_swigregister(itkBinaryThresholdImageFilterIUS3IUS3)
itkBinaryThresholdImageFilterIUS3IUS3___New_orig__ = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3___New_orig__
itkBinaryThresholdImageFilterIUS3IUS3_cast = _itkBinaryThresholdImageFilterPython.itkBinaryThresholdImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_threshold_image_filter(*args, **kwargs):
    """Procedural interface for BinaryThresholdImageFilter"""
    import itk
    instance = itk.BinaryThresholdImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_threshold_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryThresholdImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinaryThresholdImageFilter.values()[0]
    else:
        filter_object = itk.BinaryThresholdImageFilter

    binary_threshold_image_filter.__doc__ = filter_object.__doc__
    binary_threshold_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_threshold_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinaryThresholdImageFilter, itkTemplate.itkTemplate):
        binary_threshold_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        binary_threshold_image_filter.__doc__ += "\n"
        binary_threshold_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        binary_threshold_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



