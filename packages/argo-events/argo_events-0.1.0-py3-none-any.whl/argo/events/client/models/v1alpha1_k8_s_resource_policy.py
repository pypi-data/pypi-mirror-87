# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1K8SResourcePolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'backoff': 'CommonBackoff',
        'error_on_backoff_timeout': 'bool',
        'labels': 'dict(str, str)'
    }

    attribute_map = {
        'backoff': 'backoff',
        'error_on_backoff_timeout': 'errorOnBackoffTimeout',
        'labels': 'labels'
    }

    def __init__(self, backoff=None, error_on_backoff_timeout=None, labels=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1K8SResourcePolicy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._backoff = None
        self._error_on_backoff_timeout = None
        self._labels = None
        self.discriminator = None

        self.backoff = backoff
        self.error_on_backoff_timeout = error_on_backoff_timeout
        if labels is not None:
            self.labels = labels

    @property
    def backoff(self):
        """Gets the backoff of this V1alpha1K8SResourcePolicy.  # noqa: E501


        :return: The backoff of this V1alpha1K8SResourcePolicy.  # noqa: E501
        :rtype: CommonBackoff
        """
        return self._backoff

    @backoff.setter
    def backoff(self, backoff):
        """Sets the backoff of this V1alpha1K8SResourcePolicy.


        :param backoff: The backoff of this V1alpha1K8SResourcePolicy.  # noqa: E501
        :type: CommonBackoff
        """
        if self.local_vars_configuration.client_side_validation and backoff is None:  # noqa: E501
            raise ValueError("Invalid value for `backoff`, must not be `None`")  # noqa: E501

        self._backoff = backoff

    @property
    def error_on_backoff_timeout(self):
        """Gets the error_on_backoff_timeout of this V1alpha1K8SResourcePolicy.  # noqa: E501

        ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine the state of the resource  # noqa: E501

        :return: The error_on_backoff_timeout of this V1alpha1K8SResourcePolicy.  # noqa: E501
        :rtype: bool
        """
        return self._error_on_backoff_timeout

    @error_on_backoff_timeout.setter
    def error_on_backoff_timeout(self, error_on_backoff_timeout):
        """Sets the error_on_backoff_timeout of this V1alpha1K8SResourcePolicy.

        ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine the state of the resource  # noqa: E501

        :param error_on_backoff_timeout: The error_on_backoff_timeout of this V1alpha1K8SResourcePolicy.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and error_on_backoff_timeout is None:  # noqa: E501
            raise ValueError("Invalid value for `error_on_backoff_timeout`, must not be `None`")  # noqa: E501

        self._error_on_backoff_timeout = error_on_backoff_timeout

    @property
    def labels(self):
        """Gets the labels of this V1alpha1K8SResourcePolicy.  # noqa: E501

        Labels required to identify whether a resource is in success state  # noqa: E501

        :return: The labels of this V1alpha1K8SResourcePolicy.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1alpha1K8SResourcePolicy.

        Labels required to identify whether a resource is in success state  # noqa: E501

        :param labels: The labels of this V1alpha1K8SResourcePolicy.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1K8SResourcePolicy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1K8SResourcePolicy):
            return True

        return self.to_dict() != other.to_dict()
