# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_name': 'str',
        'username': 'str',
        'max_users': 'int',
        'user_count': 'int',
        'status': 'int',
        'branding': 'bool',
        'custom_domain': 'bool',
        'quota': 'Quota',
        'secure_only': 'bool',
        'complex_passwords': 'bool',
        'show_referral_links': 'bool',
        'external_domains': 'list[str]',
        'allowed_ip': 'list[AccountAttributesAllowedIp]',
        'callback_settings': 'CallbackSettings',
        'branding_settings': 'BrandingSettings',
        'client_id': 'int',
        'welcome_email_content': 'str',
        'welcome_email_subject': 'str',
        'custom_signature': 'str',
        'account_onboarding': 'bool',
        'created': 'datetime',
        'modified': 'datetime'
    }

    attribute_map = {
        'account_name': 'accountName',
        'username': 'username',
        'max_users': 'maxUsers',
        'user_count': 'userCount',
        'status': 'status',
        'branding': 'branding',
        'custom_domain': 'customDomain',
        'quota': 'quota',
        'secure_only': 'secureOnly',
        'complex_passwords': 'complexPasswords',
        'show_referral_links': 'showReferralLinks',
        'external_domains': 'externalDomains',
        'allowed_ip': 'allowedIp',
        'callback_settings': 'callbackSettings',
        'branding_settings': 'brandingSettings',
        'client_id': 'clientId',
        'welcome_email_content': 'welcomeEmailContent',
        'welcome_email_subject': 'welcomeEmailSubject',
        'custom_signature': 'customSignature',
        'account_onboarding': 'accountOnboarding',
        'created': 'created',
        'modified': 'modified'
    }

    def __init__(self, account_name=None, username=None, max_users=None, user_count=None, status=None, branding=None, custom_domain=None, quota=None, secure_only=None, complex_passwords=None, show_referral_links=None, external_domains=None, allowed_ip=None, callback_settings=None, branding_settings=None, client_id=None, welcome_email_content=None, welcome_email_subject=None, custom_signature=None, account_onboarding=None, created=None, modified=None):  # noqa: E501
        """AccountAttributes - a model defined in Swagger"""  # noqa: E501
        self._account_name = None
        self._username = None
        self._max_users = None
        self._user_count = None
        self._status = None
        self._branding = None
        self._custom_domain = None
        self._quota = None
        self._secure_only = None
        self._complex_passwords = None
        self._show_referral_links = None
        self._external_domains = None
        self._allowed_ip = None
        self._callback_settings = None
        self._branding_settings = None
        self._client_id = None
        self._welcome_email_content = None
        self._welcome_email_subject = None
        self._custom_signature = None
        self._account_onboarding = None
        self._created = None
        self._modified = None
        self.discriminator = None
        if account_name is not None:
            self.account_name = account_name
        if username is not None:
            self.username = username
        if max_users is not None:
            self.max_users = max_users
        if user_count is not None:
            self.user_count = user_count
        if status is not None:
            self.status = status
        if branding is not None:
            self.branding = branding
        if custom_domain is not None:
            self.custom_domain = custom_domain
        if quota is not None:
            self.quota = quota
        if secure_only is not None:
            self.secure_only = secure_only
        if complex_passwords is not None:
            self.complex_passwords = complex_passwords
        if show_referral_links is not None:
            self.show_referral_links = show_referral_links
        if external_domains is not None:
            self.external_domains = external_domains
        if allowed_ip is not None:
            self.allowed_ip = allowed_ip
        if callback_settings is not None:
            self.callback_settings = callback_settings
        if branding_settings is not None:
            self.branding_settings = branding_settings
        if client_id is not None:
            self.client_id = client_id
        if welcome_email_content is not None:
            self.welcome_email_content = welcome_email_content
        if welcome_email_subject is not None:
            self.welcome_email_subject = welcome_email_subject
        if custom_signature is not None:
            self.custom_signature = custom_signature
        if account_onboarding is not None:
            self.account_onboarding = account_onboarding
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified

    @property
    def account_name(self):
        """Gets the account_name of this AccountAttributes.  # noqa: E501

        Name of the account  # noqa: E501

        :return: The account_name of this AccountAttributes.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this AccountAttributes.

        Name of the account  # noqa: E501

        :param account_name: The account_name of this AccountAttributes.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def username(self):
        """Gets the username of this AccountAttributes.  # noqa: E501

        Name of account's master user  # noqa: E501

        :return: The username of this AccountAttributes.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AccountAttributes.

        Name of account's master user  # noqa: E501

        :param username: The username of this AccountAttributes.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def max_users(self):
        """Gets the max_users of this AccountAttributes.  # noqa: E501

        Maximum number of users the account can have. This can be increased by contacting ExaVault Support.  # noqa: E501

        :return: The max_users of this AccountAttributes.  # noqa: E501
        :rtype: int
        """
        return self._max_users

    @max_users.setter
    def max_users(self, max_users):
        """Sets the max_users of this AccountAttributes.

        Maximum number of users the account can have. This can be increased by contacting ExaVault Support.  # noqa: E501

        :param max_users: The max_users of this AccountAttributes.  # noqa: E501
        :type: int
        """

        self._max_users = max_users

    @property
    def user_count(self):
        """Gets the user_count of this AccountAttributes.  # noqa: E501

        Current number of users on the account.  # noqa: E501

        :return: The user_count of this AccountAttributes.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this AccountAttributes.

        Current number of users on the account.  # noqa: E501

        :param user_count: The user_count of this AccountAttributes.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    @property
    def status(self):
        """Gets the status of this AccountAttributes.  # noqa: E501

        Account status flag. A one (1) means the account is active; zero (0) means it is suspended.  # noqa: E501

        :return: The status of this AccountAttributes.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountAttributes.

        Account status flag. A one (1) means the account is active; zero (0) means it is suspended.  # noqa: E501

        :param status: The status of this AccountAttributes.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 0]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def branding(self):
        """Gets the branding of this AccountAttributes.  # noqa: E501

        Branding flag. Set to `true` if the account has branding functionality enabled.  # noqa: E501

        :return: The branding of this AccountAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._branding

    @branding.setter
    def branding(self, branding):
        """Sets the branding of this AccountAttributes.

        Branding flag. Set to `true` if the account has branding functionality enabled.  # noqa: E501

        :param branding: The branding of this AccountAttributes.  # noqa: E501
        :type: bool
        """

        self._branding = branding

    @property
    def custom_domain(self):
        """Gets the custom_domain of this AccountAttributes.  # noqa: E501

        Custom domain flag. Set to `true` if account type allows custom domain functionality.  # noqa: E501

        :return: The custom_domain of this AccountAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this AccountAttributes.

        Custom domain flag. Set to `true` if account type allows custom domain functionality.  # noqa: E501

        :param custom_domain: The custom_domain of this AccountAttributes.  # noqa: E501
        :type: bool
        """

        self._custom_domain = custom_domain

    @property
    def quota(self):
        """Gets the quota of this AccountAttributes.  # noqa: E501


        :return: The quota of this AccountAttributes.  # noqa: E501
        :rtype: Quota
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this AccountAttributes.


        :param quota: The quota of this AccountAttributes.  # noqa: E501
        :type: Quota
        """

        self._quota = quota

    @property
    def secure_only(self):
        """Gets the secure_only of this AccountAttributes.  # noqa: E501

        Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21.  # noqa: E501

        :return: The secure_only of this AccountAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._secure_only

    @secure_only.setter
    def secure_only(self, secure_only):
        """Sets the secure_only of this AccountAttributes.

        Flag to indicate whether the account disables connections via insecure protocols (e.g. FTP). Set to `true` to disable all traffic over port 21.  # noqa: E501

        :param secure_only: The secure_only of this AccountAttributes.  # noqa: E501
        :type: bool
        """

        self._secure_only = secure_only

    @property
    def complex_passwords(self):
        """Gets the complex_passwords of this AccountAttributes.  # noqa: E501

        Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares.  # noqa: E501

        :return: The complex_passwords of this AccountAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._complex_passwords

    @complex_passwords.setter
    def complex_passwords(self, complex_passwords):
        """Sets the complex_passwords of this AccountAttributes.

        Flag to indicate whether the account requires complex passwords. Set to `true` to require complex passwords on all users and shares.  # noqa: E501

        :param complex_passwords: The complex_passwords of this AccountAttributes.  # noqa: E501
        :type: bool
        """

        self._complex_passwords = complex_passwords

    @property
    def show_referral_links(self):
        """Gets the show_referral_links of this AccountAttributes.  # noqa: E501

        Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations.  # noqa: E501

        :return: The show_referral_links of this AccountAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._show_referral_links

    @show_referral_links.setter
    def show_referral_links(self, show_referral_links):
        """Sets the show_referral_links of this AccountAttributes.

        Flag to indicate showing of referrals links in the account. Set to `true` to include marketing messages in share invitations.  # noqa: E501

        :param show_referral_links: The show_referral_links of this AccountAttributes.  # noqa: E501
        :type: bool
        """

        self._show_referral_links = show_referral_links

    @property
    def external_domains(self):
        """Gets the external_domains of this AccountAttributes.  # noqa: E501

        Custom domain used to brand this account.  # noqa: E501

        :return: The external_domains of this AccountAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_domains

    @external_domains.setter
    def external_domains(self, external_domains):
        """Sets the external_domains of this AccountAttributes.

        Custom domain used to brand this account.  # noqa: E501

        :param external_domains: The external_domains of this AccountAttributes.  # noqa: E501
        :type: list[str]
        """

        self._external_domains = external_domains

    @property
    def allowed_ip(self):
        """Gets the allowed_ip of this AccountAttributes.  # noqa: E501

        Range of IP addresses allowed to access this account.  # noqa: E501

        :return: The allowed_ip of this AccountAttributes.  # noqa: E501
        :rtype: list[AccountAttributesAllowedIp]
        """
        return self._allowed_ip

    @allowed_ip.setter
    def allowed_ip(self, allowed_ip):
        """Sets the allowed_ip of this AccountAttributes.

        Range of IP addresses allowed to access this account.  # noqa: E501

        :param allowed_ip: The allowed_ip of this AccountAttributes.  # noqa: E501
        :type: list[AccountAttributesAllowedIp]
        """

        self._allowed_ip = allowed_ip

    @property
    def callback_settings(self):
        """Gets the callback_settings of this AccountAttributes.  # noqa: E501


        :return: The callback_settings of this AccountAttributes.  # noqa: E501
        :rtype: CallbackSettings
        """
        return self._callback_settings

    @callback_settings.setter
    def callback_settings(self, callback_settings):
        """Sets the callback_settings of this AccountAttributes.


        :param callback_settings: The callback_settings of this AccountAttributes.  # noqa: E501
        :type: CallbackSettings
        """

        self._callback_settings = callback_settings

    @property
    def branding_settings(self):
        """Gets the branding_settings of this AccountAttributes.  # noqa: E501


        :return: The branding_settings of this AccountAttributes.  # noqa: E501
        :rtype: BrandingSettings
        """
        return self._branding_settings

    @branding_settings.setter
    def branding_settings(self, branding_settings):
        """Sets the branding_settings of this AccountAttributes.


        :param branding_settings: The branding_settings of this AccountAttributes.  # noqa: E501
        :type: BrandingSettings
        """

        self._branding_settings = branding_settings

    @property
    def client_id(self):
        """Gets the client_id of this AccountAttributes.  # noqa: E501

        (ExaVault Use Only) Internal ID of the account in CMS.  # noqa: E501

        :return: The client_id of this AccountAttributes.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AccountAttributes.

        (ExaVault Use Only) Internal ID of the account in CMS.  # noqa: E501

        :param client_id: The client_id of this AccountAttributes.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def welcome_email_content(self):
        """Gets the welcome_email_content of this AccountAttributes.  # noqa: E501

        Content of welcome email each new user will receive.  # noqa: E501

        :return: The welcome_email_content of this AccountAttributes.  # noqa: E501
        :rtype: str
        """
        return self._welcome_email_content

    @welcome_email_content.setter
    def welcome_email_content(self, welcome_email_content):
        """Sets the welcome_email_content of this AccountAttributes.

        Content of welcome email each new user will receive.  # noqa: E501

        :param welcome_email_content: The welcome_email_content of this AccountAttributes.  # noqa: E501
        :type: str
        """

        self._welcome_email_content = welcome_email_content

    @property
    def welcome_email_subject(self):
        """Gets the welcome_email_subject of this AccountAttributes.  # noqa: E501

        Subject of welcome email each new user will receive.  # noqa: E501

        :return: The welcome_email_subject of this AccountAttributes.  # noqa: E501
        :rtype: str
        """
        return self._welcome_email_subject

    @welcome_email_subject.setter
    def welcome_email_subject(self, welcome_email_subject):
        """Sets the welcome_email_subject of this AccountAttributes.

        Subject of welcome email each new user will receive.  # noqa: E501

        :param welcome_email_subject: The welcome_email_subject of this AccountAttributes.  # noqa: E501
        :type: str
        """

        self._welcome_email_subject = welcome_email_subject

    @property
    def custom_signature(self):
        """Gets the custom_signature of this AccountAttributes.  # noqa: E501

        Custom signature for all account emails users or recipients will receive.  # noqa: E501

        :return: The custom_signature of this AccountAttributes.  # noqa: E501
        :rtype: str
        """
        return self._custom_signature

    @custom_signature.setter
    def custom_signature(self, custom_signature):
        """Sets the custom_signature of this AccountAttributes.

        Custom signature for all account emails users or recipients will receive.  # noqa: E501

        :param custom_signature: The custom_signature of this AccountAttributes.  # noqa: E501
        :type: str
        """

        self._custom_signature = custom_signature

    @property
    def account_onboarding(self):
        """Gets the account_onboarding of this AccountAttributes.  # noqa: E501

        Whether the web application onboarding help is enabled for new users in the account.  # noqa: E501

        :return: The account_onboarding of this AccountAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._account_onboarding

    @account_onboarding.setter
    def account_onboarding(self, account_onboarding):
        """Sets the account_onboarding of this AccountAttributes.

        Whether the web application onboarding help is enabled for new users in the account.  # noqa: E501

        :param account_onboarding: The account_onboarding of this AccountAttributes.  # noqa: E501
        :type: bool
        """

        self._account_onboarding = account_onboarding

    @property
    def created(self):
        """Gets the created of this AccountAttributes.  # noqa: E501

        Timestamp of account creation.  # noqa: E501

        :return: The created of this AccountAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AccountAttributes.

        Timestamp of account creation.  # noqa: E501

        :param created: The created of this AccountAttributes.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this AccountAttributes.  # noqa: E501

        Timestamp of account modification.  # noqa: E501

        :return: The modified of this AccountAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this AccountAttributes.

        Timestamp of account modification.  # noqa: E501

        :param modified: The modified of this AccountAttributes.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
