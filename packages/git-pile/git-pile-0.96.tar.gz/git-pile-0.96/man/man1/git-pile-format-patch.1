.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.14.
.TH GIT-PILE "1" "December 2020" "git-pile 0.96" "User Commands"
.SH NAME
git-pile \- git pile format-patch
.SH DESCRIPTION
usage: git\-pile format\-patch [\-h] [\-o OUTPUT_DIR] [\-f]
.TP
[\-\-subject\-prefix SUBJECT_PREFIX]
[\-\-no\-full\-patch] [\-\-debug] [\-v]
[REFS ...]
.SS "positional arguments:"
.TP
REFS
Same arguments as the ones received by range\-diff in its several forms plus a
shortcut. From more verbose to the easiest ones:
1) OLD_BASELINE..OLD_RESULT_HEAD NEW_BASELINE..NEW_RESULT_HEAD
.TP
This should be used when rebasing the RESULT_BRANCH and thus having
different baselines
.TP
2) OLD_RESULT_HEAD...NEW_RESULT_HEAD or OLD_RESULT_HEAD NEW_RESULT_HEAD
This assumes the baseline remained the same. In the first form, the
same as used by git\-range\-diff, note the triple dots rather than double.
.TP
3) OLD_RESULT_HEAD NEW_RESULT_HEAD
Same as (2)
.TP
3) HEAD or no arguments
This is a shortcut: the current branch will be used as NEW_RESULT_HEAD and
the upstream of this branch as OLD_RESULT_HEAD. Example: if RESULT_BRANCH
is internal, this is equivalent to: internal@{u}...internal
.SS "optional arguments:"
.TP
\fB\-h\fR, \fB\-\-help\fR
show this help message and exit
.TP
\fB\-o\fR OUTPUT_DIR, \fB\-\-output\-directory\fR OUTPUT_DIR
Use OUTPUT_DIR to store the resulting files instead of the CWD. This must be an
empty/non\-existent directory unless \fB\-f\fR/\-\-force is also used
.TP
\fB\-f\fR, \fB\-\-force\fR
Force use of OUTPUT_DIR even if it has patches. The existent patches will be
removed.
.TP
\fB\-\-subject\-prefix\fR SUBJECT_PREFIX
Instead of the standard [PATCH] prefix in the subject line, use
[<Subject\-Prefix>]. See git\-format\-patch(1) for details.
.TP
\fB\-\-no\-full\-patch\fR
Do not generate patch with full diff
.TP
\fB\-\-debug\fR
Turn on debugging output
.TP
\fB\-v\fR, \fB\-\-version\fR
show program's version number and exit
