# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKIOMeshGiftiPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkGiftiMeshIOPython
else:
    import _itkGiftiMeshIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkGiftiMeshIOPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkGiftiMeshIOPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkMeshIOBasePython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython

def itkGiftiMeshIO_New():
    return itkGiftiMeshIO.New()

class itkGiftiMeshIO(itk.itkMeshIOBasePython.itkMeshIOBase):
    r"""


    This class defines how to read and write Gifti file format. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGiftiMeshIOPython.itkGiftiMeshIO___New_orig__)
    Clone = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_Clone)
    GetReadPointData = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_GetReadPointData)
    SetReadPointData = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_SetReadPointData)
    ReadPointDataOn = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_ReadPointDataOn)
    ReadPointDataOff = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_ReadPointDataOff)
    SetDirection = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_SetDirection)
    GetDirection = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_GetDirection)
    GetLabelColorTable = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_GetLabelColorTable)
    GetLabelNameTable = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_GetLabelNameTable)
    SetLabelColorTable = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_SetLabelColorTable)
    SetLabelNameTable = _swig_new_instance_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_SetLabelNameTable)
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkGiftiMeshIO
    cast = _swig_new_static_method(_itkGiftiMeshIOPython.itkGiftiMeshIO_cast)

    def New(*args, **kargs):
        """New() -> itkGiftiMeshIO

        Create a new object of the class itkGiftiMeshIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGiftiMeshIO.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGiftiMeshIO.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGiftiMeshIO.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGiftiMeshIO in _itkGiftiMeshIOPython:
_itkGiftiMeshIOPython.itkGiftiMeshIO_swigregister(itkGiftiMeshIO)
itkGiftiMeshIO___New_orig__ = _itkGiftiMeshIOPython.itkGiftiMeshIO___New_orig__
itkGiftiMeshIO_cast = _itkGiftiMeshIOPython.itkGiftiMeshIO_cast


def itkGiftiMeshIOFactory_New():
    return itkGiftiMeshIOFactory.New()

class itkGiftiMeshIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""


    Create instances of GiftiMeshIO objects using an object factory. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkGiftiMeshIOPython.itkGiftiMeshIOFactory___New_orig__)
    RegisterOneFactory = _swig_new_static_method(_itkGiftiMeshIOPython.itkGiftiMeshIOFactory_RegisterOneFactory)
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkGiftiMeshIOFactory
    cast = _swig_new_static_method(_itkGiftiMeshIOPython.itkGiftiMeshIOFactory_cast)

    def New(*args, **kargs):
        """New() -> itkGiftiMeshIOFactory

        Create a new object of the class itkGiftiMeshIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkGiftiMeshIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkGiftiMeshIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkGiftiMeshIOFactory.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkGiftiMeshIOFactory in _itkGiftiMeshIOPython:
_itkGiftiMeshIOPython.itkGiftiMeshIOFactory_swigregister(itkGiftiMeshIOFactory)
itkGiftiMeshIOFactory___New_orig__ = _itkGiftiMeshIOPython.itkGiftiMeshIOFactory___New_orig__
itkGiftiMeshIOFactory_RegisterOneFactory = _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_RegisterOneFactory
itkGiftiMeshIOFactory_cast = _itkGiftiMeshIOPython.itkGiftiMeshIOFactory_cast


def itkMapContainerIRGBAF_New():
    return itkMapContainerIRGBAF.New()

class itkMapContainerIRGBAF(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerIRGBAF self) -> itkMapContainerIRGBAF
        __init__(itkMapContainerIRGBAF self, std::less< int > const & comp) -> itkMapContainerIRGBAF


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkGiftiMeshIOPython.itkMapContainerIRGBAF_swiginit(self, _itkGiftiMeshIOPython.new_itkMapContainerIRGBAF(*args))
    __New_orig__ = _swig_new_static_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF___New_orig__)
    Clone = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_GetElement)
    SetElement = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_SetElement)
    InsertElement = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_InsertElement)
    IndexExists = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_DeleteIndex)
    Size = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Size)
    Reserve = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Reserve)
    Squeeze = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Squeeze)
    Initialize = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_Initialize)
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkMapContainerIRGBAF
    cast = _swig_new_static_method(_itkGiftiMeshIOPython.itkMapContainerIRGBAF_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerIRGBAF

        Create a new object of the class itkMapContainerIRGBAF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerIRGBAF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerIRGBAF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerIRGBAF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerIRGBAF in _itkGiftiMeshIOPython:
_itkGiftiMeshIOPython.itkMapContainerIRGBAF_swigregister(itkMapContainerIRGBAF)
itkMapContainerIRGBAF___New_orig__ = _itkGiftiMeshIOPython.itkMapContainerIRGBAF___New_orig__
itkMapContainerIRGBAF_cast = _itkGiftiMeshIOPython.itkMapContainerIRGBAF_cast


def itkMapContainerIstring_New():
    return itkMapContainerIstring.New()

class itkMapContainerIstring(itk.ITKCommonBasePython.itkObject):
    r"""


    A wrapper of the STL "map" container.

    Define a front-end to the STL "map" container that conforms to the
    IndexedContainerInterface. This is a full-fleged Object, so there are
    events, modification time, debug, and reference count information.

    Parameters:
    -----------

    TElementIdentifier:  A type that shall be used to index the container.
    It must have a < operator defined for ordering.

    TElement:  The element type stored in the container. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(itkMapContainerIstring self) -> itkMapContainerIstring
        __init__(itkMapContainerIstring self, std::less< int > const & comp) -> itkMapContainerIstring


        A wrapper of the STL "map" container.

        Define a front-end to the STL "map" container that conforms to the
        IndexedContainerInterface. This is a full-fleged Object, so there are
        events, modification time, debug, and reference count information.

        Parameters:
        -----------

        TElementIdentifier:  A type that shall be used to index the container.
        It must have a < operator defined for ordering.

        TElement:  The element type stored in the container. 
        """
        _itkGiftiMeshIOPython.itkMapContainerIstring_swiginit(self, _itkGiftiMeshIOPython.new_itkMapContainerIstring(*args))
    __New_orig__ = _swig_new_static_method(_itkGiftiMeshIOPython.itkMapContainerIstring___New_orig__)
    Clone = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_Clone)
    CastToSTLContainer = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_CastToSTLContainer)
    CastToSTLConstContainer = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_CastToSTLConstContainer)
    ElementAt = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_ElementAt)
    CreateElementAt = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_CreateElementAt)
    GetElement = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_GetElement)
    SetElement = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_SetElement)
    InsertElement = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_InsertElement)
    IndexExists = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_IndexExists)
    GetElementIfIndexExists = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_GetElementIfIndexExists)
    CreateIndex = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_CreateIndex)
    DeleteIndex = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_DeleteIndex)
    Size = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_Size)
    Reserve = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_Reserve)
    Squeeze = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_Squeeze)
    Initialize = _swig_new_instance_method(_itkGiftiMeshIOPython.itkMapContainerIstring_Initialize)
    __swig_destroy__ = _itkGiftiMeshIOPython.delete_itkMapContainerIstring
    cast = _swig_new_static_method(_itkGiftiMeshIOPython.itkMapContainerIstring_cast)

    def New(*args, **kargs):
        """New() -> itkMapContainerIstring

        Create a new object of the class itkMapContainerIstring and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMapContainerIstring.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMapContainerIstring.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMapContainerIstring.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMapContainerIstring in _itkGiftiMeshIOPython:
_itkGiftiMeshIOPython.itkMapContainerIstring_swigregister(itkMapContainerIstring)
itkMapContainerIstring___New_orig__ = _itkGiftiMeshIOPython.itkMapContainerIstring___New_orig__
itkMapContainerIstring_cast = _itkGiftiMeshIOPython.itkMapContainerIstring_cast



