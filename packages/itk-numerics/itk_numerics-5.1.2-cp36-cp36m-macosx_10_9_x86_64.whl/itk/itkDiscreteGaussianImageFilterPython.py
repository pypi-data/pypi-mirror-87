# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKSmoothingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDiscreteGaussianImageFilterPython
else:
    import _itkDiscreteGaussianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDiscreteGaussianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDiscreteGaussianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageBoundaryConditionPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkDiscreteGaussianImageFilterID2ID2_New():
    return itkDiscreteGaussianImageFilterID2ID2.New()

class itkDiscreteGaussianImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterID2ID2
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterID2ID2

        Create a new object of the class itkDiscreteGaussianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterID2ID2 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_swigregister(itkDiscreteGaussianImageFilterID2ID2)
itkDiscreteGaussianImageFilterID2ID2___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2___New_orig__
itkDiscreteGaussianImageFilterID2ID2_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID2ID2_cast


def itkDiscreteGaussianImageFilterID3ID3_New():
    return itkDiscreteGaussianImageFilterID3ID3.New()

class itkDiscreteGaussianImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterID3ID3
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterID3ID3

        Create a new object of the class itkDiscreteGaussianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterID3ID3 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_swigregister(itkDiscreteGaussianImageFilterID3ID3)
itkDiscreteGaussianImageFilterID3ID3___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3___New_orig__
itkDiscreteGaussianImageFilterID3ID3_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterID3ID3_cast


def itkDiscreteGaussianImageFilterIF2IF2_New():
    return itkDiscreteGaussianImageFilterIF2IF2.New()

class itkDiscreteGaussianImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIF2IF2
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIF2IF2

        Create a new object of the class itkDiscreteGaussianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterIF2IF2 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_swigregister(itkDiscreteGaussianImageFilterIF2IF2)
itkDiscreteGaussianImageFilterIF2IF2___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2___New_orig__
itkDiscreteGaussianImageFilterIF2IF2_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF2IF2_cast


def itkDiscreteGaussianImageFilterIF3IF3_New():
    return itkDiscreteGaussianImageFilterIF3IF3.New()

class itkDiscreteGaussianImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIF3IF3
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIF3IF3

        Create a new object of the class itkDiscreteGaussianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterIF3IF3 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_swigregister(itkDiscreteGaussianImageFilterIF3IF3)
itkDiscreteGaussianImageFilterIF3IF3___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3___New_orig__
itkDiscreteGaussianImageFilterIF3IF3_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIF3IF3_cast


def itkDiscreteGaussianImageFilterISS2ISS2_New():
    return itkDiscreteGaussianImageFilterISS2ISS2.New()

class itkDiscreteGaussianImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterISS2ISS2

        Create a new object of the class itkDiscreteGaussianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterISS2ISS2 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_swigregister(itkDiscreteGaussianImageFilterISS2ISS2)
itkDiscreteGaussianImageFilterISS2ISS2___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2___New_orig__
itkDiscreteGaussianImageFilterISS2ISS2_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS2ISS2_cast


def itkDiscreteGaussianImageFilterISS3ISS3_New():
    return itkDiscreteGaussianImageFilterISS3ISS3.New()

class itkDiscreteGaussianImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterISS3ISS3

        Create a new object of the class itkDiscreteGaussianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterISS3ISS3 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_swigregister(itkDiscreteGaussianImageFilterISS3ISS3)
itkDiscreteGaussianImageFilterISS3ISS3___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3___New_orig__
itkDiscreteGaussianImageFilterISS3ISS3_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterISS3ISS3_cast


def itkDiscreteGaussianImageFilterIUC2IUC2_New():
    return itkDiscreteGaussianImageFilterIUC2IUC2.New()

class itkDiscreteGaussianImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIUC2IUC2

        Create a new object of the class itkDiscreteGaussianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterIUC2IUC2 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_swigregister(itkDiscreteGaussianImageFilterIUC2IUC2)
itkDiscreteGaussianImageFilterIUC2IUC2___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2___New_orig__
itkDiscreteGaussianImageFilterIUC2IUC2_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC2IUC2_cast


def itkDiscreteGaussianImageFilterIUC3IUC3_New():
    return itkDiscreteGaussianImageFilterIUC3IUC3.New()

class itkDiscreteGaussianImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIUC3IUC3

        Create a new object of the class itkDiscreteGaussianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterIUC3IUC3 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_swigregister(itkDiscreteGaussianImageFilterIUC3IUC3)
itkDiscreteGaussianImageFilterIUC3IUC3___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3___New_orig__
itkDiscreteGaussianImageFilterIUC3IUC3_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUC3IUC3_cast


def itkDiscreteGaussianImageFilterIUS2IUS2_New():
    return itkDiscreteGaussianImageFilterIUS2IUS2.New()

class itkDiscreteGaussianImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIUS2IUS2

        Create a new object of the class itkDiscreteGaussianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterIUS2IUS2 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_swigregister(itkDiscreteGaussianImageFilterIUS2IUS2)
itkDiscreteGaussianImageFilterIUS2IUS2___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2___New_orig__
itkDiscreteGaussianImageFilterIUS2IUS2_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS2IUS2_cast


def itkDiscreteGaussianImageFilterIUS3IUS3_New():
    return itkDiscreteGaussianImageFilterIUS3IUS3.New()

class itkDiscreteGaussianImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Blurs an image by separable convolution with discrete gaussian
    kernels. This filter performs Gaussian blurring by separable
    convolution of an image and a discrete Gaussian operator (kernel).

    The Gaussian operator used here was described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.) The Gaussian kernel used here was designed so that smoothing
    and derivative operations commute after discretization.

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    See:  GaussianOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:   RecursiveGaussianImageFilter
    example{Filtering/Smoothing/SmoothWithRecursiveGaussian,Computes the
    smoothing with Gaussian kernel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_Clone)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetMaximumKernelWidth)
    GetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetFilterDimensionality)
    SetFilterDimensionality = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetFilterDimensionality)
    SetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetInputBoundaryCondition)
    GetInputBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetInputBoundaryCondition)
    SetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetRealBoundaryCondition)
    GetRealBoundaryCondition = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetRealBoundaryCondition)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetVariance)
    SetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetSigmaArray)
    SetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetSigma)
    GetSigmaArray = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetSigmaArray)
    GetSigma = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetSigma)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetMaximumError)
    SetUseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GetUseImageSpacing)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianImageFilterPython.delete_itkDiscreteGaussianImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianImageFilterIUS3IUS3

        Create a new object of the class itkDiscreteGaussianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianImageFilterIUS3IUS3 in _itkDiscreteGaussianImageFilterPython:
_itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_swigregister(itkDiscreteGaussianImageFilterIUS3IUS3)
itkDiscreteGaussianImageFilterIUS3IUS3___New_orig__ = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3___New_orig__
itkDiscreteGaussianImageFilterIUS3IUS3_cast = _itkDiscreteGaussianImageFilterPython.itkDiscreteGaussianImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def discrete_gaussian_image_filter(*args, **kwargs):
    """Procedural interface for DiscreteGaussianImageFilter"""
    import itk
    instance = itk.DiscreteGaussianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def discrete_gaussian_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DiscreteGaussianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DiscreteGaussianImageFilter.values()[0]
    else:
        filter_object = itk.DiscreteGaussianImageFilter

    discrete_gaussian_image_filter.__doc__ = filter_object.__doc__
    discrete_gaussian_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    discrete_gaussian_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DiscreteGaussianImageFilter, itkTemplate.itkTemplate):
        discrete_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        discrete_gaussian_image_filter.__doc__ += "\n"
        discrete_gaussian_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        discrete_gaussian_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



