# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMeshPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryMask3DMeshSourcePython
else:
    import _itkBinaryMask3DMeshSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinaryMask3DMeshSourcePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinaryMask3DMeshSourcePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageToMeshFilterPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkMeshBasePython
import itk.itkMapContainerPython
import itk.itkBoundingBoxPython
import itk.itkArrayPython
import itk.itkMeshSourcePython

def itkBinaryMask3DMeshSourceISS3MD3_New():
    return itkBinaryMask3DMeshSourceISS3MD3.New()

class itkBinaryMask3DMeshSourceISS3MD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MD3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MD3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MD3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceISS3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceISS3MD3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_swigregister(itkBinaryMask3DMeshSourceISS3MD3)
itkBinaryMask3DMeshSourceISS3MD3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3___New_orig__
itkBinaryMask3DMeshSourceISS3MD3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MD3_cast


def itkBinaryMask3DMeshSourceISS3MF3_New():
    return itkBinaryMask3DMeshSourceISS3MF3.New()

class itkBinaryMask3DMeshSourceISS3MF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MF3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MF3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MF3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceISS3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceISS3MF3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_swigregister(itkBinaryMask3DMeshSourceISS3MF3)
itkBinaryMask3DMeshSourceISS3MF3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3___New_orig__
itkBinaryMask3DMeshSourceISS3MF3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MF3_cast


def itkBinaryMask3DMeshSourceISS3MSS3_New():
    return itkBinaryMask3DMeshSourceISS3MSS3.New()

class itkBinaryMask3DMeshSourceISS3MSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MSS3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MSS3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MSS3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceISS3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceISS3MSS3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_swigregister(itkBinaryMask3DMeshSourceISS3MSS3)
itkBinaryMask3DMeshSourceISS3MSS3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3___New_orig__
itkBinaryMask3DMeshSourceISS3MSS3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MSS3_cast


def itkBinaryMask3DMeshSourceISS3MUC3_New():
    return itkBinaryMask3DMeshSourceISS3MUC3.New()

class itkBinaryMask3DMeshSourceISS3MUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MUC3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MUC3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MUC3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceISS3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceISS3MUC3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_swigregister(itkBinaryMask3DMeshSourceISS3MUC3)
itkBinaryMask3DMeshSourceISS3MUC3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3___New_orig__
itkBinaryMask3DMeshSourceISS3MUC3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUC3_cast


def itkBinaryMask3DMeshSourceISS3MUS3_New():
    return itkBinaryMask3DMeshSourceISS3MUS3.New()

class itkBinaryMask3DMeshSourceISS3MUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterISS3MUS3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceISS3MUS3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceISS3MUS3

        Create a new object of the class itkBinaryMask3DMeshSourceISS3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceISS3MUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceISS3MUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceISS3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceISS3MUS3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_swigregister(itkBinaryMask3DMeshSourceISS3MUS3)
itkBinaryMask3DMeshSourceISS3MUS3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3___New_orig__
itkBinaryMask3DMeshSourceISS3MUS3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceISS3MUS3_cast


def itkBinaryMask3DMeshSourceIUC3MD3_New():
    return itkBinaryMask3DMeshSourceIUC3MD3.New()

class itkBinaryMask3DMeshSourceIUC3MD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MD3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MD3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MD3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUC3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUC3MD3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_swigregister(itkBinaryMask3DMeshSourceIUC3MD3)
itkBinaryMask3DMeshSourceIUC3MD3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3___New_orig__
itkBinaryMask3DMeshSourceIUC3MD3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MD3_cast


def itkBinaryMask3DMeshSourceIUC3MF3_New():
    return itkBinaryMask3DMeshSourceIUC3MF3.New()

class itkBinaryMask3DMeshSourceIUC3MF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MF3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MF3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MF3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUC3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUC3MF3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_swigregister(itkBinaryMask3DMeshSourceIUC3MF3)
itkBinaryMask3DMeshSourceIUC3MF3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3___New_orig__
itkBinaryMask3DMeshSourceIUC3MF3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MF3_cast


def itkBinaryMask3DMeshSourceIUC3MSS3_New():
    return itkBinaryMask3DMeshSourceIUC3MSS3.New()

class itkBinaryMask3DMeshSourceIUC3MSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MSS3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MSS3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MSS3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUC3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUC3MSS3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_swigregister(itkBinaryMask3DMeshSourceIUC3MSS3)
itkBinaryMask3DMeshSourceIUC3MSS3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3___New_orig__
itkBinaryMask3DMeshSourceIUC3MSS3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MSS3_cast


def itkBinaryMask3DMeshSourceIUC3MUC3_New():
    return itkBinaryMask3DMeshSourceIUC3MUC3.New()

class itkBinaryMask3DMeshSourceIUC3MUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MUC3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MUC3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MUC3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUC3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUC3MUC3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_swigregister(itkBinaryMask3DMeshSourceIUC3MUC3)
itkBinaryMask3DMeshSourceIUC3MUC3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3___New_orig__
itkBinaryMask3DMeshSourceIUC3MUC3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUC3_cast


def itkBinaryMask3DMeshSourceIUC3MUS3_New():
    return itkBinaryMask3DMeshSourceIUC3MUS3.New()

class itkBinaryMask3DMeshSourceIUC3MUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUC3MUS3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUC3MUS3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUC3MUS3

        Create a new object of the class itkBinaryMask3DMeshSourceIUC3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUC3MUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUC3MUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUC3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUC3MUS3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_swigregister(itkBinaryMask3DMeshSourceIUC3MUS3)
itkBinaryMask3DMeshSourceIUC3MUS3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3___New_orig__
itkBinaryMask3DMeshSourceIUC3MUS3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUC3MUS3_cast


def itkBinaryMask3DMeshSourceIUS3MD3_New():
    return itkBinaryMask3DMeshSourceIUS3MD3.New()

class itkBinaryMask3DMeshSourceIUS3MD3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MD3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MD3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MD3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUS3MD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUS3MD3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_swigregister(itkBinaryMask3DMeshSourceIUS3MD3)
itkBinaryMask3DMeshSourceIUS3MD3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3___New_orig__
itkBinaryMask3DMeshSourceIUS3MD3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MD3_cast


def itkBinaryMask3DMeshSourceIUS3MF3_New():
    return itkBinaryMask3DMeshSourceIUS3MF3.New()

class itkBinaryMask3DMeshSourceIUS3MF3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MF3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MF3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MF3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUS3MF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUS3MF3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_swigregister(itkBinaryMask3DMeshSourceIUS3MF3)
itkBinaryMask3DMeshSourceIUS3MF3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3___New_orig__
itkBinaryMask3DMeshSourceIUS3MF3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MF3_cast


def itkBinaryMask3DMeshSourceIUS3MSS3_New():
    return itkBinaryMask3DMeshSourceIUS3MSS3.New()

class itkBinaryMask3DMeshSourceIUS3MSS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MSS3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MSS3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MSS3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUS3MSS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUS3MSS3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_swigregister(itkBinaryMask3DMeshSourceIUS3MSS3)
itkBinaryMask3DMeshSourceIUS3MSS3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3___New_orig__
itkBinaryMask3DMeshSourceIUS3MSS3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MSS3_cast


def itkBinaryMask3DMeshSourceIUS3MUC3_New():
    return itkBinaryMask3DMeshSourceIUS3MUC3.New()

class itkBinaryMask3DMeshSourceIUS3MUC3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MUC3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MUC3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MUC3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUS3MUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUS3MUC3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_swigregister(itkBinaryMask3DMeshSourceIUS3MUC3)
itkBinaryMask3DMeshSourceIUS3MUC3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3___New_orig__
itkBinaryMask3DMeshSourceIUS3MUC3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUC3_cast


def itkBinaryMask3DMeshSourceIUS3MUS3_New():
    return itkBinaryMask3DMeshSourceIUS3MUS3.New()

class itkBinaryMask3DMeshSourceIUS3MUS3(itk.itkImageToMeshFilterPython.itkImageToMeshFilterIUS3MUS3):
    r"""


    This class tries to construct a 3D mesh surface based on a binary
    mask. It can be used to integrate a region-based segmentation method
    and a deformable model into one hybrid framework.

    To construct a mesh, we need to construct elements in a voxel and
    combine those elements later to form the final mesh. Before go through
    every voxel in the 3D volume, we first construct 2 look up tables. The
    index of these 2 tables are the on-off combination of the 8 nodes that
    form the voxel. So both of these tables has the size of $2^8$ bytes.
    According to previous work, all those $2^8$ combination of the nodes
    can be grouped into 16 final combinations. In the first table, we
    record the final combination that can be transformed from the current
    combination. The entries of the second table are made up of the
    transforming sequence that is necessary for the current combination
    transform to one of the final combinations.

    We then go through the 3D volume voxel by voxel, using those two
    tables we have defined to construct elements within each voxel. We
    then merge all these mesh elements into one 3D mesh. PARAMETERS The
    ObjectValue parameter is used to identify the object. In most
    applications, pixels in the object region are assigned to "1", so
    the default value of ObjectValue is set to "1" REFERENCE W. Lorensen
    and H. Cline, "Marching Cubes: A High Resolution 3D Surface
    Construction Algorithm", Computer Graphics 21, pp. 163-169, 1987.
    INPUT The input should be a 3D binary image. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_Clone)
    SetObjectValue = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetObjectValue)
    GetNumberOfNodes = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetNumberOfNodes)
    GetNumberOfCells = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetNumberOfCells)
    SetInput = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetInput)
    SetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_SetRegionOfInterest)
    GetRegionOfInterest = _swig_new_instance_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_GetRegionOfInterest)
    __swig_destroy__ = _itkBinaryMask3DMeshSourcePython.delete_itkBinaryMask3DMeshSourceIUS3MUS3
    cast = _swig_new_static_method(_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMask3DMeshSourceIUS3MUS3

        Create a new object of the class itkBinaryMask3DMeshSourceIUS3MUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMask3DMeshSourceIUS3MUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMask3DMeshSourceIUS3MUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMask3DMeshSourceIUS3MUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMask3DMeshSourceIUS3MUS3 in _itkBinaryMask3DMeshSourcePython:
_itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_swigregister(itkBinaryMask3DMeshSourceIUS3MUS3)
itkBinaryMask3DMeshSourceIUS3MUS3___New_orig__ = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3___New_orig__
itkBinaryMask3DMeshSourceIUS3MUS3_cast = _itkBinaryMask3DMeshSourcePython.itkBinaryMask3DMeshSourceIUS3MUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_mask3_d_mesh_source(*args, **kwargs):
    """Procedural interface for BinaryMask3DMeshSource"""
    import itk
    instance = itk.BinaryMask3DMeshSource.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_mask3_d_mesh_source_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryMask3DMeshSource, itkTemplate.itkTemplate):
        filter_object = itk.BinaryMask3DMeshSource.values()[0]
    else:
        filter_object = itk.BinaryMask3DMeshSource

    binary_mask3_d_mesh_source.__doc__ = filter_object.__doc__
    binary_mask3_d_mesh_source.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_mask3_d_mesh_source.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinaryMask3DMeshSource, itkTemplate.itkTemplate):
        binary_mask3_d_mesh_source.__doc__ += itkHelpers.filter_args(filter_object)[0]
        binary_mask3_d_mesh_source.__doc__ += "\n"
        binary_mask3_d_mesh_source.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        binary_mask3_d_mesh_source.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



