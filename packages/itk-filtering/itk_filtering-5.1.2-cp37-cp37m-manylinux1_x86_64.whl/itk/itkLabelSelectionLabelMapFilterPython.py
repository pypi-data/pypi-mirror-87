# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelSelectionLabelMapFilterPython
else:
    import _itkLabelSelectionLabelMapFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLabelSelectionLabelMapFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLabelSelectionLabelMapFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInPlaceLabelMapFilterPython
import itk.itkLabelMapFilterPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkStatisticsLabelObjectPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkTransformBasePython
import itk.itkArrayPython
import itk.itkOptimizerParametersPython
import itk.itkArray2DPython
import itk.itkShapeLabelObjectPython
import itk.itkLabelObjectPython
import itk.itkLabelObjectLinePython
import itk.itkHistogramPython
import itk.itkSamplePython
import itk.ITKLabelMapBasePython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourceCommonPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython

def itkLabelSelectionLabelMapFilterLM2_Superclass_New():
    return itkLabelSelectionLabelMapFilterLM2_Superclass.New()

class itkLabelSelectionLabelMapFilterLM2_Superclass(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM2):
    r"""Proxy of C++ itkLabelSelectionLabelMapFilterLM2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_Clone)
    GetAttributeSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_GetAttributeSet)
    SetAttributeSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_SetAttributeSet)
    GetExclude = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_GetExclude)
    SetExclude = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_SetExclude)
    ExcludeOn = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_ExcludeOn)
    ExcludeOff = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_ExcludeOff)
    SetAttribute = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_SetAttribute)
    ClearAttributeSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_ClearAttributeSet)
    AddAttribute = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_AddAttribute)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM2_Superclass
    cast = _swig_new_static_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM2_Superclass

        Create a new object of the class itkLabelSelectionLabelMapFilterLM2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM2_Superclass in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_swigregister(itkLabelSelectionLabelMapFilterLM2_Superclass)
itkLabelSelectionLabelMapFilterLM2_Superclass___New_orig__ = _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass___New_orig__
itkLabelSelectionLabelMapFilterLM2_Superclass_cast = _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Superclass_cast


def itkLabelSelectionLabelMapFilterLM3_Superclass_New():
    return itkLabelSelectionLabelMapFilterLM3_Superclass.New()

class itkLabelSelectionLabelMapFilterLM3_Superclass(itk.itkInPlaceLabelMapFilterPython.itkInPlaceLabelMapFilterLM3):
    r"""Proxy of C++ itkLabelSelectionLabelMapFilterLM3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_Clone)
    GetAttributeSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_GetAttributeSet)
    SetAttributeSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_SetAttributeSet)
    GetExclude = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_GetExclude)
    SetExclude = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_SetExclude)
    ExcludeOn = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_ExcludeOn)
    ExcludeOff = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_ExcludeOff)
    SetAttribute = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_SetAttribute)
    ClearAttributeSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_ClearAttributeSet)
    AddAttribute = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_AddAttribute)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM3_Superclass
    cast = _swig_new_static_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM3_Superclass

        Create a new object of the class itkLabelSelectionLabelMapFilterLM3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM3_Superclass in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_swigregister(itkLabelSelectionLabelMapFilterLM3_Superclass)
itkLabelSelectionLabelMapFilterLM3_Superclass___New_orig__ = _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass___New_orig__
itkLabelSelectionLabelMapFilterLM3_Superclass_cast = _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Superclass_cast


def itkLabelSelectionLabelMapFilterLM2_New():
    return itkLabelSelectionLabelMapFilterLM2.New()

class itkLabelSelectionLabelMapFilterLM2(itkLabelSelectionLabelMapFilterLM2_Superclass):
    r"""


    remove the objects according to the value of their attribute

    LabelSelectionLabelMapFilter removes the objects in a label collection
    image with an attribute value inside or outside a set of attribute
    values passed by the user. The attribute is provide by an attribute
    accessor given in template parameter. Contrary to the other filters
    made to remove some object of a LabelMap, no ordering relation for the
    attribute is needed in that filter.

    This code was contributed in the Insight Journal paper: "Label object
    representation and manipulation with ITK" by Lehmann
    G.https://hdl.handle.net/1926/584http://www.insight-
    journal.org/browse/publication/176

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:  AttributeLabelObject 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_Clone)
    GetLabelSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_GetLabelSet)
    SetLabelSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_SetLabelSet)
    SetLabel = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_SetLabel)
    ClearLabelSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_ClearLabelSet)
    AddLabel = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_AddLabel)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM2
    cast = _swig_new_static_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM2

        Create a new object of the class itkLabelSelectionLabelMapFilterLM2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM2 in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_swigregister(itkLabelSelectionLabelMapFilterLM2)
itkLabelSelectionLabelMapFilterLM2___New_orig__ = _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2___New_orig__
itkLabelSelectionLabelMapFilterLM2_cast = _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM2_cast


def itkLabelSelectionLabelMapFilterLM3_New():
    return itkLabelSelectionLabelMapFilterLM3.New()

class itkLabelSelectionLabelMapFilterLM3(itkLabelSelectionLabelMapFilterLM3_Superclass):
    r"""


    remove the objects according to the value of their attribute

    LabelSelectionLabelMapFilter removes the objects in a label collection
    image with an attribute value inside or outside a set of attribute
    values passed by the user. The attribute is provide by an attribute
    accessor given in template parameter. Contrary to the other filters
    made to remove some object of a LabelMap, no ordering relation for the
    attribute is needed in that filter.

    This code was contributed in the Insight Journal paper: "Label object
    representation and manipulation with ITK" by Lehmann
    G.https://hdl.handle.net/1926/584http://www.insight-
    journal.org/browse/publication/176

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    See:  AttributeLabelObject 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_Clone)
    GetLabelSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_GetLabelSet)
    SetLabelSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_SetLabelSet)
    SetLabel = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_SetLabel)
    ClearLabelSet = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_ClearLabelSet)
    AddLabel = _swig_new_instance_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_AddLabel)
    __swig_destroy__ = _itkLabelSelectionLabelMapFilterPython.delete_itkLabelSelectionLabelMapFilterLM3
    cast = _swig_new_static_method(_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelSelectionLabelMapFilterLM3

        Create a new object of the class itkLabelSelectionLabelMapFilterLM3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelSelectionLabelMapFilterLM3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelSelectionLabelMapFilterLM3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelSelectionLabelMapFilterLM3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelSelectionLabelMapFilterLM3 in _itkLabelSelectionLabelMapFilterPython:
_itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_swigregister(itkLabelSelectionLabelMapFilterLM3)
itkLabelSelectionLabelMapFilterLM3___New_orig__ = _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3___New_orig__
itkLabelSelectionLabelMapFilterLM3_cast = _itkLabelSelectionLabelMapFilterPython.itkLabelSelectionLabelMapFilterLM3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def label_selection_label_map_filter(*args, **kwargs):
    """Procedural interface for LabelSelectionLabelMapFilter"""
    import itk
    instance = itk.LabelSelectionLabelMapFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def label_selection_label_map_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LabelSelectionLabelMapFilter, itkTemplate.itkTemplate):
        filter_object = itk.LabelSelectionLabelMapFilter.values()[0]
    else:
        filter_object = itk.LabelSelectionLabelMapFilter

    label_selection_label_map_filter.__doc__ = filter_object.__doc__
    label_selection_label_map_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    label_selection_label_map_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LabelSelectionLabelMapFilter, itkTemplate.itkTemplate):
        label_selection_label_map_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        label_selection_label_map_filter.__doc__ += "\n"
        label_selection_label_map_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        label_selection_label_map_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def attribute_selection_label_map_filter(*args, **kwargs):
    """Procedural interface for AttributeSelectionLabelMapFilter"""
    import itk
    instance = itk.AttributeSelectionLabelMapFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def attribute_selection_label_map_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AttributeSelectionLabelMapFilter, itkTemplate.itkTemplate):
        filter_object = itk.AttributeSelectionLabelMapFilter.values()[0]
    else:
        filter_object = itk.AttributeSelectionLabelMapFilter

    attribute_selection_label_map_filter.__doc__ = filter_object.__doc__
    attribute_selection_label_map_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    attribute_selection_label_map_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.AttributeSelectionLabelMapFilter, itkTemplate.itkTemplate):
        attribute_selection_label_map_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        attribute_selection_label_map_filter.__doc__ += "\n"
        attribute_selection_label_map_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        attribute_selection_label_map_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



