# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKIOImageBasePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageFileWriterPython
else:
    import _itkImageFileWriterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageFileWriterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageFileWriterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKIOImageBaseBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython

def itkImageFileWriterICF2_New():
    return itkImageFileWriterICF2.New()

class itkImageFileWriterICF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterICF2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterICF2

        Create a new object of the class itkImageFileWriterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterICF2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterICF2_swigregister(itkImageFileWriterICF2)
itkImageFileWriterICF2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterICF2___New_orig__
itkImageFileWriterICF2_cast = _itkImageFileWriterPython.itkImageFileWriterICF2_cast


def itkImageFileWriterICF3_New():
    return itkImageFileWriterICF3.New()

class itkImageFileWriterICF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICF3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterICF3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterICF3

        Create a new object of the class itkImageFileWriterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterICF3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterICF3_swigregister(itkImageFileWriterICF3)
itkImageFileWriterICF3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterICF3___New_orig__
itkImageFileWriterICF3_cast = _itkImageFileWriterPython.itkImageFileWriterICF3_cast


def itkImageFileWriterICVF22_New():
    return itkImageFileWriterICVF22.New()

class itkImageFileWriterICVF22(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterICVF22
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterICVF22

        Create a new object of the class itkImageFileWriterICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterICVF22 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterICVF22_swigregister(itkImageFileWriterICVF22)
itkImageFileWriterICVF22___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterICVF22___New_orig__
itkImageFileWriterICVF22_cast = _itkImageFileWriterPython.itkImageFileWriterICVF22_cast


def itkImageFileWriterICVF23_New():
    return itkImageFileWriterICVF23.New()

class itkImageFileWriterICVF23(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterICVF23
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterICVF23

        Create a new object of the class itkImageFileWriterICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterICVF23 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterICVF23_swigregister(itkImageFileWriterICVF23)
itkImageFileWriterICVF23___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterICVF23___New_orig__
itkImageFileWriterICVF23_cast = _itkImageFileWriterPython.itkImageFileWriterICVF23_cast


def itkImageFileWriterICVF32_New():
    return itkImageFileWriterICVF32.New()

class itkImageFileWriterICVF32(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterICVF32
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterICVF32

        Create a new object of the class itkImageFileWriterICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterICVF32 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterICVF32_swigregister(itkImageFileWriterICVF32)
itkImageFileWriterICVF32___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterICVF32___New_orig__
itkImageFileWriterICVF32_cast = _itkImageFileWriterPython.itkImageFileWriterICVF32_cast


def itkImageFileWriterICVF33_New():
    return itkImageFileWriterICVF33.New()

class itkImageFileWriterICVF33(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterICVF33
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterICVF33

        Create a new object of the class itkImageFileWriterICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterICVF33 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterICVF33_swigregister(itkImageFileWriterICVF33)
itkImageFileWriterICVF33___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterICVF33___New_orig__
itkImageFileWriterICVF33_cast = _itkImageFileWriterPython.itkImageFileWriterICVF33_cast


def itkImageFileWriterICVF42_New():
    return itkImageFileWriterICVF42.New()

class itkImageFileWriterICVF42(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterICVF42
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterICVF42

        Create a new object of the class itkImageFileWriterICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterICVF42 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterICVF42_swigregister(itkImageFileWriterICVF42)
itkImageFileWriterICVF42___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterICVF42___New_orig__
itkImageFileWriterICVF42_cast = _itkImageFileWriterPython.itkImageFileWriterICVF42_cast


def itkImageFileWriterICVF43_New():
    return itkImageFileWriterICVF43.New()

class itkImageFileWriterICVF43(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterICVF43
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterICVF43

        Create a new object of the class itkImageFileWriterICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterICVF43 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterICVF43_swigregister(itkImageFileWriterICVF43)
itkImageFileWriterICVF43___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterICVF43___New_orig__
itkImageFileWriterICVF43_cast = _itkImageFileWriterPython.itkImageFileWriterICVF43_cast


def itkImageFileWriterID2_New():
    return itkImageFileWriterID2.New()

class itkImageFileWriterID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterID2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterID2

        Create a new object of the class itkImageFileWriterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterID2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterID2_swigregister(itkImageFileWriterID2)
itkImageFileWriterID2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterID2___New_orig__
itkImageFileWriterID2_cast = _itkImageFileWriterPython.itkImageFileWriterID2_cast


def itkImageFileWriterID3_New():
    return itkImageFileWriterID3.New()

class itkImageFileWriterID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterID3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterID3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterID3

        Create a new object of the class itkImageFileWriterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterID3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterID3_swigregister(itkImageFileWriterID3)
itkImageFileWriterID3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterID3___New_orig__
itkImageFileWriterID3_cast = _itkImageFileWriterPython.itkImageFileWriterID3_cast


def itkImageFileWriterIF2_New():
    return itkImageFileWriterIF2.New()

class itkImageFileWriterIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIF2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIF2

        Create a new object of the class itkImageFileWriterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIF2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIF2_swigregister(itkImageFileWriterIF2)
itkImageFileWriterIF2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIF2___New_orig__
itkImageFileWriterIF2_cast = _itkImageFileWriterPython.itkImageFileWriterIF2_cast


def itkImageFileWriterIF3_New():
    return itkImageFileWriterIF3.New()

class itkImageFileWriterIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIF3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIF3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIF3

        Create a new object of the class itkImageFileWriterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIF3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIF3_swigregister(itkImageFileWriterIF3)
itkImageFileWriterIF3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIF3___New_orig__
itkImageFileWriterIF3_cast = _itkImageFileWriterPython.itkImageFileWriterIF3_cast


def itkImageFileWriterIRGBAUC2_New():
    return itkImageFileWriterIRGBAUC2.New()

class itkImageFileWriterIRGBAUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIRGBAUC2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIRGBAUC2

        Create a new object of the class itkImageFileWriterIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIRGBAUC2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_swigregister(itkImageFileWriterIRGBAUC2)
itkImageFileWriterIRGBAUC2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIRGBAUC2___New_orig__
itkImageFileWriterIRGBAUC2_cast = _itkImageFileWriterPython.itkImageFileWriterIRGBAUC2_cast


def itkImageFileWriterIRGBAUC3_New():
    return itkImageFileWriterIRGBAUC3.New()

class itkImageFileWriterIRGBAUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIRGBAUC3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIRGBAUC3

        Create a new object of the class itkImageFileWriterIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIRGBAUC3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_swigregister(itkImageFileWriterIRGBAUC3)
itkImageFileWriterIRGBAUC3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIRGBAUC3___New_orig__
itkImageFileWriterIRGBAUC3_cast = _itkImageFileWriterPython.itkImageFileWriterIRGBAUC3_cast


def itkImageFileWriterIRGBUC2_New():
    return itkImageFileWriterIRGBUC2.New()

class itkImageFileWriterIRGBUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIRGBUC2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIRGBUC2

        Create a new object of the class itkImageFileWriterIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIRGBUC2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIRGBUC2_swigregister(itkImageFileWriterIRGBUC2)
itkImageFileWriterIRGBUC2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIRGBUC2___New_orig__
itkImageFileWriterIRGBUC2_cast = _itkImageFileWriterPython.itkImageFileWriterIRGBUC2_cast


def itkImageFileWriterIRGBUC3_New():
    return itkImageFileWriterIRGBUC3.New()

class itkImageFileWriterIRGBUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIRGBUC3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIRGBUC3

        Create a new object of the class itkImageFileWriterIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIRGBUC3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIRGBUC3_swigregister(itkImageFileWriterIRGBUC3)
itkImageFileWriterIRGBUC3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIRGBUC3___New_orig__
itkImageFileWriterIRGBUC3_cast = _itkImageFileWriterPython.itkImageFileWriterIRGBUC3_cast


def itkImageFileWriterISS2_New():
    return itkImageFileWriterISS2.New()

class itkImageFileWriterISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterISS2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterISS2

        Create a new object of the class itkImageFileWriterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterISS2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterISS2_swigregister(itkImageFileWriterISS2)
itkImageFileWriterISS2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterISS2___New_orig__
itkImageFileWriterISS2_cast = _itkImageFileWriterPython.itkImageFileWriterISS2_cast


def itkImageFileWriterISS3_New():
    return itkImageFileWriterISS3.New()

class itkImageFileWriterISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterISS3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterISS3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterISS3

        Create a new object of the class itkImageFileWriterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterISS3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterISS3_swigregister(itkImageFileWriterISS3)
itkImageFileWriterISS3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterISS3___New_orig__
itkImageFileWriterISS3_cast = _itkImageFileWriterPython.itkImageFileWriterISS3_cast


def itkImageFileWriterIUC2_New():
    return itkImageFileWriterIUC2.New()

class itkImageFileWriterIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIUC2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIUC2

        Create a new object of the class itkImageFileWriterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIUC2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIUC2_swigregister(itkImageFileWriterIUC2)
itkImageFileWriterIUC2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIUC2___New_orig__
itkImageFileWriterIUC2_cast = _itkImageFileWriterPython.itkImageFileWriterIUC2_cast


def itkImageFileWriterIUC3_New():
    return itkImageFileWriterIUC3.New()

class itkImageFileWriterIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIUC3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIUC3

        Create a new object of the class itkImageFileWriterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIUC3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIUC3_swigregister(itkImageFileWriterIUC3)
itkImageFileWriterIUC3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIUC3___New_orig__
itkImageFileWriterIUC3_cast = _itkImageFileWriterPython.itkImageFileWriterIUC3_cast


def itkImageFileWriterIULL2_New():
    return itkImageFileWriterIULL2.New()

class itkImageFileWriterIULL2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIULL2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIULL2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIULL2

        Create a new object of the class itkImageFileWriterIULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIULL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIULL2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIULL2_swigregister(itkImageFileWriterIULL2)
itkImageFileWriterIULL2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIULL2___New_orig__
itkImageFileWriterIULL2_cast = _itkImageFileWriterPython.itkImageFileWriterIULL2_cast


def itkImageFileWriterIULL3_New():
    return itkImageFileWriterIULL3.New()

class itkImageFileWriterIULL3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIULL3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIULL3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIULL3

        Create a new object of the class itkImageFileWriterIULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIULL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIULL3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIULL3_swigregister(itkImageFileWriterIULL3)
itkImageFileWriterIULL3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIULL3___New_orig__
itkImageFileWriterIULL3_cast = _itkImageFileWriterPython.itkImageFileWriterIULL3_cast


def itkImageFileWriterIUS2_New():
    return itkImageFileWriterIUS2.New()

class itkImageFileWriterIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIUS2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIUS2

        Create a new object of the class itkImageFileWriterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIUS2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIUS2_swigregister(itkImageFileWriterIUS2)
itkImageFileWriterIUS2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIUS2___New_orig__
itkImageFileWriterIUS2_cast = _itkImageFileWriterPython.itkImageFileWriterIUS2_cast


def itkImageFileWriterIUS3_New():
    return itkImageFileWriterIUS3.New()

class itkImageFileWriterIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIUS3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIUS3

        Create a new object of the class itkImageFileWriterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIUS3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIUS3_swigregister(itkImageFileWriterIUS3)
itkImageFileWriterIUS3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIUS3___New_orig__
itkImageFileWriterIUS3_cast = _itkImageFileWriterPython.itkImageFileWriterIUS3_cast


def itkImageFileWriterIVF22_New():
    return itkImageFileWriterIVF22.New()

class itkImageFileWriterIVF22(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIVF22
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF22_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF22

        Create a new object of the class itkImageFileWriterIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF22 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIVF22_swigregister(itkImageFileWriterIVF22)
itkImageFileWriterIVF22___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIVF22___New_orig__
itkImageFileWriterIVF22_cast = _itkImageFileWriterPython.itkImageFileWriterIVF22_cast


def itkImageFileWriterIVF23_New():
    return itkImageFileWriterIVF23.New()

class itkImageFileWriterIVF23(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIVF23
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF23_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF23

        Create a new object of the class itkImageFileWriterIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF23 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIVF23_swigregister(itkImageFileWriterIVF23)
itkImageFileWriterIVF23___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIVF23___New_orig__
itkImageFileWriterIVF23_cast = _itkImageFileWriterPython.itkImageFileWriterIVF23_cast


def itkImageFileWriterIVF32_New():
    return itkImageFileWriterIVF32.New()

class itkImageFileWriterIVF32(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIVF32
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF32_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF32

        Create a new object of the class itkImageFileWriterIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF32 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIVF32_swigregister(itkImageFileWriterIVF32)
itkImageFileWriterIVF32___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIVF32___New_orig__
itkImageFileWriterIVF32_cast = _itkImageFileWriterPython.itkImageFileWriterIVF32_cast


def itkImageFileWriterIVF33_New():
    return itkImageFileWriterIVF33.New()

class itkImageFileWriterIVF33(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIVF33
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF33_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF33

        Create a new object of the class itkImageFileWriterIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF33 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIVF33_swigregister(itkImageFileWriterIVF33)
itkImageFileWriterIVF33___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIVF33___New_orig__
itkImageFileWriterIVF33_cast = _itkImageFileWriterPython.itkImageFileWriterIVF33_cast


def itkImageFileWriterIVF42_New():
    return itkImageFileWriterIVF42.New()

class itkImageFileWriterIVF42(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIVF42
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF42_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF42

        Create a new object of the class itkImageFileWriterIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF42 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIVF42_swigregister(itkImageFileWriterIVF42)
itkImageFileWriterIVF42___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIVF42___New_orig__
itkImageFileWriterIVF42_cast = _itkImageFileWriterPython.itkImageFileWriterIVF42_cast


def itkImageFileWriterIVF43_New():
    return itkImageFileWriterIVF43.New()

class itkImageFileWriterIVF43(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterIVF43
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterIVF43_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterIVF43

        Create a new object of the class itkImageFileWriterIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterIVF43 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterIVF43_swigregister(itkImageFileWriterIVF43)
itkImageFileWriterIVF43___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterIVF43___New_orig__
itkImageFileWriterIVF43_cast = _itkImageFileWriterPython.itkImageFileWriterIVF43_cast


def itkImageFileWriterVID2_New():
    return itkImageFileWriterVID2.New()

class itkImageFileWriterVID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVID2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVID2

        Create a new object of the class itkImageFileWriterVID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVID2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVID2_swigregister(itkImageFileWriterVID2)
itkImageFileWriterVID2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVID2___New_orig__
itkImageFileWriterVID2_cast = _itkImageFileWriterPython.itkImageFileWriterVID2_cast


def itkImageFileWriterVID3_New():
    return itkImageFileWriterVID3.New()

class itkImageFileWriterVID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVID3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVID3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVID3

        Create a new object of the class itkImageFileWriterVID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVID3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVID3_swigregister(itkImageFileWriterVID3)
itkImageFileWriterVID3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVID3___New_orig__
itkImageFileWriterVID3_cast = _itkImageFileWriterPython.itkImageFileWriterVID3_cast


def itkImageFileWriterVIF2_New():
    return itkImageFileWriterVIF2.New()

class itkImageFileWriterVIF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVIF2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVIF2

        Create a new object of the class itkImageFileWriterVIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVIF2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVIF2_swigregister(itkImageFileWriterVIF2)
itkImageFileWriterVIF2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVIF2___New_orig__
itkImageFileWriterVIF2_cast = _itkImageFileWriterPython.itkImageFileWriterVIF2_cast


def itkImageFileWriterVIF3_New():
    return itkImageFileWriterVIF3.New()

class itkImageFileWriterVIF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVIF3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVIF3

        Create a new object of the class itkImageFileWriterVIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVIF3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVIF3_swigregister(itkImageFileWriterVIF3)
itkImageFileWriterVIF3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVIF3___New_orig__
itkImageFileWriterVIF3_cast = _itkImageFileWriterPython.itkImageFileWriterVIF3_cast


def itkImageFileWriterVISS2_New():
    return itkImageFileWriterVISS2.New()

class itkImageFileWriterVISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVISS2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVISS2

        Create a new object of the class itkImageFileWriterVISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVISS2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVISS2_swigregister(itkImageFileWriterVISS2)
itkImageFileWriterVISS2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVISS2___New_orig__
itkImageFileWriterVISS2_cast = _itkImageFileWriterPython.itkImageFileWriterVISS2_cast


def itkImageFileWriterVISS3_New():
    return itkImageFileWriterVISS3.New()

class itkImageFileWriterVISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVISS3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVISS3

        Create a new object of the class itkImageFileWriterVISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVISS3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVISS3_swigregister(itkImageFileWriterVISS3)
itkImageFileWriterVISS3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVISS3___New_orig__
itkImageFileWriterVISS3_cast = _itkImageFileWriterPython.itkImageFileWriterVISS3_cast


def itkImageFileWriterVIUC2_New():
    return itkImageFileWriterVIUC2.New()

class itkImageFileWriterVIUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVIUC2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVIUC2

        Create a new object of the class itkImageFileWriterVIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVIUC2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVIUC2_swigregister(itkImageFileWriterVIUC2)
itkImageFileWriterVIUC2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVIUC2___New_orig__
itkImageFileWriterVIUC2_cast = _itkImageFileWriterPython.itkImageFileWriterVIUC2_cast


def itkImageFileWriterVIUC3_New():
    return itkImageFileWriterVIUC3.New()

class itkImageFileWriterVIUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVIUC3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVIUC3

        Create a new object of the class itkImageFileWriterVIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVIUC3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVIUC3_swigregister(itkImageFileWriterVIUC3)
itkImageFileWriterVIUC3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVIUC3___New_orig__
itkImageFileWriterVIUC3_cast = _itkImageFileWriterPython.itkImageFileWriterVIUC3_cast


def itkImageFileWriterVIUS2_New():
    return itkImageFileWriterVIUS2.New()

class itkImageFileWriterVIUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVIUS2
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVIUS2

        Create a new object of the class itkImageFileWriterVIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVIUS2 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVIUS2_swigregister(itkImageFileWriterVIUS2)
itkImageFileWriterVIUS2___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVIUS2___New_orig__
itkImageFileWriterVIUS2_cast = _itkImageFileWriterPython.itkImageFileWriterVIUS2_cast


def itkImageFileWriterVIUS3_New():
    return itkImageFileWriterVIUS3.New()

class itkImageFileWriterVIUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Writes image data to a single file.

    ImageFileWriter writes its input data to a single output file.
    ImageFileWriter interfaces with an ImageIO class to write out the
    data. If you wish to write data into a series of files (e.g., a slice
    per file) use ImageSeriesWriter.

    A pluggable factory pattern is used that allows different kinds of
    writers to be registered (even at run time) without having to modify
    the code in this class. You can either manually instantiate the
    ImageIO object and associate it with the ImageFileWriter, or let the
    class figure it out from the extension. Normally just setting the
    filename with a suitable suffix (".png", ".jpg", etc) and setting
    the input to the writer is enough to get the writer to work properly.

    See:   ImageSeriesReader

    See:   ImageIOBase 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_Clone)
    SetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_SetInput)
    GetInput = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetInput)
    SetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_SetFileName)
    GetFileName = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetFileName)
    SetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_SetImageIO)
    GetModifiableImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetModifiableImageIO)
    GetImageIO = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetImageIO)
    Write = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_Write)
    SetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_SetIORegion)
    GetIORegion = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetIORegion)
    SetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_SetNumberOfStreamDivisions)
    GetNumberOfStreamDivisions = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetNumberOfStreamDivisions)
    SetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_SetUseCompression)
    GetUseCompression = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetUseCompression)
    UseCompressionOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_UseCompressionOn)
    UseCompressionOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_UseCompressionOff)
    SetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_SetCompressionLevel)
    GetCompressionLevel = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetCompressionLevel)
    SetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_SetUseInputMetaDataDictionary)
    GetUseInputMetaDataDictionary = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_GetUseInputMetaDataDictionary)
    UseInputMetaDataDictionaryOn = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_UseInputMetaDataDictionaryOn)
    UseInputMetaDataDictionaryOff = _swig_new_instance_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_UseInputMetaDataDictionaryOff)
    __swig_destroy__ = _itkImageFileWriterPython.delete_itkImageFileWriterVIUS3
    cast = _swig_new_static_method(_itkImageFileWriterPython.itkImageFileWriterVIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageFileWriterVIUS3

        Create a new object of the class itkImageFileWriterVIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageFileWriterVIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageFileWriterVIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageFileWriterVIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageFileWriterVIUS3 in _itkImageFileWriterPython:
_itkImageFileWriterPython.itkImageFileWriterVIUS3_swigregister(itkImageFileWriterVIUS3)
itkImageFileWriterVIUS3___New_orig__ = _itkImageFileWriterPython.itkImageFileWriterVIUS3___New_orig__
itkImageFileWriterVIUS3_cast = _itkImageFileWriterPython.itkImageFileWriterVIUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_file_writer(*args, **kwargs):
    """Procedural interface for ImageFileWriter"""
    import itk
    instance = itk.ImageFileWriter.New(*args, **kwargs)
    return instance.__internal_call__()

def image_file_writer_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ImageFileWriter, itkTemplate.itkTemplate):
        filter_object = itk.ImageFileWriter.values()[0]
    else:
        filter_object = itk.ImageFileWriter

    image_file_writer.__doc__ = filter_object.__doc__
    image_file_writer.__doc__ += "\n Args are Input(s) to the filter.\n"
    image_file_writer.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ImageFileWriter, itkTemplate.itkTemplate):
        image_file_writer.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_file_writer.__doc__ += "\n"
        image_file_writer.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_file_writer.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



