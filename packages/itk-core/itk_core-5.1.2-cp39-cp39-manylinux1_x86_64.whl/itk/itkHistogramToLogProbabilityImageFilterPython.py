# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKStatisticsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHistogramToLogProbabilityImageFilterPython
else:
    import _itkHistogramToLogProbabilityImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHistogramToLogProbabilityImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHistogramToLogProbabilityImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkHistogramPython
import itk.itkArrayPython
import itk.itkSamplePython

def itkHistogramToLogProbabilityImageFilterHDID2_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDID2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID2_Superclass
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID2_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDID2_Superclass)
itkHistogramToLogProbabilityImageFilterHDID2_Superclass___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass___New_orig__
itkHistogramToLogProbabilityImageFilterHDID2_Superclass_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Superclass_cast


def itkHistogramToLogProbabilityImageFilterHDID3_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDID3_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID3_Superclass
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID3_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDID3_Superclass)
itkHistogramToLogProbabilityImageFilterHDID3_Superclass___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass___New_orig__
itkHistogramToLogProbabilityImageFilterHDID3_Superclass_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Superclass_cast


def itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF2_Superclass
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF2_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass___New_orig__
itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Superclass_cast


def itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHDIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHDIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF3_Superclass
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF3_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass___New_orig__
itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Superclass_cast


def itkHistogramToLogProbabilityImageFilterHFID2_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFID2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFID2_Superclass(itk.itkImageSourcePython.itkImageSourceID2):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID2_Superclass
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID2_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFID2_Superclass)
itkHistogramToLogProbabilityImageFilterHFID2_Superclass___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass___New_orig__
itkHistogramToLogProbabilityImageFilterHFID2_Superclass_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Superclass_cast


def itkHistogramToLogProbabilityImageFilterHFID3_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFID3_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFID3_Superclass(itk.itkImageSourcePython.itkImageSourceID3):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID3_Superclass
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID3_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFID3_Superclass)
itkHistogramToLogProbabilityImageFilterHFID3_Superclass___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass___New_orig__
itkHistogramToLogProbabilityImageFilterHFID3_Superclass_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Superclass_cast


def itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFIF2_Superclass(itk.itkImageSourcePython.itkImageSourceIF2):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF2_Superclass
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF2_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF2_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass___New_orig__
itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Superclass_cast


def itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_New():
    return itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New()

class itkHistogramToLogProbabilityImageFilterHFIF3_Superclass(itk.itkImageSourcePython.itkImageSourceIF3):
    r"""Proxy of C++ itkHistogramToLogProbabilityImageFilterHFIF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_Clone)
    SetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_GetInput)
    SetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetFunctor)
    GetFunctor = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_GetFunctor)
    SetTotalFrequency = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_SetTotalFrequency)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF3_Superclass
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF3_Superclass

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF3_Superclass in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_swigregister(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass)
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass___New_orig__
itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Superclass_cast


def itkHistogramToLogProbabilityImageFilterHDID2_New():
    return itkHistogramToLogProbabilityImageFilterHDID2.New()

class itkHistogramToLogProbabilityImageFilterHDID2(itkHistogramToLogProbabilityImageFilterHDID2_Superclass):
    r"""


    The class takes a histogram as an input and gives the log probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\log_2( \\frac{q_I}{\\sum_{i \\in I} q_I} )
    \\] where $q_I$ is the frequency of measurement vector, I.

    This is the log of the frequency of a measurement vector by the sum of
    all frequencies.

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_Clone)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID2
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID2 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_swigregister(itkHistogramToLogProbabilityImageFilterHDID2)
itkHistogramToLogProbabilityImageFilterHDID2___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2___New_orig__
itkHistogramToLogProbabilityImageFilterHDID2_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID2_cast


def itkHistogramToLogProbabilityImageFilterHDID3_New():
    return itkHistogramToLogProbabilityImageFilterHDID3.New()

class itkHistogramToLogProbabilityImageFilterHDID3(itkHistogramToLogProbabilityImageFilterHDID3_Superclass):
    r"""


    The class takes a histogram as an input and gives the log probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\log_2( \\frac{q_I}{\\sum_{i \\in I} q_I} )
    \\] where $q_I$ is the frequency of measurement vector, I.

    This is the log of the frequency of a measurement vector by the sum of
    all frequencies.

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_Clone)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDID3
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDID3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDID3 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_swigregister(itkHistogramToLogProbabilityImageFilterHDID3)
itkHistogramToLogProbabilityImageFilterHDID3___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3___New_orig__
itkHistogramToLogProbabilityImageFilterHDID3_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDID3_cast


def itkHistogramToLogProbabilityImageFilterHDIF2_New():
    return itkHistogramToLogProbabilityImageFilterHDIF2.New()

class itkHistogramToLogProbabilityImageFilterHDIF2(itkHistogramToLogProbabilityImageFilterHDIF2_Superclass):
    r"""


    The class takes a histogram as an input and gives the log probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\log_2( \\frac{q_I}{\\sum_{i \\in I} q_I} )
    \\] where $q_I$ is the frequency of measurement vector, I.

    This is the log of the frequency of a measurement vector by the sum of
    all frequencies.

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_Clone)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF2
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF2 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_swigregister(itkHistogramToLogProbabilityImageFilterHDIF2)
itkHistogramToLogProbabilityImageFilterHDIF2___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2___New_orig__
itkHistogramToLogProbabilityImageFilterHDIF2_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF2_cast


def itkHistogramToLogProbabilityImageFilterHDIF3_New():
    return itkHistogramToLogProbabilityImageFilterHDIF3.New()

class itkHistogramToLogProbabilityImageFilterHDIF3(itkHistogramToLogProbabilityImageFilterHDIF3_Superclass):
    r"""


    The class takes a histogram as an input and gives the log probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\log_2( \\frac{q_I}{\\sum_{i \\in I} q_I} )
    \\] where $q_I$ is the frequency of measurement vector, I.

    This is the log of the frequency of a measurement vector by the sum of
    all frequencies.

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_Clone)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHDIF3
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHDIF3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHDIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHDIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHDIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHDIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHDIF3 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_swigregister(itkHistogramToLogProbabilityImageFilterHDIF3)
itkHistogramToLogProbabilityImageFilterHDIF3___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3___New_orig__
itkHistogramToLogProbabilityImageFilterHDIF3_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHDIF3_cast


def itkHistogramToLogProbabilityImageFilterHFID2_New():
    return itkHistogramToLogProbabilityImageFilterHFID2.New()

class itkHistogramToLogProbabilityImageFilterHFID2(itkHistogramToLogProbabilityImageFilterHFID2_Superclass):
    r"""


    The class takes a histogram as an input and gives the log probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\log_2( \\frac{q_I}{\\sum_{i \\in I} q_I} )
    \\] where $q_I$ is the frequency of measurement vector, I.

    This is the log of the frequency of a measurement vector by the sum of
    all frequencies.

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_Clone)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID2
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID2 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_swigregister(itkHistogramToLogProbabilityImageFilterHFID2)
itkHistogramToLogProbabilityImageFilterHFID2___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2___New_orig__
itkHistogramToLogProbabilityImageFilterHFID2_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID2_cast


def itkHistogramToLogProbabilityImageFilterHFID3_New():
    return itkHistogramToLogProbabilityImageFilterHFID3.New()

class itkHistogramToLogProbabilityImageFilterHFID3(itkHistogramToLogProbabilityImageFilterHFID3_Superclass):
    r"""


    The class takes a histogram as an input and gives the log probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\log_2( \\frac{q_I}{\\sum_{i \\in I} q_I} )
    \\] where $q_I$ is the frequency of measurement vector, I.

    This is the log of the frequency of a measurement vector by the sum of
    all frequencies.

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_Clone)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFID3
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFID3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFID3 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_swigregister(itkHistogramToLogProbabilityImageFilterHFID3)
itkHistogramToLogProbabilityImageFilterHFID3___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3___New_orig__
itkHistogramToLogProbabilityImageFilterHFID3_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFID3_cast


def itkHistogramToLogProbabilityImageFilterHFIF2_New():
    return itkHistogramToLogProbabilityImageFilterHFIF2.New()

class itkHistogramToLogProbabilityImageFilterHFIF2(itkHistogramToLogProbabilityImageFilterHFIF2_Superclass):
    r"""


    The class takes a histogram as an input and gives the log probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\log_2( \\frac{q_I}{\\sum_{i \\in I} q_I} )
    \\] where $q_I$ is the frequency of measurement vector, I.

    This is the log of the frequency of a measurement vector by the sum of
    all frequencies.

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_Clone)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF2
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF2

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF2 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_swigregister(itkHistogramToLogProbabilityImageFilterHFIF2)
itkHistogramToLogProbabilityImageFilterHFIF2___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2___New_orig__
itkHistogramToLogProbabilityImageFilterHFIF2_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF2_cast


def itkHistogramToLogProbabilityImageFilterHFIF3_New():
    return itkHistogramToLogProbabilityImageFilterHFIF3.New()

class itkHistogramToLogProbabilityImageFilterHFIF3(itkHistogramToLogProbabilityImageFilterHFIF3_Superclass):
    r"""


    The class takes a histogram as an input and gives the log probability
    image as the output. A pixel, at position I, in the output image is
    given by.

    \\[ f(I) = \\log_2( \\frac{q_I}{\\sum_{i \\in I} q_I} )
    \\] where $q_I$ is the frequency of measurement vector, I.

    This is the log of the frequency of a measurement vector by the sum of
    all frequencies.

    The output image is of type double.

    This is useful in plotting the joint histograms during registration.

    See:  HistogramToImageFilter, HistogramToProbabilityImageFilter,
    HistogramToIntensityImageFilter, HistogramToEntropyImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_Clone)
    __swig_destroy__ = _itkHistogramToLogProbabilityImageFilterPython.delete_itkHistogramToLogProbabilityImageFilterHFIF3
    cast = _swig_new_static_method(_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_cast)

    def New(*args, **kargs):
        """New() -> itkHistogramToLogProbabilityImageFilterHFIF3

        Create a new object of the class itkHistogramToLogProbabilityImageFilterHFIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHistogramToLogProbabilityImageFilterHFIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHistogramToLogProbabilityImageFilterHFIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHistogramToLogProbabilityImageFilterHFIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHistogramToLogProbabilityImageFilterHFIF3 in _itkHistogramToLogProbabilityImageFilterPython:
_itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_swigregister(itkHistogramToLogProbabilityImageFilterHFIF3)
itkHistogramToLogProbabilityImageFilterHFIF3___New_orig__ = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3___New_orig__
itkHistogramToLogProbabilityImageFilterHFIF3_cast = _itkHistogramToLogProbabilityImageFilterPython.itkHistogramToLogProbabilityImageFilterHFIF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_log_probability_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToLogProbabilityImageFilter"""
    import itk
    instance = itk.HistogramToLogProbabilityImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_log_probability_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToLogProbabilityImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToLogProbabilityImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToLogProbabilityImageFilter

    histogram_to_log_probability_image_filter.__doc__ = filter_object.__doc__
    histogram_to_log_probability_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_log_probability_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HistogramToLogProbabilityImageFilter, itkTemplate.itkTemplate):
        histogram_to_log_probability_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        histogram_to_log_probability_image_filter.__doc__ += "\n"
        histogram_to_log_probability_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        histogram_to_log_probability_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def histogram_to_image_filter(*args, **kwargs):
    """Procedural interface for HistogramToImageFilter"""
    import itk
    instance = itk.HistogramToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def histogram_to_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.HistogramToImageFilter.values()[0]
    else:
        filter_object = itk.HistogramToImageFilter

    histogram_to_image_filter.__doc__ = filter_object.__doc__
    histogram_to_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    histogram_to_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.HistogramToImageFilter, itkTemplate.itkTemplate):
        histogram_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        histogram_to_image_filter.__doc__ += "\n"
        histogram_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        histogram_to_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



