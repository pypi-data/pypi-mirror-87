# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: aipod/rpc/proto/ai.proto

import sys


_b = sys.version_info[0] < 3 and (lambda x: x) or (lambda x: x.encode("latin1"))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database


# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor.FileDescriptor(
    name="aipod/rpc/proto/ai.proto",
    package="ai",
    syntax="proto3",
    serialized_options=None,
    serialized_pb=_b(
        '\n\x18\x61ipod/rpc/proto/ai.proto\x12\x02\x61i"B\n\x05Input\x12\x13\n\x0bkwargs_json\x18\x01 \x01(\x0c\x12\x0f\n\x07version\x18\x02 \x01(\t\x12\x13\n\x0b\x62inary_data\x18\x03 \x01(\x0c"\x1b\n\x06Output\x12\x11\n\tdata_json\x18\x01 \x01(\x0c\x32\x91\x01\n\x02\x41I\x12%\n\ninitialize\x12\t.ai.Input\x1a\n.ai.Output"\x00\x12 \n\x05train\x12\t.ai.Input\x1a\n.ai.Output"\x00\x12"\n\x07predict\x12\t.ai.Input\x1a\n.ai.Output"\x00\x12\x1e\n\x03log\x12\t.ai.Input\x1a\n.ai.Output"\x00\x62\x06proto3'
    ),
)


_INPUT = _descriptor.Descriptor(
    name="Input",
    full_name="ai.Input",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name="kwargs_json",
            full_name="ai.Input.kwargs_json",
            index=0,
            number=1,
            type=12,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=_b(""),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
        ),
        _descriptor.FieldDescriptor(
            name="version",
            full_name="ai.Input.version",
            index=1,
            number=2,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=_b("").decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
        ),
        _descriptor.FieldDescriptor(
            name="binary_data",
            full_name="ai.Input.binary_data",
            index=2,
            number=3,
            type=12,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=_b(""),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=32,
    serialized_end=98,
)


_OUTPUT = _descriptor.Descriptor(
    name="Output",
    full_name="ai.Output",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    fields=[
        _descriptor.FieldDescriptor(
            name="data_json",
            full_name="ai.Output.data_json",
            index=0,
            number=1,
            type=12,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=_b(""),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=100,
    serialized_end=127,
)

DESCRIPTOR.message_types_by_name["Input"] = _INPUT
DESCRIPTOR.message_types_by_name["Output"] = _OUTPUT
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Input = _reflection.GeneratedProtocolMessageType(
    "Input",
    (_message.Message,),
    {
        "DESCRIPTOR": _INPUT,
        "__module__": "aipod.rpc.proto.ai_pb2"
        # @@protoc_insertion_point(class_scope:ai.Input)
    },
)
_sym_db.RegisterMessage(Input)

Output = _reflection.GeneratedProtocolMessageType(
    "Output",
    (_message.Message,),
    {
        "DESCRIPTOR": _OUTPUT,
        "__module__": "aipod.rpc.proto.ai_pb2"
        # @@protoc_insertion_point(class_scope:ai.Output)
    },
)
_sym_db.RegisterMessage(Output)


_AI = _descriptor.ServiceDescriptor(
    name="AI",
    full_name="ai.AI",
    file=DESCRIPTOR,
    index=0,
    serialized_options=None,
    serialized_start=130,
    serialized_end=275,
    methods=[
        _descriptor.MethodDescriptor(
            name="initialize",
            full_name="ai.AI.initialize",
            index=0,
            containing_service=None,
            input_type=_INPUT,
            output_type=_OUTPUT,
            serialized_options=None,
        ),
        _descriptor.MethodDescriptor(
            name="train",
            full_name="ai.AI.train",
            index=1,
            containing_service=None,
            input_type=_INPUT,
            output_type=_OUTPUT,
            serialized_options=None,
        ),
        _descriptor.MethodDescriptor(
            name="predict",
            full_name="ai.AI.predict",
            index=2,
            containing_service=None,
            input_type=_INPUT,
            output_type=_OUTPUT,
            serialized_options=None,
        ),
        _descriptor.MethodDescriptor(
            name="log",
            full_name="ai.AI.log",
            index=3,
            containing_service=None,
            input_type=_INPUT,
            output_type=_OUTPUT,
            serialized_options=None,
        ),
    ],
)
_sym_db.RegisterServiceDescriptor(_AI)

DESCRIPTOR.services_by_name["AI"] = _AI

# @@protoc_insertion_point(module_scope)
