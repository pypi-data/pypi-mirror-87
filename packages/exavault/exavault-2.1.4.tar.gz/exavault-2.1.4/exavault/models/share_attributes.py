# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ShareAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'has_password': 'bool',
        'public': 'bool',
        'access_mode': 'AccessMode',
        'access_description': 'str',
        'embed': 'bool',
        'hash': 'str',
        'owner_hash': 'str',
        'expiration': 'str',
        'expired': 'bool',
        'resent': 'datetime',
        'type': 'str',
        'require_email': 'bool',
        'file_drop_create_folders': 'bool',
        'paths': 'list[str]',
        'recipients': 'list[ShareRecipient]',
        'messages': 'list[ShareMessage]',
        'inherited': 'bool',
        'status': 'int',
        'has_notification': 'bool',
        'created': 'datetime',
        'modified': 'datetime',
        'tracking_status': 'str',
        'form_id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'has_password': 'hasPassword',
        'public': 'public',
        'access_mode': 'accessMode',
        'access_description': 'accessDescription',
        'embed': 'embed',
        'hash': 'hash',
        'owner_hash': 'ownerHash',
        'expiration': 'expiration',
        'expired': 'expired',
        'resent': 'resent',
        'type': 'type',
        'require_email': 'requireEmail',
        'file_drop_create_folders': 'fileDropCreateFolders',
        'paths': 'paths',
        'recipients': 'recipients',
        'messages': 'messages',
        'inherited': 'inherited',
        'status': 'status',
        'has_notification': 'hasNotification',
        'created': 'created',
        'modified': 'modified',
        'tracking_status': 'trackingStatus',
        'form_id': 'formId'
    }

    def __init__(self, name=None, has_password=None, public=None, access_mode=None, access_description=None, embed=None, hash=None, owner_hash=None, expiration=None, expired=None, resent=None, type=None, require_email=None, file_drop_create_folders=None, paths=None, recipients=None, messages=None, inherited=None, status=None, has_notification=None, created=None, modified=None, tracking_status=None, form_id=None):  # noqa: E501
        """ShareAttributes - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._has_password = None
        self._public = None
        self._access_mode = None
        self._access_description = None
        self._embed = None
        self._hash = None
        self._owner_hash = None
        self._expiration = None
        self._expired = None
        self._resent = None
        self._type = None
        self._require_email = None
        self._file_drop_create_folders = None
        self._paths = None
        self._recipients = None
        self._messages = None
        self._inherited = None
        self._status = None
        self._has_notification = None
        self._created = None
        self._modified = None
        self._tracking_status = None
        self._form_id = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if has_password is not None:
            self.has_password = has_password
        if public is not None:
            self.public = public
        if access_mode is not None:
            self.access_mode = access_mode
        if access_description is not None:
            self.access_description = access_description
        if embed is not None:
            self.embed = embed
        if hash is not None:
            self.hash = hash
        if owner_hash is not None:
            self.owner_hash = owner_hash
        if expiration is not None:
            self.expiration = expiration
        if expired is not None:
            self.expired = expired
        if resent is not None:
            self.resent = resent
        if type is not None:
            self.type = type
        if require_email is not None:
            self.require_email = require_email
        if file_drop_create_folders is not None:
            self.file_drop_create_folders = file_drop_create_folders
        if paths is not None:
            self.paths = paths
        if recipients is not None:
            self.recipients = recipients
        if messages is not None:
            self.messages = messages
        if inherited is not None:
            self.inherited = inherited
        if status is not None:
            self.status = status
        if has_notification is not None:
            self.has_notification = has_notification
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if tracking_status is not None:
            self.tracking_status = tracking_status
        if form_id is not None:
            self.form_id = form_id

    @property
    def name(self):
        """Gets the name of this ShareAttributes.  # noqa: E501

        Share name.  # noqa: E501

        :return: The name of this ShareAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShareAttributes.

        Share name.  # noqa: E501

        :param name: The name of this ShareAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def has_password(self):
        """Gets the has_password of this ShareAttributes.  # noqa: E501

        True if the share has password.  # noqa: E501

        :return: The has_password of this ShareAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this ShareAttributes.

        True if the share has password.  # noqa: E501

        :param has_password: The has_password of this ShareAttributes.  # noqa: E501
        :type: bool
        """

        self._has_password = has_password

    @property
    def public(self):
        """Gets the public of this ShareAttributes.  # noqa: E501

        True if the share has a public url.  # noqa: E501

        :return: The public of this ShareAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ShareAttributes.

        True if the share has a public url.  # noqa: E501

        :param public: The public of this ShareAttributes.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def access_mode(self):
        """Gets the access_mode of this ShareAttributes.  # noqa: E501


        :return: The access_mode of this ShareAttributes.  # noqa: E501
        :rtype: AccessMode
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this ShareAttributes.


        :param access_mode: The access_mode of this ShareAttributes.  # noqa: E501
        :type: AccessMode
        """

        self._access_mode = access_mode

    @property
    def access_description(self):
        """Gets the access_description of this ShareAttributes.  # noqa: E501

        Description of the share access rights.  # noqa: E501

        :return: The access_description of this ShareAttributes.  # noqa: E501
        :rtype: str
        """
        return self._access_description

    @access_description.setter
    def access_description(self, access_description):
        """Sets the access_description of this ShareAttributes.

        Description of the share access rights.  # noqa: E501

        :param access_description: The access_description of this ShareAttributes.  # noqa: E501
        :type: str
        """

        self._access_description = access_description

    @property
    def embed(self):
        """Gets the embed of this ShareAttributes.  # noqa: E501

        True if share can be embedded.  # noqa: E501

        :return: The embed of this ShareAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._embed

    @embed.setter
    def embed(self, embed):
        """Sets the embed of this ShareAttributes.

        True if share can be embedded.  # noqa: E501

        :param embed: The embed of this ShareAttributes.  # noqa: E501
        :type: bool
        """

        self._embed = embed

    @property
    def hash(self):
        """Gets the hash of this ShareAttributes.  # noqa: E501

        Share hash.  # noqa: E501

        :return: The hash of this ShareAttributes.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ShareAttributes.

        Share hash.  # noqa: E501

        :param hash: The hash of this ShareAttributes.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def owner_hash(self):
        """Gets the owner_hash of this ShareAttributes.  # noqa: E501

        Share owner's hash.  # noqa: E501

        :return: The owner_hash of this ShareAttributes.  # noqa: E501
        :rtype: str
        """
        return self._owner_hash

    @owner_hash.setter
    def owner_hash(self, owner_hash):
        """Sets the owner_hash of this ShareAttributes.

        Share owner's hash.  # noqa: E501

        :param owner_hash: The owner_hash of this ShareAttributes.  # noqa: E501
        :type: str
        """

        self._owner_hash = owner_hash

    @property
    def expiration(self):
        """Gets the expiration of this ShareAttributes.  # noqa: E501

        Expiration date of the share.  # noqa: E501

        :return: The expiration of this ShareAttributes.  # noqa: E501
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ShareAttributes.

        Expiration date of the share.  # noqa: E501

        :param expiration: The expiration of this ShareAttributes.  # noqa: E501
        :type: str
        """

        self._expiration = expiration

    @property
    def expired(self):
        """Gets the expired of this ShareAttributes.  # noqa: E501

        True if the share has expired.  # noqa: E501

        :return: The expired of this ShareAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this ShareAttributes.

        True if the share has expired.  # noqa: E501

        :param expired: The expired of this ShareAttributes.  # noqa: E501
        :type: bool
        """

        self._expired = expired

    @property
    def resent(self):
        """Gets the resent of this ShareAttributes.  # noqa: E501

        Invitations resent date. Can be `null` if resent never happened.  # noqa: E501

        :return: The resent of this ShareAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._resent

    @resent.setter
    def resent(self, resent):
        """Sets the resent of this ShareAttributes.

        Invitations resent date. Can be `null` if resent never happened.  # noqa: E501

        :param resent: The resent of this ShareAttributes.  # noqa: E501
        :type: datetime
        """

        self._resent = resent

    @property
    def type(self):
        """Gets the type of this ShareAttributes.  # noqa: E501

        Type of share.  # noqa: E501

        :return: The type of this ShareAttributes.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ShareAttributes.

        Type of share.  # noqa: E501

        :param type: The type of this ShareAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["shared_folder", "send", "receive"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def require_email(self):
        """Gets the require_email of this ShareAttributes.  # noqa: E501

        True if share requires email to access.  # noqa: E501

        :return: The require_email of this ShareAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._require_email

    @require_email.setter
    def require_email(self, require_email):
        """Sets the require_email of this ShareAttributes.

        True if share requires email to access.  # noqa: E501

        :param require_email: The require_email of this ShareAttributes.  # noqa: E501
        :type: bool
        """

        self._require_email = require_email

    @property
    def file_drop_create_folders(self):
        """Gets the file_drop_create_folders of this ShareAttributes.  # noqa: E501

        Flag to show if separate folders should be created for each file upload to receive folder.  # noqa: E501

        :return: The file_drop_create_folders of this ShareAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._file_drop_create_folders

    @file_drop_create_folders.setter
    def file_drop_create_folders(self, file_drop_create_folders):
        """Sets the file_drop_create_folders of this ShareAttributes.

        Flag to show if separate folders should be created for each file upload to receive folder.  # noqa: E501

        :param file_drop_create_folders: The file_drop_create_folders of this ShareAttributes.  # noqa: E501
        :type: bool
        """

        self._file_drop_create_folders = file_drop_create_folders

    @property
    def paths(self):
        """Gets the paths of this ShareAttributes.  # noqa: E501

        Path to the shared resource in your account.  # noqa: E501

        :return: The paths of this ShareAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this ShareAttributes.

        Path to the shared resource in your account.  # noqa: E501

        :param paths: The paths of this ShareAttributes.  # noqa: E501
        :type: list[str]
        """

        self._paths = paths

    @property
    def recipients(self):
        """Gets the recipients of this ShareAttributes.  # noqa: E501

        Array of recipients.  # noqa: E501

        :return: The recipients of this ShareAttributes.  # noqa: E501
        :rtype: list[ShareRecipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ShareAttributes.

        Array of recipients.  # noqa: E501

        :param recipients: The recipients of this ShareAttributes.  # noqa: E501
        :type: list[ShareRecipient]
        """

        self._recipients = recipients

    @property
    def messages(self):
        """Gets the messages of this ShareAttributes.  # noqa: E501

        Array of invitation messages.  # noqa: E501

        :return: The messages of this ShareAttributes.  # noqa: E501
        :rtype: list[ShareMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ShareAttributes.

        Array of invitation messages.  # noqa: E501

        :param messages: The messages of this ShareAttributes.  # noqa: E501
        :type: list[ShareMessage]
        """

        self._messages = messages

    @property
    def inherited(self):
        """Gets the inherited of this ShareAttributes.  # noqa: E501

        True if share inherited from parent folder.  # noqa: E501

        :return: The inherited of this ShareAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._inherited

    @inherited.setter
    def inherited(self, inherited):
        """Sets the inherited of this ShareAttributes.

        True if share inherited from parent folder.  # noqa: E501

        :param inherited: The inherited of this ShareAttributes.  # noqa: E501
        :type: bool
        """

        self._inherited = inherited

    @property
    def status(self):
        """Gets the status of this ShareAttributes.  # noqa: E501

        Share activity status. Can be active (1) or deactivated (0).  # noqa: E501

        :return: The status of this ShareAttributes.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ShareAttributes.

        Share activity status. Can be active (1) or deactivated (0).  # noqa: E501

        :param status: The status of this ShareAttributes.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def has_notification(self):
        """Gets the has_notification of this ShareAttributes.  # noqa: E501

        True if share has notification.  # noqa: E501

        :return: The has_notification of this ShareAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._has_notification

    @has_notification.setter
    def has_notification(self, has_notification):
        """Sets the has_notification of this ShareAttributes.

        True if share has notification.  # noqa: E501

        :param has_notification: The has_notification of this ShareAttributes.  # noqa: E501
        :type: bool
        """

        self._has_notification = has_notification

    @property
    def created(self):
        """Gets the created of this ShareAttributes.  # noqa: E501

        Timestamp of share creation.  # noqa: E501

        :return: The created of this ShareAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ShareAttributes.

        Timestamp of share creation.  # noqa: E501

        :param created: The created of this ShareAttributes.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this ShareAttributes.  # noqa: E501

        Timestamp of share modification. Can be `null` if it wasn't modified.  # noqa: E501

        :return: The modified of this ShareAttributes.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this ShareAttributes.

        Timestamp of share modification. Can be `null` if it wasn't modified.  # noqa: E501

        :param modified: The modified of this ShareAttributes.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def tracking_status(self):
        """Gets the tracking_status of this ShareAttributes.  # noqa: E501

        Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)  # noqa: E501

        :return: The tracking_status of this ShareAttributes.  # noqa: E501
        :rtype: str
        """
        return self._tracking_status

    @tracking_status.setter
    def tracking_status(self, tracking_status):
        """Sets the tracking_status of this ShareAttributes.

        Checks recipient received status and returns whether it's been received (`complete`,) partial received (`incomplete`,) or not received yet (`pending`.)  # noqa: E501

        :param tracking_status: The tracking_status of this ShareAttributes.  # noqa: E501
        :type: str
        """
        allowed_values = ["complete", "incomplete", "pending"]  # noqa: E501
        if tracking_status not in allowed_values:
            raise ValueError(
                "Invalid value for `tracking_status` ({0}), must be one of {1}"  # noqa: E501
                .format(tracking_status, allowed_values)
            )

        self._tracking_status = tracking_status

    @property
    def form_id(self):
        """Gets the form_id of this ShareAttributes.  # noqa: E501

        ID of the form.  # noqa: E501

        :return: The form_id of this ShareAttributes.  # noqa: E501
        :rtype: int
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this ShareAttributes.

        ID of the form.  # noqa: E501

        :param form_id: The form_id of this ShareAttributes.  # noqa: E501
        :type: int
        """

        self._form_id = form_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ShareAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
