# -*- coding: utf-8 -*-
"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Jul 12, 2015

@author: jrm
"""
import textwrap
from inkcut.core.utils import load_icon
from enaml.layout.api import hbox, align, spacer
from enaml.qt.QtWidgets import QApplication
from enaml.widgets.api import Container, Form, Label, ObjectCombo, SpinBox, CheckBox, PushButton


enamldef SerialPortSettingsView(Container):
    attr model
    padding = 0

    func selected_port(port, ports):
        matches = [p for p in ports if p.device == port]
        return matches[0] if matches else None

    Form:
        Label:
            text = QApplication.translate("serialport", "Port")
        Container:
            padding = 0
            constraints = [
                hbox(cb, pb),
                align('v_center', cb, pb)
            ]
            ObjectCombo: cb:
                items << model.ports
                selected << selected_port(model.port, model.ports)
                selected ::
                    port = change['value']
                    if port:
                        model.port = port.device
                tool_tip = textwrap.dedent("""
                List of serial ports detected by the system. If nothing is here you
                must install the device driver for your machine.
                """).strip()
            PushButton: pb:
                text = QApplication.translate("serialport", "Refresh")
                icon = load_icon("arrow_refresh")
                clicked :: model.refresh()
        Label:
            text = QApplication.translate("serialport", "Baudrate")
        SpinBox:
            value := model.baudrate
            maximum = 999999999
            #step_size = 4800
            minimum = 1
        Label:
            text = QApplication.translate("serialport", "Bytesize")
        ObjectCombo:
            items = list(model.get_member('bytesize').items)
            selected := model.bytesize
        Label:
            text = QApplication.translate("serialport", "Parity")
        ObjectCombo:
            items = list(model.get_member('parity').items)
            selected := model.parity
        Label:
            text = QApplication.translate("serialport", "Stopbits")
        ObjectCombo:
            items = list(model.get_member('stopbits').items)
            selected := model.stopbits
        Label:
            text = QApplication.translate("serialport", "Flow control")
        Container:
            constraints = [
                hbox(rtscts, dsrdtr, xonxoff, spacer),
                align('v_center', rtscts, dsrdtr, xonxoff)
            ]
            CheckBox: rtscts:
                text = QApplication.translate("serialport", "RTS/CTS")
                checked := model.rtscts
                tool_tip = QApplication.translate("serialport", "Enable hardware (RTS/CTS) flow control")
            CheckBox: dsrdtr:
                text = QApplication.translate("serialport", "DSR/DTR")
                checked := model.dsrdtr
                tool_tip = QApplication.translate("serialport", "Enable hardware (DSR/DTR) flow control")
            CheckBox: xonxoff:
                text = QApplication.translate("serialport", "XON/XOFF")
                checked := model.xonxoff
                tool_tip = QApplication.translate("serialport", "Enable software flow control")
