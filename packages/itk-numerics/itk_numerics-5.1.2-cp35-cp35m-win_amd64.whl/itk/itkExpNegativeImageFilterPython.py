# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkExpNegativeImageFilterPython
else:
    import _itkExpNegativeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkExpNegativeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkExpNegativeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkExpNegativeImageFilterID2ID2_Superclass_New():
    return itkExpNegativeImageFilterID2ID2_Superclass.New()

class itkExpNegativeImageFilterID2ID2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ itkExpNegativeImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID2ID2_Superclass

        Create a new object of the class itkExpNegativeImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID2ID2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_swigregister(itkExpNegativeImageFilterID2ID2_Superclass)
itkExpNegativeImageFilterID2ID2_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass___New_orig__
itkExpNegativeImageFilterID2ID2_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Superclass_cast


def itkExpNegativeImageFilterID3ID3_Superclass_New():
    return itkExpNegativeImageFilterID3ID3_Superclass.New()

class itkExpNegativeImageFilterID3ID3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ itkExpNegativeImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID3ID3_Superclass

        Create a new object of the class itkExpNegativeImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID3ID3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_swigregister(itkExpNegativeImageFilterID3ID3_Superclass)
itkExpNegativeImageFilterID3ID3_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass___New_orig__
itkExpNegativeImageFilterID3ID3_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Superclass_cast


def itkExpNegativeImageFilterIF2IF2_Superclass_New():
    return itkExpNegativeImageFilterIF2IF2_Superclass.New()

class itkExpNegativeImageFilterIF2IF2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ itkExpNegativeImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF2IF2_Superclass

        Create a new object of the class itkExpNegativeImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF2IF2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_swigregister(itkExpNegativeImageFilterIF2IF2_Superclass)
itkExpNegativeImageFilterIF2IF2_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass___New_orig__
itkExpNegativeImageFilterIF2IF2_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Superclass_cast


def itkExpNegativeImageFilterIF3IF3_Superclass_New():
    return itkExpNegativeImageFilterIF3IF3_Superclass.New()

class itkExpNegativeImageFilterIF3IF3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ itkExpNegativeImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF3IF3_Superclass

        Create a new object of the class itkExpNegativeImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF3IF3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_swigregister(itkExpNegativeImageFilterIF3IF3_Superclass)
itkExpNegativeImageFilterIF3IF3_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass___New_orig__
itkExpNegativeImageFilterIF3IF3_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Superclass_cast


def itkExpNegativeImageFilterISS2ISS2_Superclass_New():
    return itkExpNegativeImageFilterISS2ISS2_Superclass.New()

class itkExpNegativeImageFilterISS2ISS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""Proxy of C++ itkExpNegativeImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS2ISS2_Superclass

        Create a new object of the class itkExpNegativeImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS2ISS2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_swigregister(itkExpNegativeImageFilterISS2ISS2_Superclass)
itkExpNegativeImageFilterISS2ISS2_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass___New_orig__
itkExpNegativeImageFilterISS2ISS2_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Superclass_cast


def itkExpNegativeImageFilterISS3ISS3_Superclass_New():
    return itkExpNegativeImageFilterISS3ISS3_Superclass.New()

class itkExpNegativeImageFilterISS3ISS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""Proxy of C++ itkExpNegativeImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS3ISS3_Superclass

        Create a new object of the class itkExpNegativeImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS3ISS3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_swigregister(itkExpNegativeImageFilterISS3ISS3_Superclass)
itkExpNegativeImageFilterISS3ISS3_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass___New_orig__
itkExpNegativeImageFilterISS3ISS3_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Superclass_cast


def itkExpNegativeImageFilterIUC2IUC2_Superclass_New():
    return itkExpNegativeImageFilterIUC2IUC2_Superclass.New()

class itkExpNegativeImageFilterIUC2IUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""Proxy of C++ itkExpNegativeImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC2IUC2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_swigregister(itkExpNegativeImageFilterIUC2IUC2_Superclass)
itkExpNegativeImageFilterIUC2IUC2_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass___New_orig__
itkExpNegativeImageFilterIUC2IUC2_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Superclass_cast


def itkExpNegativeImageFilterIUC3IUC3_Superclass_New():
    return itkExpNegativeImageFilterIUC3IUC3_Superclass.New()

class itkExpNegativeImageFilterIUC3IUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""Proxy of C++ itkExpNegativeImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC3IUC3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_swigregister(itkExpNegativeImageFilterIUC3IUC3_Superclass)
itkExpNegativeImageFilterIUC3IUC3_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass___New_orig__
itkExpNegativeImageFilterIUC3IUC3_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Superclass_cast


def itkExpNegativeImageFilterIUS2IUS2_Superclass_New():
    return itkExpNegativeImageFilterIUS2IUS2_Superclass.New()

class itkExpNegativeImageFilterIUS2IUS2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""Proxy of C++ itkExpNegativeImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS2IUS2_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_swigregister(itkExpNegativeImageFilterIUS2IUS2_Superclass)
itkExpNegativeImageFilterIUS2IUS2_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass___New_orig__
itkExpNegativeImageFilterIUS2IUS2_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Superclass_cast


def itkExpNegativeImageFilterIUS3IUS3_Superclass_New():
    return itkExpNegativeImageFilterIUS3IUS3_Superclass.New()

class itkExpNegativeImageFilterIUS3IUS3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""Proxy of C++ itkExpNegativeImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_SetFunctor)
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkExpNegativeImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS3IUS3_Superclass in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_swigregister(itkExpNegativeImageFilterIUS3IUS3_Superclass)
itkExpNegativeImageFilterIUS3IUS3_Superclass___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass___New_orig__
itkExpNegativeImageFilterIUS3IUS3_Superclass_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Superclass_cast


def itkExpNegativeImageFilterID2ID2_New():
    return itkExpNegativeImageFilterID2ID2.New()

class itkExpNegativeImageFilterID2ID2(itkExpNegativeImageFilterID2ID2_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID2ID2
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID2ID2

        Create a new object of the class itkExpNegativeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID2ID2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_swigregister(itkExpNegativeImageFilterID2ID2)
itkExpNegativeImageFilterID2ID2___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2___New_orig__
itkExpNegativeImageFilterID2ID2_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID2ID2_cast


def itkExpNegativeImageFilterID3ID3_New():
    return itkExpNegativeImageFilterID3ID3.New()

class itkExpNegativeImageFilterID3ID3(itkExpNegativeImageFilterID3ID3_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterID3ID3
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterID3ID3

        Create a new object of the class itkExpNegativeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterID3ID3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_swigregister(itkExpNegativeImageFilterID3ID3)
itkExpNegativeImageFilterID3ID3___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3___New_orig__
itkExpNegativeImageFilterID3ID3_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterID3ID3_cast


def itkExpNegativeImageFilterIF2IF2_New():
    return itkExpNegativeImageFilterIF2IF2.New()

class itkExpNegativeImageFilterIF2IF2(itkExpNegativeImageFilterIF2IF2_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF2IF2
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF2IF2

        Create a new object of the class itkExpNegativeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF2IF2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_swigregister(itkExpNegativeImageFilterIF2IF2)
itkExpNegativeImageFilterIF2IF2___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2___New_orig__
itkExpNegativeImageFilterIF2IF2_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF2IF2_cast


def itkExpNegativeImageFilterIF3IF3_New():
    return itkExpNegativeImageFilterIF3IF3.New()

class itkExpNegativeImageFilterIF3IF3(itkExpNegativeImageFilterIF3IF3_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIF3IF3
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIF3IF3

        Create a new object of the class itkExpNegativeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIF3IF3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_swigregister(itkExpNegativeImageFilterIF3IF3)
itkExpNegativeImageFilterIF3IF3___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3___New_orig__
itkExpNegativeImageFilterIF3IF3_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIF3IF3_cast


def itkExpNegativeImageFilterISS2ISS2_New():
    return itkExpNegativeImageFilterISS2ISS2.New()

class itkExpNegativeImageFilterISS2ISS2(itkExpNegativeImageFilterISS2ISS2_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS2ISS2

        Create a new object of the class itkExpNegativeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS2ISS2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_swigregister(itkExpNegativeImageFilterISS2ISS2)
itkExpNegativeImageFilterISS2ISS2___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2___New_orig__
itkExpNegativeImageFilterISS2ISS2_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS2ISS2_cast


def itkExpNegativeImageFilterISS3ISS3_New():
    return itkExpNegativeImageFilterISS3ISS3.New()

class itkExpNegativeImageFilterISS3ISS3(itkExpNegativeImageFilterISS3ISS3_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterISS3ISS3

        Create a new object of the class itkExpNegativeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterISS3ISS3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_swigregister(itkExpNegativeImageFilterISS3ISS3)
itkExpNegativeImageFilterISS3ISS3___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3___New_orig__
itkExpNegativeImageFilterISS3ISS3_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterISS3ISS3_cast


def itkExpNegativeImageFilterIUC2IUC2_New():
    return itkExpNegativeImageFilterIUC2IUC2.New()

class itkExpNegativeImageFilterIUC2IUC2(itkExpNegativeImageFilterIUC2IUC2_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC2IUC2

        Create a new object of the class itkExpNegativeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC2IUC2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_swigregister(itkExpNegativeImageFilterIUC2IUC2)
itkExpNegativeImageFilterIUC2IUC2___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2___New_orig__
itkExpNegativeImageFilterIUC2IUC2_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC2IUC2_cast


def itkExpNegativeImageFilterIUC3IUC3_New():
    return itkExpNegativeImageFilterIUC3IUC3.New()

class itkExpNegativeImageFilterIUC3IUC3(itkExpNegativeImageFilterIUC3IUC3_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUC3IUC3

        Create a new object of the class itkExpNegativeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUC3IUC3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_swigregister(itkExpNegativeImageFilterIUC3IUC3)
itkExpNegativeImageFilterIUC3IUC3___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3___New_orig__
itkExpNegativeImageFilterIUC3IUC3_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUC3IUC3_cast


def itkExpNegativeImageFilterIUS2IUS2_New():
    return itkExpNegativeImageFilterIUS2IUS2.New()

class itkExpNegativeImageFilterIUS2IUS2(itkExpNegativeImageFilterIUS2IUS2_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS2IUS2

        Create a new object of the class itkExpNegativeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS2IUS2 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_swigregister(itkExpNegativeImageFilterIUS2IUS2)
itkExpNegativeImageFilterIUS2IUS2___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2___New_orig__
itkExpNegativeImageFilterIUS2IUS2_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS2IUS2_cast


def itkExpNegativeImageFilterIUS3IUS3_New():
    return itkExpNegativeImageFilterIUS3IUS3.New()

class itkExpNegativeImageFilterIUS3IUS3(itkExpNegativeImageFilterIUS3IUS3_Superclass):
    r"""


    Computes the function exp(-K.x) for each input pixel.

    Every output pixel is equal to std::exp(-K.x ). where x is the
    intensity of the homologous input pixel, and K is a user-provided
    constant. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_Clone)
    SetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_SetFactor)
    GetFactor = _swig_new_instance_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_GetFactor)
    InputConvertibleToDoubleCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkExpNegativeImageFilterPython.delete_itkExpNegativeImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkExpNegativeImageFilterIUS3IUS3

        Create a new object of the class itkExpNegativeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkExpNegativeImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkExpNegativeImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkExpNegativeImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkExpNegativeImageFilterIUS3IUS3 in _itkExpNegativeImageFilterPython:
_itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_swigregister(itkExpNegativeImageFilterIUS3IUS3)
itkExpNegativeImageFilterIUS3IUS3___New_orig__ = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3___New_orig__
itkExpNegativeImageFilterIUS3IUS3_cast = _itkExpNegativeImageFilterPython.itkExpNegativeImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def exp_negative_image_filter(*args, **kwargs):
    """Procedural interface for ExpNegativeImageFilter"""
    import itk
    instance = itk.ExpNegativeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def exp_negative_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ExpNegativeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ExpNegativeImageFilter.values()[0]
    else:
        filter_object = itk.ExpNegativeImageFilter

    exp_negative_image_filter.__doc__ = filter_object.__doc__
    exp_negative_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    exp_negative_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ExpNegativeImageFilter, itkTemplate.itkTemplate):
        exp_negative_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        exp_negative_image_filter.__doc__ += "\n"
        exp_negative_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        exp_negative_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



