# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKSmoothingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMedianImageFilterPython
else:
    import _itkMedianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMedianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMedianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkBoxImageFilterPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkMedianImageFilterID2ID2_New():
    return itkMedianImageFilterID2ID2.New()

class itkMedianImageFilterID2ID2(itk.itkBoxImageFilterPython.itkBoxImageFilterID2ID2):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterID2ID2_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterID2ID2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterID2ID2_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterID2ID2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterID2ID2
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterID2ID2

        Create a new object of the class itkMedianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterID2ID2 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterID2ID2_swigregister(itkMedianImageFilterID2ID2)
itkMedianImageFilterID2ID2___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterID2ID2___New_orig__
itkMedianImageFilterID2ID2_cast = _itkMedianImageFilterPython.itkMedianImageFilterID2ID2_cast


def itkMedianImageFilterID3ID3_New():
    return itkMedianImageFilterID3ID3.New()

class itkMedianImageFilterID3ID3(itk.itkBoxImageFilterPython.itkBoxImageFilterID3ID3):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterID3ID3_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterID3ID3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterID3ID3_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterID3ID3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterID3ID3
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterID3ID3

        Create a new object of the class itkMedianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterID3ID3 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterID3ID3_swigregister(itkMedianImageFilterID3ID3)
itkMedianImageFilterID3ID3___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterID3ID3___New_orig__
itkMedianImageFilterID3ID3_cast = _itkMedianImageFilterPython.itkMedianImageFilterID3ID3_cast


def itkMedianImageFilterIF2IF2_New():
    return itkMedianImageFilterIF2IF2.New()

class itkMedianImageFilterIF2IF2(itk.itkBoxImageFilterPython.itkBoxImageFilterIF2IF2):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterIF2IF2_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterIF2IF2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterIF2IF2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterIF2IF2
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterIF2IF2

        Create a new object of the class itkMedianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterIF2IF2 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterIF2IF2_swigregister(itkMedianImageFilterIF2IF2)
itkMedianImageFilterIF2IF2___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterIF2IF2___New_orig__
itkMedianImageFilterIF2IF2_cast = _itkMedianImageFilterPython.itkMedianImageFilterIF2IF2_cast


def itkMedianImageFilterIF3IF3_New():
    return itkMedianImageFilterIF3IF3.New()

class itkMedianImageFilterIF3IF3(itk.itkBoxImageFilterPython.itkBoxImageFilterIF3IF3):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterIF3IF3_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterIF3IF3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterIF3IF3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterIF3IF3
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterIF3IF3

        Create a new object of the class itkMedianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterIF3IF3 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterIF3IF3_swigregister(itkMedianImageFilterIF3IF3)
itkMedianImageFilterIF3IF3___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterIF3IF3___New_orig__
itkMedianImageFilterIF3IF3_cast = _itkMedianImageFilterPython.itkMedianImageFilterIF3IF3_cast


def itkMedianImageFilterISS2ISS2_New():
    return itkMedianImageFilterISS2ISS2.New()

class itkMedianImageFilterISS2ISS2(itk.itkBoxImageFilterPython.itkBoxImageFilterISS2ISS2):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterISS2ISS2

        Create a new object of the class itkMedianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterISS2ISS2 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2_swigregister(itkMedianImageFilterISS2ISS2)
itkMedianImageFilterISS2ISS2___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2___New_orig__
itkMedianImageFilterISS2ISS2_cast = _itkMedianImageFilterPython.itkMedianImageFilterISS2ISS2_cast


def itkMedianImageFilterISS3ISS3_New():
    return itkMedianImageFilterISS3ISS3.New()

class itkMedianImageFilterISS3ISS3(itk.itkBoxImageFilterPython.itkBoxImageFilterISS3ISS3):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterISS3ISS3

        Create a new object of the class itkMedianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterISS3ISS3 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3_swigregister(itkMedianImageFilterISS3ISS3)
itkMedianImageFilterISS3ISS3___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3___New_orig__
itkMedianImageFilterISS3ISS3_cast = _itkMedianImageFilterPython.itkMedianImageFilterISS3ISS3_cast


def itkMedianImageFilterIUC2IUC2_New():
    return itkMedianImageFilterIUC2IUC2.New()

class itkMedianImageFilterIUC2IUC2(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC2IUC2):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterIUC2IUC2

        Create a new object of the class itkMedianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterIUC2IUC2 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2_swigregister(itkMedianImageFilterIUC2IUC2)
itkMedianImageFilterIUC2IUC2___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2___New_orig__
itkMedianImageFilterIUC2IUC2_cast = _itkMedianImageFilterPython.itkMedianImageFilterIUC2IUC2_cast


def itkMedianImageFilterIUC3IUC3_New():
    return itkMedianImageFilterIUC3IUC3.New()

class itkMedianImageFilterIUC3IUC3(itk.itkBoxImageFilterPython.itkBoxImageFilterIUC3IUC3):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterIUC3IUC3

        Create a new object of the class itkMedianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterIUC3IUC3 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3_swigregister(itkMedianImageFilterIUC3IUC3)
itkMedianImageFilterIUC3IUC3___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3___New_orig__
itkMedianImageFilterIUC3IUC3_cast = _itkMedianImageFilterPython.itkMedianImageFilterIUC3IUC3_cast


def itkMedianImageFilterIUS2IUS2_New():
    return itkMedianImageFilterIUS2IUS2.New()

class itkMedianImageFilterIUS2IUS2(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS2IUS2):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterIUS2IUS2

        Create a new object of the class itkMedianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterIUS2IUS2 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2_swigregister(itkMedianImageFilterIUS2IUS2)
itkMedianImageFilterIUS2IUS2___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2___New_orig__
itkMedianImageFilterIUS2IUS2_cast = _itkMedianImageFilterPython.itkMedianImageFilterIUS2IUS2_cast


def itkMedianImageFilterIUS3IUS3_New():
    return itkMedianImageFilterIUS3IUS3.New()

class itkMedianImageFilterIUS3IUS3(itk.itkBoxImageFilterPython.itkBoxImageFilterIUS3IUS3):
    r"""


    Applies a median filter to an image.

    Computes an image where a given pixel is the median value of the the
    pixels in a neighborhood about the corresponding input pixel.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    This filter requires that the input pixel type provides an operator<()
    (LessThan Comparable).

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator
    {Filtering/Smoothing/ApplyMedianFilter,Median Filter Of An Image}
    {Filtering/Smoothing/MedianFilteringOfAnRGBImage,Median Filter Of An
    RGB Image} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3_Clone)
    SameDimensionCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3_SameDimensionCheck
    
    InputConvertibleToOutputCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    InputLessThanComparableCheck = _itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3_InputLessThanComparableCheck
    
    __swig_destroy__ = _itkMedianImageFilterPython.delete_itkMedianImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMedianImageFilterIUS3IUS3

        Create a new object of the class itkMedianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMedianImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMedianImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMedianImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMedianImageFilterIUS3IUS3 in _itkMedianImageFilterPython:
_itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3_swigregister(itkMedianImageFilterIUS3IUS3)
itkMedianImageFilterIUS3IUS3___New_orig__ = _itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3___New_orig__
itkMedianImageFilterIUS3IUS3_cast = _itkMedianImageFilterPython.itkMedianImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def median_image_filter(*args, **kwargs):
    """Procedural interface for MedianImageFilter"""
    import itk
    instance = itk.MedianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def median_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MedianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.MedianImageFilter.values()[0]
    else:
        filter_object = itk.MedianImageFilter

    median_image_filter.__doc__ = filter_object.__doc__
    median_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    median_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.MedianImageFilter, itkTemplate.itkTemplate):
        median_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        median_image_filter.__doc__ += "\n"
        median_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        median_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



