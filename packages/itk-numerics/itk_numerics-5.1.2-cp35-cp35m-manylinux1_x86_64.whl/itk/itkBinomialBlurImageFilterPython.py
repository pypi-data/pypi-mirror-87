# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKSmoothingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinomialBlurImageFilterPython
else:
    import _itkBinomialBlurImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinomialBlurImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinomialBlurImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkBinomialBlurImageFilterID2ID2_New():
    return itkBinomialBlurImageFilterID2ID2.New()

class itkBinomialBlurImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterID2ID2
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterID2ID2

        Create a new object of the class itkBinomialBlurImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterID2ID2 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_swigregister(itkBinomialBlurImageFilterID2ID2)
itkBinomialBlurImageFilterID2ID2___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2___New_orig__
itkBinomialBlurImageFilterID2ID2_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID2ID2_cast


def itkBinomialBlurImageFilterID3ID3_New():
    return itkBinomialBlurImageFilterID3ID3.New()

class itkBinomialBlurImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterID3ID3
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterID3ID3

        Create a new object of the class itkBinomialBlurImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterID3ID3 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_swigregister(itkBinomialBlurImageFilterID3ID3)
itkBinomialBlurImageFilterID3ID3___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3___New_orig__
itkBinomialBlurImageFilterID3ID3_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterID3ID3_cast


def itkBinomialBlurImageFilterIF2IF2_New():
    return itkBinomialBlurImageFilterIF2IF2.New()

class itkBinomialBlurImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterIF2IF2
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterIF2IF2

        Create a new object of the class itkBinomialBlurImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterIF2IF2 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_swigregister(itkBinomialBlurImageFilterIF2IF2)
itkBinomialBlurImageFilterIF2IF2___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2___New_orig__
itkBinomialBlurImageFilterIF2IF2_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF2IF2_cast


def itkBinomialBlurImageFilterIF3IF3_New():
    return itkBinomialBlurImageFilterIF3IF3.New()

class itkBinomialBlurImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterIF3IF3
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterIF3IF3

        Create a new object of the class itkBinomialBlurImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterIF3IF3 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_swigregister(itkBinomialBlurImageFilterIF3IF3)
itkBinomialBlurImageFilterIF3IF3___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3___New_orig__
itkBinomialBlurImageFilterIF3IF3_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIF3IF3_cast


def itkBinomialBlurImageFilterISS2ISS2_New():
    return itkBinomialBlurImageFilterISS2ISS2.New()

class itkBinomialBlurImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterISS2ISS2

        Create a new object of the class itkBinomialBlurImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterISS2ISS2 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_swigregister(itkBinomialBlurImageFilterISS2ISS2)
itkBinomialBlurImageFilterISS2ISS2___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2___New_orig__
itkBinomialBlurImageFilterISS2ISS2_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS2ISS2_cast


def itkBinomialBlurImageFilterISS3ISS3_New():
    return itkBinomialBlurImageFilterISS3ISS3.New()

class itkBinomialBlurImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterISS3ISS3

        Create a new object of the class itkBinomialBlurImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterISS3ISS3 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_swigregister(itkBinomialBlurImageFilterISS3ISS3)
itkBinomialBlurImageFilterISS3ISS3___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3___New_orig__
itkBinomialBlurImageFilterISS3ISS3_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterISS3ISS3_cast


def itkBinomialBlurImageFilterIUC2IUC2_New():
    return itkBinomialBlurImageFilterIUC2IUC2.New()

class itkBinomialBlurImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterIUC2IUC2

        Create a new object of the class itkBinomialBlurImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterIUC2IUC2 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_swigregister(itkBinomialBlurImageFilterIUC2IUC2)
itkBinomialBlurImageFilterIUC2IUC2___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2___New_orig__
itkBinomialBlurImageFilterIUC2IUC2_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC2IUC2_cast


def itkBinomialBlurImageFilterIUC3IUC3_New():
    return itkBinomialBlurImageFilterIUC3IUC3.New()

class itkBinomialBlurImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterIUC3IUC3

        Create a new object of the class itkBinomialBlurImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterIUC3IUC3 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_swigregister(itkBinomialBlurImageFilterIUC3IUC3)
itkBinomialBlurImageFilterIUC3IUC3___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3___New_orig__
itkBinomialBlurImageFilterIUC3IUC3_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUC3IUC3_cast


def itkBinomialBlurImageFilterIUS2IUS2_New():
    return itkBinomialBlurImageFilterIUS2IUS2.New()

class itkBinomialBlurImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterIUS2IUS2

        Create a new object of the class itkBinomialBlurImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterIUS2IUS2 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_swigregister(itkBinomialBlurImageFilterIUS2IUS2)
itkBinomialBlurImageFilterIUS2IUS2___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2___New_orig__
itkBinomialBlurImageFilterIUS2IUS2_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS2IUS2_cast


def itkBinomialBlurImageFilterIUS3IUS3_New():
    return itkBinomialBlurImageFilterIUS3IUS3.New()

class itkBinomialBlurImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Performs a separable blur on each dimension of an image.

    The binomial blur consists of a nearest neighbor average along each
    image dimension. The net result after n-iterations approaches
    convolution with a gaussian. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_Clone)
    SetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_SetRepetitions)
    GetRepetitions = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_GetRepetitions)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    SameDimensionCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_SameDimensionCheck
    
    InputConvertibleToDoubleCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBinomialBlurImageFilterPython.delete_itkBinomialBlurImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinomialBlurImageFilterIUS3IUS3

        Create a new object of the class itkBinomialBlurImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinomialBlurImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinomialBlurImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinomialBlurImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinomialBlurImageFilterIUS3IUS3 in _itkBinomialBlurImageFilterPython:
_itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_swigregister(itkBinomialBlurImageFilterIUS3IUS3)
itkBinomialBlurImageFilterIUS3IUS3___New_orig__ = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3___New_orig__
itkBinomialBlurImageFilterIUS3IUS3_cast = _itkBinomialBlurImageFilterPython.itkBinomialBlurImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binomial_blur_image_filter(*args, **kwargs):
    """Procedural interface for BinomialBlurImageFilter"""
    import itk
    instance = itk.BinomialBlurImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def binomial_blur_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinomialBlurImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinomialBlurImageFilter.values()[0]
    else:
        filter_object = itk.BinomialBlurImageFilter

    binomial_blur_image_filter.__doc__ = filter_object.__doc__
    binomial_blur_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    binomial_blur_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinomialBlurImageFilter, itkTemplate.itkTemplate):
        binomial_blur_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        binomial_blur_image_filter.__doc__ += "\n"
        binomial_blur_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        binomial_blur_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



