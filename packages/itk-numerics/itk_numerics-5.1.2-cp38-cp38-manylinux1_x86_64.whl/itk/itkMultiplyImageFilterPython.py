# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMultiplyImageFilterPython
else:
    import _itkMultiplyImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMultiplyImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMultiplyImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkMultiplyImageFilterICF2ICF2ICF2_New():
    return itkMultiplyImageFilterICF2ICF2ICF2.New()

class itkMultiplyImageFilterICF2ICF2ICF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2ICF2ICF2):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF2ICF2ICF2
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF2ICF2ICF2

        Create a new object of the class itkMultiplyImageFilterICF2ICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF2ICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF2ICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF2ICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF2ICF2ICF2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_swigregister(itkMultiplyImageFilterICF2ICF2ICF2)
itkMultiplyImageFilterICF2ICF2ICF2___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2___New_orig__
itkMultiplyImageFilterICF2ICF2ICF2_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2ICF2ICF2_cast


def itkMultiplyImageFilterICF2IF2ICF2_New():
    return itkMultiplyImageFilterICF2IF2ICF2.New()

class itkMultiplyImageFilterICF2IF2ICF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF2IF2ICF2):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF2IF2ICF2
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF2IF2ICF2

        Create a new object of the class itkMultiplyImageFilterICF2IF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF2IF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF2IF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF2IF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF2IF2ICF2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_swigregister(itkMultiplyImageFilterICF2IF2ICF2)
itkMultiplyImageFilterICF2IF2ICF2___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2___New_orig__
itkMultiplyImageFilterICF2IF2ICF2_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF2IF2ICF2_cast


def itkMultiplyImageFilterICF3ICF3ICF3_New():
    return itkMultiplyImageFilterICF3ICF3ICF3.New()

class itkMultiplyImageFilterICF3ICF3ICF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3ICF3ICF3):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF3ICF3ICF3
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF3ICF3ICF3

        Create a new object of the class itkMultiplyImageFilterICF3ICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF3ICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF3ICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF3ICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF3ICF3ICF3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_swigregister(itkMultiplyImageFilterICF3ICF3ICF3)
itkMultiplyImageFilterICF3ICF3ICF3___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3___New_orig__
itkMultiplyImageFilterICF3ICF3ICF3_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3ICF3ICF3_cast


def itkMultiplyImageFilterICF3IF3ICF3_New():
    return itkMultiplyImageFilterICF3IF3ICF3.New()

class itkMultiplyImageFilterICF3IF3ICF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterICF3IF3ICF3):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterICF3IF3ICF3
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterICF3IF3ICF3

        Create a new object of the class itkMultiplyImageFilterICF3IF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterICF3IF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterICF3IF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterICF3IF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterICF3IF3ICF3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_swigregister(itkMultiplyImageFilterICF3IF3ICF3)
itkMultiplyImageFilterICF3IF3ICF3___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3___New_orig__
itkMultiplyImageFilterICF3IF3ICF3_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterICF3IF3ICF3_cast


def itkMultiplyImageFilterID2ID2ID2_New():
    return itkMultiplyImageFilterID2ID2ID2.New()

class itkMultiplyImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterID2ID2ID2
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterID2ID2ID2

        Create a new object of the class itkMultiplyImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterID2ID2ID2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_swigregister(itkMultiplyImageFilterID2ID2ID2)
itkMultiplyImageFilterID2ID2ID2___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2___New_orig__
itkMultiplyImageFilterID2ID2ID2_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID2ID2ID2_cast


def itkMultiplyImageFilterID3ID3ID3_New():
    return itkMultiplyImageFilterID3ID3ID3.New()

class itkMultiplyImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterID3ID3ID3
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterID3ID3ID3

        Create a new object of the class itkMultiplyImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterID3ID3ID3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_swigregister(itkMultiplyImageFilterID3ID3ID3)
itkMultiplyImageFilterID3ID3ID3___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3___New_orig__
itkMultiplyImageFilterID3ID3ID3_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterID3ID3ID3_cast


def itkMultiplyImageFilterIF2IF2IF2_New():
    return itkMultiplyImageFilterIF2IF2IF2.New()

class itkMultiplyImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIF2IF2IF2
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIF2IF2IF2

        Create a new object of the class itkMultiplyImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIF2IF2IF2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_swigregister(itkMultiplyImageFilterIF2IF2IF2)
itkMultiplyImageFilterIF2IF2IF2___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2___New_orig__
itkMultiplyImageFilterIF2IF2IF2_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF2IF2IF2_cast


def itkMultiplyImageFilterIF3IF3IF3_New():
    return itkMultiplyImageFilterIF3IF3IF3.New()

class itkMultiplyImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIF3IF3IF3
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIF3IF3IF3

        Create a new object of the class itkMultiplyImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIF3IF3IF3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_swigregister(itkMultiplyImageFilterIF3IF3IF3)
itkMultiplyImageFilterIF3IF3IF3___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3___New_orig__
itkMultiplyImageFilterIF3IF3IF3_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIF3IF3IF3_cast


def itkMultiplyImageFilterISS2ISS2ISS2_New():
    return itkMultiplyImageFilterISS2ISS2ISS2.New()

class itkMultiplyImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterISS2ISS2ISS2
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterISS2ISS2ISS2

        Create a new object of the class itkMultiplyImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterISS2ISS2ISS2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_swigregister(itkMultiplyImageFilterISS2ISS2ISS2)
itkMultiplyImageFilterISS2ISS2ISS2___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2___New_orig__
itkMultiplyImageFilterISS2ISS2ISS2_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS2ISS2ISS2_cast


def itkMultiplyImageFilterISS3ISS3ISS3_New():
    return itkMultiplyImageFilterISS3ISS3ISS3.New()

class itkMultiplyImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterISS3ISS3ISS3
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterISS3ISS3ISS3

        Create a new object of the class itkMultiplyImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterISS3ISS3ISS3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_swigregister(itkMultiplyImageFilterISS3ISS3ISS3)
itkMultiplyImageFilterISS3ISS3ISS3___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3___New_orig__
itkMultiplyImageFilterISS3ISS3ISS3_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterISS3ISS3ISS3_cast


def itkMultiplyImageFilterIUC2IUC2IUC2_New():
    return itkMultiplyImageFilterIUC2IUC2IUC2.New()

class itkMultiplyImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUC2IUC2IUC2

        Create a new object of the class itkMultiplyImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUC2IUC2IUC2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_swigregister(itkMultiplyImageFilterIUC2IUC2IUC2)
itkMultiplyImageFilterIUC2IUC2IUC2___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2___New_orig__
itkMultiplyImageFilterIUC2IUC2IUC2_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC2IUC2IUC2_cast


def itkMultiplyImageFilterIUC3IUC3IUC3_New():
    return itkMultiplyImageFilterIUC3IUC3IUC3.New()

class itkMultiplyImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUC3IUC3IUC3

        Create a new object of the class itkMultiplyImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUC3IUC3IUC3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_swigregister(itkMultiplyImageFilterIUC3IUC3IUC3)
itkMultiplyImageFilterIUC3IUC3IUC3___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3___New_orig__
itkMultiplyImageFilterIUC3IUC3IUC3_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUC3IUC3IUC3_cast


def itkMultiplyImageFilterIUS2IUS2IUS2_New():
    return itkMultiplyImageFilterIUS2IUS2IUS2.New()

class itkMultiplyImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUS2IUS2IUS2
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUS2IUS2IUS2

        Create a new object of the class itkMultiplyImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUS2IUS2IUS2 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_swigregister(itkMultiplyImageFilterIUS2IUS2IUS2)
itkMultiplyImageFilterIUS2IUS2IUS2___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2___New_orig__
itkMultiplyImageFilterIUS2IUS2IUS2_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS2IUS2IUS2_cast


def itkMultiplyImageFilterIUS3IUS3IUS3_New():
    return itkMultiplyImageFilterIUS3IUS3IUS3.New()

class itkMultiplyImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""


    Pixel-wise multiplication of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_Clone)
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_Input1Input2OutputMultiplyOperatorCheck
    
    __swig_destroy__ = _itkMultiplyImageFilterPython.delete_itkMultiplyImageFilterIUS3IUS3IUS3
    cast = _swig_new_static_method(_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiplyImageFilterIUS3IUS3IUS3

        Create a new object of the class itkMultiplyImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiplyImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiplyImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiplyImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiplyImageFilterIUS3IUS3IUS3 in _itkMultiplyImageFilterPython:
_itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_swigregister(itkMultiplyImageFilterIUS3IUS3IUS3)
itkMultiplyImageFilterIUS3IUS3IUS3___New_orig__ = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3___New_orig__
itkMultiplyImageFilterIUS3IUS3IUS3_cast = _itkMultiplyImageFilterPython.itkMultiplyImageFilterIUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def multiply_image_filter(*args, **kwargs):
    """Procedural interface for MultiplyImageFilter"""
    import itk
    instance = itk.MultiplyImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def multiply_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.MultiplyImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.MultiplyImageFilter.values()[0]
    else:
        filter_object = itk.MultiplyImageFilter

    multiply_image_filter.__doc__ = filter_object.__doc__
    multiply_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    multiply_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.MultiplyImageFilter, itkTemplate.itkTemplate):
        multiply_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        multiply_image_filter.__doc__ += "\n"
        multiply_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        multiply_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



