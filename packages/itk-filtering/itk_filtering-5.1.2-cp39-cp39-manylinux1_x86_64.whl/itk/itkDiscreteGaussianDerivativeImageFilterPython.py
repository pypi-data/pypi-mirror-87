# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDiscreteGaussianDerivativeImageFilterPython
else:
    import _itkDiscreteGaussianDerivativeImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDiscreteGaussianDerivativeImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDiscreteGaussianDerivativeImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkFixedArrayPython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkDiscreteGaussianDerivativeImageFilterID2ID2_New():
    return itkDiscreteGaussianDerivativeImageFilterID2ID2.New()

class itkDiscreteGaussianDerivativeImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterID2ID2
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterID2ID2

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterID2ID2 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_swigregister(itkDiscreteGaussianDerivativeImageFilterID2ID2)
itkDiscreteGaussianDerivativeImageFilterID2ID2___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2___New_orig__
itkDiscreteGaussianDerivativeImageFilterID2ID2_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID2ID2_cast


def itkDiscreteGaussianDerivativeImageFilterID3ID3_New():
    return itkDiscreteGaussianDerivativeImageFilterID3ID3.New()

class itkDiscreteGaussianDerivativeImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterID3ID3
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterID3ID3

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterID3ID3 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_swigregister(itkDiscreteGaussianDerivativeImageFilterID3ID3)
itkDiscreteGaussianDerivativeImageFilterID3ID3___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3___New_orig__
itkDiscreteGaussianDerivativeImageFilterID3ID3_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterID3ID3_cast


def itkDiscreteGaussianDerivativeImageFilterIF2IF2_New():
    return itkDiscreteGaussianDerivativeImageFilterIF2IF2.New()

class itkDiscreteGaussianDerivativeImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterIF2IF2
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterIF2IF2

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterIF2IF2 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_swigregister(itkDiscreteGaussianDerivativeImageFilterIF2IF2)
itkDiscreteGaussianDerivativeImageFilterIF2IF2___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2___New_orig__
itkDiscreteGaussianDerivativeImageFilterIF2IF2_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF2IF2_cast


def itkDiscreteGaussianDerivativeImageFilterIF3IF3_New():
    return itkDiscreteGaussianDerivativeImageFilterIF3IF3.New()

class itkDiscreteGaussianDerivativeImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterIF3IF3
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterIF3IF3

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterIF3IF3 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_swigregister(itkDiscreteGaussianDerivativeImageFilterIF3IF3)
itkDiscreteGaussianDerivativeImageFilterIF3IF3___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3___New_orig__
itkDiscreteGaussianDerivativeImageFilterIF3IF3_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIF3IF3_cast


def itkDiscreteGaussianDerivativeImageFilterISS2ISS2_New():
    return itkDiscreteGaussianDerivativeImageFilterISS2ISS2.New()

class itkDiscreteGaussianDerivativeImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterISS2ISS2

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterISS2ISS2 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_swigregister(itkDiscreteGaussianDerivativeImageFilterISS2ISS2)
itkDiscreteGaussianDerivativeImageFilterISS2ISS2___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2___New_orig__
itkDiscreteGaussianDerivativeImageFilterISS2ISS2_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS2ISS2_cast


def itkDiscreteGaussianDerivativeImageFilterISS3ISS3_New():
    return itkDiscreteGaussianDerivativeImageFilterISS3ISS3.New()

class itkDiscreteGaussianDerivativeImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterISS3ISS3

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterISS3ISS3 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_swigregister(itkDiscreteGaussianDerivativeImageFilterISS3ISS3)
itkDiscreteGaussianDerivativeImageFilterISS3ISS3___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3___New_orig__
itkDiscreteGaussianDerivativeImageFilterISS3ISS3_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterISS3ISS3_cast


def itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_New():
    return itkDiscreteGaussianDerivativeImageFilterIUC2IUC2.New()

class itkDiscreteGaussianDerivativeImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterIUC2IUC2

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterIUC2IUC2 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_swigregister(itkDiscreteGaussianDerivativeImageFilterIUC2IUC2)
itkDiscreteGaussianDerivativeImageFilterIUC2IUC2___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2___New_orig__
itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC2IUC2_cast


def itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_New():
    return itkDiscreteGaussianDerivativeImageFilterIUC3IUC3.New()

class itkDiscreteGaussianDerivativeImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterIUC3IUC3

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterIUC3IUC3 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_swigregister(itkDiscreteGaussianDerivativeImageFilterIUC3IUC3)
itkDiscreteGaussianDerivativeImageFilterIUC3IUC3___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3___New_orig__
itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUC3IUC3_cast


def itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_New():
    return itkDiscreteGaussianDerivativeImageFilterIUS2IUS2.New()

class itkDiscreteGaussianDerivativeImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterIUS2IUS2

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterIUS2IUS2 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_swigregister(itkDiscreteGaussianDerivativeImageFilterIUS2IUS2)
itkDiscreteGaussianDerivativeImageFilterIUS2IUS2___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2___New_orig__
itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS2IUS2_cast


def itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_New():
    return itkDiscreteGaussianDerivativeImageFilterIUS3IUS3.New()

class itkDiscreteGaussianDerivativeImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Calculates image derivatives using discrete derivative gaussian
    kernels. This filter calculates Gaussian derivative by separable
    convolution of an image and a discrete Gaussian derivative operator
    (kernel).

    The Gaussian operators used here were described by Tony Lindeberg
    (Discrete Scale-Space Theory and the Scale-Space Primal Sketch.
    Dissertation. Royal Institute of Technology, Stockholm, Sweden. May
    1991.)

    The variance or standard deviation (sigma) will be evaluated as pixel
    units if SetUseImageSpacing is off (false) or as physical units if
    SetUseImageSpacing is on (true, default). The variance can be set
    independently in each dimension.

    When the Gaussian kernel is small, this filter tends to run faster
    than itk::RecursiveGaussianImageFilter.

    Ivan Macia, VICOMTech, Spain,http://www.vicomtech.es  This
    implementation was taken from the Insight Journal
    paper:https://hdl.handle.net/1926/1290

    See:  GaussianDerivativeOperator

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_Clone)
    GetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_GetOrder)
    GetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_GetMaximumError)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_GetMaximumKernelWidth)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_SetMaximumKernelWidth)
    SetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_SetInternalNumberOfStreamDivisions)
    GetInternalNumberOfStreamDivisions = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_GetInternalNumberOfStreamDivisions)
    SetOrder = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_SetOrder)
    SetVariance = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_SetMaximumError)
    SetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_GetUseImageSpacing)
    UseImageSpacingOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_UseImageSpacingOn)
    UseImageSpacingOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_UseImageSpacingOff)
    SetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_SetNormalizeAcrossScale)
    GetNormalizeAcrossScale = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_GetNormalizeAcrossScale)
    NormalizeAcrossScaleOn = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_NormalizeAcrossScaleOn)
    NormalizeAcrossScaleOff = _swig_new_instance_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_NormalizeAcrossScaleOff)
    OutputHasNumericTraitsCheck = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkDiscreteGaussianDerivativeImageFilterPython.delete_itkDiscreteGaussianDerivativeImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkDiscreteGaussianDerivativeImageFilterIUS3IUS3

        Create a new object of the class itkDiscreteGaussianDerivativeImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiscreteGaussianDerivativeImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiscreteGaussianDerivativeImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiscreteGaussianDerivativeImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiscreteGaussianDerivativeImageFilterIUS3IUS3 in _itkDiscreteGaussianDerivativeImageFilterPython:
_itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_swigregister(itkDiscreteGaussianDerivativeImageFilterIUS3IUS3)
itkDiscreteGaussianDerivativeImageFilterIUS3IUS3___New_orig__ = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3___New_orig__
itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_cast = _itkDiscreteGaussianDerivativeImageFilterPython.itkDiscreteGaussianDerivativeImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def discrete_gaussian_derivative_image_filter(*args, **kwargs):
    """Procedural interface for DiscreteGaussianDerivativeImageFilter"""
    import itk
    instance = itk.DiscreteGaussianDerivativeImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def discrete_gaussian_derivative_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.DiscreteGaussianDerivativeImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.DiscreteGaussianDerivativeImageFilter.values()[0]
    else:
        filter_object = itk.DiscreteGaussianDerivativeImageFilter

    discrete_gaussian_derivative_image_filter.__doc__ = filter_object.__doc__
    discrete_gaussian_derivative_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    discrete_gaussian_derivative_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.DiscreteGaussianDerivativeImageFilter, itkTemplate.itkTemplate):
        discrete_gaussian_derivative_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        discrete_gaussian_derivative_image_filter.__doc__ += "\n"
        discrete_gaussian_derivative_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        discrete_gaussian_derivative_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



