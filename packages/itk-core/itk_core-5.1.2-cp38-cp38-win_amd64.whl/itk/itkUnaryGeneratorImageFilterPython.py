# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFilterBasePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkUnaryGeneratorImageFilterPython
else:
    import _itkUnaryGeneratorImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkUnaryGeneratorImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkUnaryGeneratorImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkInPlaceImageFilterAPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterBPython

def itkUnaryGeneratorImageFilterICF2ICF2_New():
    return itkUnaryGeneratorImageFilterICF2ICF2.New()

class itkUnaryGeneratorImageFilterICF2ICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ICF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF2ICF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF2ICF2

        Create a new object of the class itkUnaryGeneratorImageFilterICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF2ICF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ICF2_swigregister(itkUnaryGeneratorImageFilterICF2ICF2)
itkUnaryGeneratorImageFilterICF2ICF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ICF2___New_orig__
itkUnaryGeneratorImageFilterICF2ICF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ICF2_cast


def itkUnaryGeneratorImageFilterICF2ID2_New():
    return itkUnaryGeneratorImageFilterICF2ID2.New()

class itkUnaryGeneratorImageFilterICF2ID2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ID2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ID2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF2ID2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF2ID2

        Create a new object of the class itkUnaryGeneratorImageFilterICF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF2ID2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ID2_swigregister(itkUnaryGeneratorImageFilterICF2ID2)
itkUnaryGeneratorImageFilterICF2ID2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ID2___New_orig__
itkUnaryGeneratorImageFilterICF2ID2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ID2_cast


def itkUnaryGeneratorImageFilterICF2IF2_New():
    return itkUnaryGeneratorImageFilterICF2IF2.New()

class itkUnaryGeneratorImageFilterICF2IF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF2IF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF2IF2

        Create a new object of the class itkUnaryGeneratorImageFilterICF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF2IF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2_swigregister(itkUnaryGeneratorImageFilterICF2IF2)
itkUnaryGeneratorImageFilterICF2IF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2___New_orig__
itkUnaryGeneratorImageFilterICF2IF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IF2_cast


def itkUnaryGeneratorImageFilterICF2ISS2_New():
    return itkUnaryGeneratorImageFilterICF2ISS2.New()

class itkUnaryGeneratorImageFilterICF2ISS2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ISS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ISS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF2ISS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF2ISS2

        Create a new object of the class itkUnaryGeneratorImageFilterICF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF2ISS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ISS2_swigregister(itkUnaryGeneratorImageFilterICF2ISS2)
itkUnaryGeneratorImageFilterICF2ISS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ISS2___New_orig__
itkUnaryGeneratorImageFilterICF2ISS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2ISS2_cast


def itkUnaryGeneratorImageFilterICF2IUC2_New():
    return itkUnaryGeneratorImageFilterICF2IUC2.New()

class itkUnaryGeneratorImageFilterICF2IUC2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUC2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUC2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF2IUC2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF2IUC2

        Create a new object of the class itkUnaryGeneratorImageFilterICF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF2IUC2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUC2_swigregister(itkUnaryGeneratorImageFilterICF2IUC2)
itkUnaryGeneratorImageFilterICF2IUC2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUC2___New_orig__
itkUnaryGeneratorImageFilterICF2IUC2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUC2_cast


def itkUnaryGeneratorImageFilterICF2IUS2_New():
    return itkUnaryGeneratorImageFilterICF2IUS2.New()

class itkUnaryGeneratorImageFilterICF2IUS2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2IUS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF2IUS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF2IUS2

        Create a new object of the class itkUnaryGeneratorImageFilterICF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF2IUS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUS2_swigregister(itkUnaryGeneratorImageFilterICF2IUS2)
itkUnaryGeneratorImageFilterICF2IUS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUS2___New_orig__
itkUnaryGeneratorImageFilterICF2IUS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF2IUS2_cast


def itkUnaryGeneratorImageFilterICF3ICF3_New():
    return itkUnaryGeneratorImageFilterICF3ICF3.New()

class itkUnaryGeneratorImageFilterICF3ICF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ICF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF3ICF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF3ICF3

        Create a new object of the class itkUnaryGeneratorImageFilterICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF3ICF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ICF3_swigregister(itkUnaryGeneratorImageFilterICF3ICF3)
itkUnaryGeneratorImageFilterICF3ICF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ICF3___New_orig__
itkUnaryGeneratorImageFilterICF3ICF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ICF3_cast


def itkUnaryGeneratorImageFilterICF3ID3_New():
    return itkUnaryGeneratorImageFilterICF3ID3.New()

class itkUnaryGeneratorImageFilterICF3ID3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ID3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ID3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF3ID3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF3ID3

        Create a new object of the class itkUnaryGeneratorImageFilterICF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF3ID3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ID3_swigregister(itkUnaryGeneratorImageFilterICF3ID3)
itkUnaryGeneratorImageFilterICF3ID3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ID3___New_orig__
itkUnaryGeneratorImageFilterICF3ID3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ID3_cast


def itkUnaryGeneratorImageFilterICF3IF3_New():
    return itkUnaryGeneratorImageFilterICF3IF3.New()

class itkUnaryGeneratorImageFilterICF3IF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF3IF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF3IF3

        Create a new object of the class itkUnaryGeneratorImageFilterICF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF3IF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3_swigregister(itkUnaryGeneratorImageFilterICF3IF3)
itkUnaryGeneratorImageFilterICF3IF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3___New_orig__
itkUnaryGeneratorImageFilterICF3IF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IF3_cast


def itkUnaryGeneratorImageFilterICF3ISS3_New():
    return itkUnaryGeneratorImageFilterICF3ISS3.New()

class itkUnaryGeneratorImageFilterICF3ISS3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ISS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ISS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF3ISS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF3ISS3

        Create a new object of the class itkUnaryGeneratorImageFilterICF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF3ISS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ISS3_swigregister(itkUnaryGeneratorImageFilterICF3ISS3)
itkUnaryGeneratorImageFilterICF3ISS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ISS3___New_orig__
itkUnaryGeneratorImageFilterICF3ISS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3ISS3_cast


def itkUnaryGeneratorImageFilterICF3IUC3_New():
    return itkUnaryGeneratorImageFilterICF3IUC3.New()

class itkUnaryGeneratorImageFilterICF3IUC3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUC3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUC3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF3IUC3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF3IUC3

        Create a new object of the class itkUnaryGeneratorImageFilterICF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF3IUC3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUC3_swigregister(itkUnaryGeneratorImageFilterICF3IUC3)
itkUnaryGeneratorImageFilterICF3IUC3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUC3___New_orig__
itkUnaryGeneratorImageFilterICF3IUC3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUC3_cast


def itkUnaryGeneratorImageFilterICF3IUS3_New():
    return itkUnaryGeneratorImageFilterICF3IUS3.New()

class itkUnaryGeneratorImageFilterICF3IUS3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3IUS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterICF3IUS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterICF3IUS3

        Create a new object of the class itkUnaryGeneratorImageFilterICF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterICF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterICF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterICF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterICF3IUS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUS3_swigregister(itkUnaryGeneratorImageFilterICF3IUS3)
itkUnaryGeneratorImageFilterICF3IUS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUS3___New_orig__
itkUnaryGeneratorImageFilterICF3IUS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterICF3IUS3_cast


def itkUnaryGeneratorImageFilterID2ICF2_New():
    return itkUnaryGeneratorImageFilterID2ICF2.New()

class itkUnaryGeneratorImageFilterID2ICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ICF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID2ICF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID2ICF2

        Create a new object of the class itkUnaryGeneratorImageFilterID2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID2ICF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ICF2_swigregister(itkUnaryGeneratorImageFilterID2ICF2)
itkUnaryGeneratorImageFilterID2ICF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ICF2___New_orig__
itkUnaryGeneratorImageFilterID2ICF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ICF2_cast


def itkUnaryGeneratorImageFilterID2ID2_New():
    return itkUnaryGeneratorImageFilterID2ID2.New()

class itkUnaryGeneratorImageFilterID2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID2ID2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID2ID2

        Create a new object of the class itkUnaryGeneratorImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID2ID2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2_swigregister(itkUnaryGeneratorImageFilterID2ID2)
itkUnaryGeneratorImageFilterID2ID2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2___New_orig__
itkUnaryGeneratorImageFilterID2ID2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2_cast


def itkUnaryGeneratorImageFilterID2IF2_New():
    return itkUnaryGeneratorImageFilterID2IF2.New()

class itkUnaryGeneratorImageFilterID2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID2IF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID2IF2

        Create a new object of the class itkUnaryGeneratorImageFilterID2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID2IF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IF2_swigregister(itkUnaryGeneratorImageFilterID2IF2)
itkUnaryGeneratorImageFilterID2IF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IF2___New_orig__
itkUnaryGeneratorImageFilterID2IF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IF2_cast


def itkUnaryGeneratorImageFilterID2ISS2_New():
    return itkUnaryGeneratorImageFilterID2ISS2.New()

class itkUnaryGeneratorImageFilterID2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ISS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ISS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID2ISS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID2ISS2

        Create a new object of the class itkUnaryGeneratorImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID2ISS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ISS2_swigregister(itkUnaryGeneratorImageFilterID2ISS2)
itkUnaryGeneratorImageFilterID2ISS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ISS2___New_orig__
itkUnaryGeneratorImageFilterID2ISS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ISS2_cast


def itkUnaryGeneratorImageFilterID2IUC2_New():
    return itkUnaryGeneratorImageFilterID2IUC2.New()

class itkUnaryGeneratorImageFilterID2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUC2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUC2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID2IUC2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID2IUC2

        Create a new object of the class itkUnaryGeneratorImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID2IUC2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUC2_swigregister(itkUnaryGeneratorImageFilterID2IUC2)
itkUnaryGeneratorImageFilterID2IUC2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUC2___New_orig__
itkUnaryGeneratorImageFilterID2IUC2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUC2_cast


def itkUnaryGeneratorImageFilterID2IUS2_New():
    return itkUnaryGeneratorImageFilterID2IUS2.New()

class itkUnaryGeneratorImageFilterID2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2IUS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID2IUS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID2IUS2

        Create a new object of the class itkUnaryGeneratorImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID2IUS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUS2_swigregister(itkUnaryGeneratorImageFilterID2IUS2)
itkUnaryGeneratorImageFilterID2IUS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUS2___New_orig__
itkUnaryGeneratorImageFilterID2IUS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2IUS2_cast


def itkUnaryGeneratorImageFilterID3ICF3_New():
    return itkUnaryGeneratorImageFilterID3ICF3.New()

class itkUnaryGeneratorImageFilterID3ICF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ICF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID3ICF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID3ICF3

        Create a new object of the class itkUnaryGeneratorImageFilterID3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID3ICF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ICF3_swigregister(itkUnaryGeneratorImageFilterID3ICF3)
itkUnaryGeneratorImageFilterID3ICF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ICF3___New_orig__
itkUnaryGeneratorImageFilterID3ICF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ICF3_cast


def itkUnaryGeneratorImageFilterID3ID3_New():
    return itkUnaryGeneratorImageFilterID3ID3.New()

class itkUnaryGeneratorImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID3ID3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID3ID3

        Create a new object of the class itkUnaryGeneratorImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID3ID3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3_swigregister(itkUnaryGeneratorImageFilterID3ID3)
itkUnaryGeneratorImageFilterID3ID3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3___New_orig__
itkUnaryGeneratorImageFilterID3ID3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3_cast


def itkUnaryGeneratorImageFilterID3IF3_New():
    return itkUnaryGeneratorImageFilterID3IF3.New()

class itkUnaryGeneratorImageFilterID3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID3IF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID3IF3

        Create a new object of the class itkUnaryGeneratorImageFilterID3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID3IF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IF3_swigregister(itkUnaryGeneratorImageFilterID3IF3)
itkUnaryGeneratorImageFilterID3IF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IF3___New_orig__
itkUnaryGeneratorImageFilterID3IF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IF3_cast


def itkUnaryGeneratorImageFilterID3ISS3_New():
    return itkUnaryGeneratorImageFilterID3ISS3.New()

class itkUnaryGeneratorImageFilterID3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ISS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ISS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID3ISS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID3ISS3

        Create a new object of the class itkUnaryGeneratorImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID3ISS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ISS3_swigregister(itkUnaryGeneratorImageFilterID3ISS3)
itkUnaryGeneratorImageFilterID3ISS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ISS3___New_orig__
itkUnaryGeneratorImageFilterID3ISS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ISS3_cast


def itkUnaryGeneratorImageFilterID3IUC3_New():
    return itkUnaryGeneratorImageFilterID3IUC3.New()

class itkUnaryGeneratorImageFilterID3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUC3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUC3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID3IUC3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID3IUC3

        Create a new object of the class itkUnaryGeneratorImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID3IUC3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUC3_swigregister(itkUnaryGeneratorImageFilterID3IUC3)
itkUnaryGeneratorImageFilterID3IUC3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUC3___New_orig__
itkUnaryGeneratorImageFilterID3IUC3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUC3_cast


def itkUnaryGeneratorImageFilterID3IUS3_New():
    return itkUnaryGeneratorImageFilterID3IUS3.New()

class itkUnaryGeneratorImageFilterID3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3IUS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterID3IUS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterID3IUS3

        Create a new object of the class itkUnaryGeneratorImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterID3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterID3IUS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUS3_swigregister(itkUnaryGeneratorImageFilterID3IUS3)
itkUnaryGeneratorImageFilterID3IUS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUS3___New_orig__
itkUnaryGeneratorImageFilterID3IUS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3IUS3_cast


def itkUnaryGeneratorImageFilterIF2ICF2_New():
    return itkUnaryGeneratorImageFilterIF2ICF2.New()

class itkUnaryGeneratorImageFilterIF2ICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ICF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF2ICF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF2ICF2

        Create a new object of the class itkUnaryGeneratorImageFilterIF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF2ICF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ICF2_swigregister(itkUnaryGeneratorImageFilterIF2ICF2)
itkUnaryGeneratorImageFilterIF2ICF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ICF2___New_orig__
itkUnaryGeneratorImageFilterIF2ICF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ICF2_cast


def itkUnaryGeneratorImageFilterIF2ID2_New():
    return itkUnaryGeneratorImageFilterIF2ID2.New()

class itkUnaryGeneratorImageFilterIF2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ID2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ID2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF2ID2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF2ID2

        Create a new object of the class itkUnaryGeneratorImageFilterIF2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF2ID2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ID2_swigregister(itkUnaryGeneratorImageFilterIF2ID2)
itkUnaryGeneratorImageFilterIF2ID2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ID2___New_orig__
itkUnaryGeneratorImageFilterIF2ID2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ID2_cast


def itkUnaryGeneratorImageFilterIF2IF2_New():
    return itkUnaryGeneratorImageFilterIF2IF2.New()

class itkUnaryGeneratorImageFilterIF2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF2IF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF2IF2

        Create a new object of the class itkUnaryGeneratorImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF2IF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2_swigregister(itkUnaryGeneratorImageFilterIF2IF2)
itkUnaryGeneratorImageFilterIF2IF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2___New_orig__
itkUnaryGeneratorImageFilterIF2IF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2_cast


def itkUnaryGeneratorImageFilterIF2ISS2_New():
    return itkUnaryGeneratorImageFilterIF2ISS2.New()

class itkUnaryGeneratorImageFilterIF2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2ISS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ISS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF2ISS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF2ISS2

        Create a new object of the class itkUnaryGeneratorImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF2ISS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ISS2_swigregister(itkUnaryGeneratorImageFilterIF2ISS2)
itkUnaryGeneratorImageFilterIF2ISS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ISS2___New_orig__
itkUnaryGeneratorImageFilterIF2ISS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2ISS2_cast


def itkUnaryGeneratorImageFilterIF2IUC2_New():
    return itkUnaryGeneratorImageFilterIF2IUC2.New()

class itkUnaryGeneratorImageFilterIF2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUC2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUC2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF2IUC2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF2IUC2

        Create a new object of the class itkUnaryGeneratorImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF2IUC2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUC2_swigregister(itkUnaryGeneratorImageFilterIF2IUC2)
itkUnaryGeneratorImageFilterIF2IUC2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUC2___New_orig__
itkUnaryGeneratorImageFilterIF2IUC2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUC2_cast


def itkUnaryGeneratorImageFilterIF2IUS2_New():
    return itkUnaryGeneratorImageFilterIF2IUS2.New()

class itkUnaryGeneratorImageFilterIF2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IUS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF2IUS2

        Create a new object of the class itkUnaryGeneratorImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF2IUS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUS2_swigregister(itkUnaryGeneratorImageFilterIF2IUS2)
itkUnaryGeneratorImageFilterIF2IUS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUS2___New_orig__
itkUnaryGeneratorImageFilterIF2IUS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IUS2_cast


def itkUnaryGeneratorImageFilterIF3ICF3_New():
    return itkUnaryGeneratorImageFilterIF3ICF3.New()

class itkUnaryGeneratorImageFilterIF3ICF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ICF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF3ICF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF3ICF3

        Create a new object of the class itkUnaryGeneratorImageFilterIF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF3ICF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ICF3_swigregister(itkUnaryGeneratorImageFilterIF3ICF3)
itkUnaryGeneratorImageFilterIF3ICF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ICF3___New_orig__
itkUnaryGeneratorImageFilterIF3ICF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ICF3_cast


def itkUnaryGeneratorImageFilterIF3ID3_New():
    return itkUnaryGeneratorImageFilterIF3ID3.New()

class itkUnaryGeneratorImageFilterIF3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ID3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ID3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF3ID3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF3ID3

        Create a new object of the class itkUnaryGeneratorImageFilterIF3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF3ID3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ID3_swigregister(itkUnaryGeneratorImageFilterIF3ID3)
itkUnaryGeneratorImageFilterIF3ID3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ID3___New_orig__
itkUnaryGeneratorImageFilterIF3ID3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ID3_cast


def itkUnaryGeneratorImageFilterIF3IF3_New():
    return itkUnaryGeneratorImageFilterIF3IF3.New()

class itkUnaryGeneratorImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF3IF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF3IF3

        Create a new object of the class itkUnaryGeneratorImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF3IF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3_swigregister(itkUnaryGeneratorImageFilterIF3IF3)
itkUnaryGeneratorImageFilterIF3IF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3___New_orig__
itkUnaryGeneratorImageFilterIF3IF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3_cast


def itkUnaryGeneratorImageFilterIF3ISS3_New():
    return itkUnaryGeneratorImageFilterIF3ISS3.New()

class itkUnaryGeneratorImageFilterIF3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3ISS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ISS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF3ISS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF3ISS3

        Create a new object of the class itkUnaryGeneratorImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF3ISS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ISS3_swigregister(itkUnaryGeneratorImageFilterIF3ISS3)
itkUnaryGeneratorImageFilterIF3ISS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ISS3___New_orig__
itkUnaryGeneratorImageFilterIF3ISS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3ISS3_cast


def itkUnaryGeneratorImageFilterIF3IUC3_New():
    return itkUnaryGeneratorImageFilterIF3IUC3.New()

class itkUnaryGeneratorImageFilterIF3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUC3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUC3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF3IUC3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF3IUC3

        Create a new object of the class itkUnaryGeneratorImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF3IUC3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUC3_swigregister(itkUnaryGeneratorImageFilterIF3IUC3)
itkUnaryGeneratorImageFilterIF3IUC3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUC3___New_orig__
itkUnaryGeneratorImageFilterIF3IUC3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUC3_cast


def itkUnaryGeneratorImageFilterIF3IUS3_New():
    return itkUnaryGeneratorImageFilterIF3IUS3.New()

class itkUnaryGeneratorImageFilterIF3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IUS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIF3IUS3

        Create a new object of the class itkUnaryGeneratorImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIF3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIF3IUS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUS3_swigregister(itkUnaryGeneratorImageFilterIF3IUS3)
itkUnaryGeneratorImageFilterIF3IUS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUS3___New_orig__
itkUnaryGeneratorImageFilterIF3IUS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IUS3_cast


def itkUnaryGeneratorImageFilterIRGBAUC2IUC2_New():
    return itkUnaryGeneratorImageFilterIRGBAUC2IUC2.New()

class itkUnaryGeneratorImageFilterIRGBAUC2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC2IUC2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC2IUC2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIRGBAUC2IUC2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIRGBAUC2IUC2

        Create a new object of the class itkUnaryGeneratorImageFilterIRGBAUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIRGBAUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIRGBAUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIRGBAUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIRGBAUC2IUC2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC2IUC2_swigregister(itkUnaryGeneratorImageFilterIRGBAUC2IUC2)
itkUnaryGeneratorImageFilterIRGBAUC2IUC2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC2IUC2___New_orig__
itkUnaryGeneratorImageFilterIRGBAUC2IUC2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC2IUC2_cast


def itkUnaryGeneratorImageFilterIRGBAUC3IUC3_New():
    return itkUnaryGeneratorImageFilterIRGBAUC3IUC3.New()

class itkUnaryGeneratorImageFilterIRGBAUC3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIRGBAUC3IUC3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC3IUC3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIRGBAUC3IUC3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIRGBAUC3IUC3

        Create a new object of the class itkUnaryGeneratorImageFilterIRGBAUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIRGBAUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIRGBAUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIRGBAUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIRGBAUC3IUC3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC3IUC3_swigregister(itkUnaryGeneratorImageFilterIRGBAUC3IUC3)
itkUnaryGeneratorImageFilterIRGBAUC3IUC3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC3IUC3___New_orig__
itkUnaryGeneratorImageFilterIRGBAUC3IUC3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBAUC3IUC3_cast


def itkUnaryGeneratorImageFilterIRGBUC2IUC2_New():
    return itkUnaryGeneratorImageFilterIRGBUC2IUC2.New()

class itkUnaryGeneratorImageFilterIRGBUC2IUC2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC2IUC2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC2IUC2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIRGBUC2IUC2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIRGBUC2IUC2

        Create a new object of the class itkUnaryGeneratorImageFilterIRGBUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIRGBUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIRGBUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIRGBUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIRGBUC2IUC2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC2IUC2_swigregister(itkUnaryGeneratorImageFilterIRGBUC2IUC2)
itkUnaryGeneratorImageFilterIRGBUC2IUC2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC2IUC2___New_orig__
itkUnaryGeneratorImageFilterIRGBUC2IUC2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC2IUC2_cast


def itkUnaryGeneratorImageFilterIRGBUC3IUC3_New():
    return itkUnaryGeneratorImageFilterIRGBUC3IUC3.New()

class itkUnaryGeneratorImageFilterIRGBUC3IUC3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIRGBUC3IUC3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC3IUC3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIRGBUC3IUC3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIRGBUC3IUC3

        Create a new object of the class itkUnaryGeneratorImageFilterIRGBUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIRGBUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIRGBUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIRGBUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIRGBUC3IUC3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC3IUC3_swigregister(itkUnaryGeneratorImageFilterIRGBUC3IUC3)
itkUnaryGeneratorImageFilterIRGBUC3IUC3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC3IUC3___New_orig__
itkUnaryGeneratorImageFilterIRGBUC3IUC3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIRGBUC3IUC3_cast


def itkUnaryGeneratorImageFilterISS2ICF2_New():
    return itkUnaryGeneratorImageFilterISS2ICF2.New()

class itkUnaryGeneratorImageFilterISS2ICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS2ICF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ICF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS2ICF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS2ICF2

        Create a new object of the class itkUnaryGeneratorImageFilterISS2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS2ICF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ICF2_swigregister(itkUnaryGeneratorImageFilterISS2ICF2)
itkUnaryGeneratorImageFilterISS2ICF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ICF2___New_orig__
itkUnaryGeneratorImageFilterISS2ICF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ICF2_cast


def itkUnaryGeneratorImageFilterISS2ID2_New():
    return itkUnaryGeneratorImageFilterISS2ID2.New()

class itkUnaryGeneratorImageFilterISS2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ID2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ID2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS2ID2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS2ID2

        Create a new object of the class itkUnaryGeneratorImageFilterISS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS2ID2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ID2_swigregister(itkUnaryGeneratorImageFilterISS2ID2)
itkUnaryGeneratorImageFilterISS2ID2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ID2___New_orig__
itkUnaryGeneratorImageFilterISS2ID2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ID2_cast


def itkUnaryGeneratorImageFilterISS2IF2_New():
    return itkUnaryGeneratorImageFilterISS2IF2.New()

class itkUnaryGeneratorImageFilterISS2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS2IF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS2IF2

        Create a new object of the class itkUnaryGeneratorImageFilterISS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS2IF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IF2_swigregister(itkUnaryGeneratorImageFilterISS2IF2)
itkUnaryGeneratorImageFilterISS2IF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IF2___New_orig__
itkUnaryGeneratorImageFilterISS2IF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IF2_cast


def itkUnaryGeneratorImageFilterISS2ISS2_New():
    return itkUnaryGeneratorImageFilterISS2ISS2.New()

class itkUnaryGeneratorImageFilterISS2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2ISS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS2ISS2

        Create a new object of the class itkUnaryGeneratorImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS2ISS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2_swigregister(itkUnaryGeneratorImageFilterISS2ISS2)
itkUnaryGeneratorImageFilterISS2ISS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2___New_orig__
itkUnaryGeneratorImageFilterISS2ISS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2_cast


def itkUnaryGeneratorImageFilterISS2IUC2_New():
    return itkUnaryGeneratorImageFilterISS2IUC2.New()

class itkUnaryGeneratorImageFilterISS2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUC2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUC2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS2IUC2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS2IUC2

        Create a new object of the class itkUnaryGeneratorImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS2IUC2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUC2_swigregister(itkUnaryGeneratorImageFilterISS2IUC2)
itkUnaryGeneratorImageFilterISS2IUC2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUC2___New_orig__
itkUnaryGeneratorImageFilterISS2IUC2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUC2_cast


def itkUnaryGeneratorImageFilterISS2IUS2_New():
    return itkUnaryGeneratorImageFilterISS2IUS2.New()

class itkUnaryGeneratorImageFilterISS2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IUS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS2IUS2

        Create a new object of the class itkUnaryGeneratorImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS2IUS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUS2_swigregister(itkUnaryGeneratorImageFilterISS2IUS2)
itkUnaryGeneratorImageFilterISS2IUS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUS2___New_orig__
itkUnaryGeneratorImageFilterISS2IUS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2IUS2_cast


def itkUnaryGeneratorImageFilterISS3ICF3_New():
    return itkUnaryGeneratorImageFilterISS3ICF3.New()

class itkUnaryGeneratorImageFilterISS3ICF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterISS3ICF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ICF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS3ICF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS3ICF3

        Create a new object of the class itkUnaryGeneratorImageFilterISS3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS3ICF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ICF3_swigregister(itkUnaryGeneratorImageFilterISS3ICF3)
itkUnaryGeneratorImageFilterISS3ICF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ICF3___New_orig__
itkUnaryGeneratorImageFilterISS3ICF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ICF3_cast


def itkUnaryGeneratorImageFilterISS3ID3_New():
    return itkUnaryGeneratorImageFilterISS3ID3.New()

class itkUnaryGeneratorImageFilterISS3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ID3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ID3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS3ID3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS3ID3

        Create a new object of the class itkUnaryGeneratorImageFilterISS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS3ID3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ID3_swigregister(itkUnaryGeneratorImageFilterISS3ID3)
itkUnaryGeneratorImageFilterISS3ID3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ID3___New_orig__
itkUnaryGeneratorImageFilterISS3ID3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ID3_cast


def itkUnaryGeneratorImageFilterISS3IF3_New():
    return itkUnaryGeneratorImageFilterISS3IF3.New()

class itkUnaryGeneratorImageFilterISS3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS3IF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS3IF3

        Create a new object of the class itkUnaryGeneratorImageFilterISS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS3IF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IF3_swigregister(itkUnaryGeneratorImageFilterISS3IF3)
itkUnaryGeneratorImageFilterISS3IF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IF3___New_orig__
itkUnaryGeneratorImageFilterISS3IF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IF3_cast


def itkUnaryGeneratorImageFilterISS3ISS3_New():
    return itkUnaryGeneratorImageFilterISS3ISS3.New()

class itkUnaryGeneratorImageFilterISS3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3ISS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS3ISS3

        Create a new object of the class itkUnaryGeneratorImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS3ISS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3_swigregister(itkUnaryGeneratorImageFilterISS3ISS3)
itkUnaryGeneratorImageFilterISS3ISS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3___New_orig__
itkUnaryGeneratorImageFilterISS3ISS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3_cast


def itkUnaryGeneratorImageFilterISS3IUC3_New():
    return itkUnaryGeneratorImageFilterISS3IUC3.New()

class itkUnaryGeneratorImageFilterISS3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUC3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUC3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS3IUC3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS3IUC3

        Create a new object of the class itkUnaryGeneratorImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS3IUC3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUC3_swigregister(itkUnaryGeneratorImageFilterISS3IUC3)
itkUnaryGeneratorImageFilterISS3IUC3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUC3___New_orig__
itkUnaryGeneratorImageFilterISS3IUC3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUC3_cast


def itkUnaryGeneratorImageFilterISS3IUS3_New():
    return itkUnaryGeneratorImageFilterISS3IUS3.New()

class itkUnaryGeneratorImageFilterISS3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IUS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterISS3IUS3

        Create a new object of the class itkUnaryGeneratorImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterISS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterISS3IUS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUS3_swigregister(itkUnaryGeneratorImageFilterISS3IUS3)
itkUnaryGeneratorImageFilterISS3IUS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUS3___New_orig__
itkUnaryGeneratorImageFilterISS3IUS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3IUS3_cast


def itkUnaryGeneratorImageFilterIUC2ICF2_New():
    return itkUnaryGeneratorImageFilterIUC2ICF2.New()

class itkUnaryGeneratorImageFilterIUC2ICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC2ICF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ICF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC2ICF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC2ICF2

        Create a new object of the class itkUnaryGeneratorImageFilterIUC2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC2ICF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ICF2_swigregister(itkUnaryGeneratorImageFilterIUC2ICF2)
itkUnaryGeneratorImageFilterIUC2ICF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ICF2___New_orig__
itkUnaryGeneratorImageFilterIUC2ICF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ICF2_cast


def itkUnaryGeneratorImageFilterIUC2ID2_New():
    return itkUnaryGeneratorImageFilterIUC2ID2.New()

class itkUnaryGeneratorImageFilterIUC2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ID2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ID2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC2ID2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC2ID2

        Create a new object of the class itkUnaryGeneratorImageFilterIUC2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC2ID2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ID2_swigregister(itkUnaryGeneratorImageFilterIUC2ID2)
itkUnaryGeneratorImageFilterIUC2ID2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ID2___New_orig__
itkUnaryGeneratorImageFilterIUC2ID2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ID2_cast


def itkUnaryGeneratorImageFilterIUC2IF2_New():
    return itkUnaryGeneratorImageFilterIUC2IF2.New()

class itkUnaryGeneratorImageFilterIUC2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC2IF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC2IF2

        Create a new object of the class itkUnaryGeneratorImageFilterIUC2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC2IF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IF2_swigregister(itkUnaryGeneratorImageFilterIUC2IF2)
itkUnaryGeneratorImageFilterIUC2IF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IF2___New_orig__
itkUnaryGeneratorImageFilterIUC2IF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IF2_cast


def itkUnaryGeneratorImageFilterIUC2ISS2_New():
    return itkUnaryGeneratorImageFilterIUC2ISS2.New()

class itkUnaryGeneratorImageFilterIUC2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2ISS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ISS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC2ISS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC2ISS2

        Create a new object of the class itkUnaryGeneratorImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC2ISS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ISS2_swigregister(itkUnaryGeneratorImageFilterIUC2ISS2)
itkUnaryGeneratorImageFilterIUC2ISS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ISS2___New_orig__
itkUnaryGeneratorImageFilterIUC2ISS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2ISS2_cast


def itkUnaryGeneratorImageFilterIUC2IUC2_New():
    return itkUnaryGeneratorImageFilterIUC2IUC2.New()

class itkUnaryGeneratorImageFilterIUC2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC2IUC2

        Create a new object of the class itkUnaryGeneratorImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC2IUC2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2_swigregister(itkUnaryGeneratorImageFilterIUC2IUC2)
itkUnaryGeneratorImageFilterIUC2IUC2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2___New_orig__
itkUnaryGeneratorImageFilterIUC2IUC2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2_cast


def itkUnaryGeneratorImageFilterIUC2IUS2_New():
    return itkUnaryGeneratorImageFilterIUC2IUS2.New()

class itkUnaryGeneratorImageFilterIUC2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC2IUS2

        Create a new object of the class itkUnaryGeneratorImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC2IUS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUS2_swigregister(itkUnaryGeneratorImageFilterIUC2IUS2)
itkUnaryGeneratorImageFilterIUC2IUS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUS2___New_orig__
itkUnaryGeneratorImageFilterIUC2IUS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUS2_cast


def itkUnaryGeneratorImageFilterIUC3ICF3_New():
    return itkUnaryGeneratorImageFilterIUC3ICF3.New()

class itkUnaryGeneratorImageFilterIUC3ICF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUC3ICF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ICF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC3ICF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC3ICF3

        Create a new object of the class itkUnaryGeneratorImageFilterIUC3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC3ICF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ICF3_swigregister(itkUnaryGeneratorImageFilterIUC3ICF3)
itkUnaryGeneratorImageFilterIUC3ICF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ICF3___New_orig__
itkUnaryGeneratorImageFilterIUC3ICF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ICF3_cast


def itkUnaryGeneratorImageFilterIUC3ID3_New():
    return itkUnaryGeneratorImageFilterIUC3ID3.New()

class itkUnaryGeneratorImageFilterIUC3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ID3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ID3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC3ID3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC3ID3

        Create a new object of the class itkUnaryGeneratorImageFilterIUC3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC3ID3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ID3_swigregister(itkUnaryGeneratorImageFilterIUC3ID3)
itkUnaryGeneratorImageFilterIUC3ID3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ID3___New_orig__
itkUnaryGeneratorImageFilterIUC3ID3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ID3_cast


def itkUnaryGeneratorImageFilterIUC3IF3_New():
    return itkUnaryGeneratorImageFilterIUC3IF3.New()

class itkUnaryGeneratorImageFilterIUC3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC3IF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC3IF3

        Create a new object of the class itkUnaryGeneratorImageFilterIUC3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC3IF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IF3_swigregister(itkUnaryGeneratorImageFilterIUC3IF3)
itkUnaryGeneratorImageFilterIUC3IF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IF3___New_orig__
itkUnaryGeneratorImageFilterIUC3IF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IF3_cast


def itkUnaryGeneratorImageFilterIUC3ISS3_New():
    return itkUnaryGeneratorImageFilterIUC3ISS3.New()

class itkUnaryGeneratorImageFilterIUC3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3ISS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ISS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC3ISS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC3ISS3

        Create a new object of the class itkUnaryGeneratorImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC3ISS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ISS3_swigregister(itkUnaryGeneratorImageFilterIUC3ISS3)
itkUnaryGeneratorImageFilterIUC3ISS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ISS3___New_orig__
itkUnaryGeneratorImageFilterIUC3ISS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3ISS3_cast


def itkUnaryGeneratorImageFilterIUC3IUC3_New():
    return itkUnaryGeneratorImageFilterIUC3IUC3.New()

class itkUnaryGeneratorImageFilterIUC3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC3IUC3

        Create a new object of the class itkUnaryGeneratorImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC3IUC3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3_swigregister(itkUnaryGeneratorImageFilterIUC3IUC3)
itkUnaryGeneratorImageFilterIUC3IUC3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3___New_orig__
itkUnaryGeneratorImageFilterIUC3IUC3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3_cast


def itkUnaryGeneratorImageFilterIUC3IUS3_New():
    return itkUnaryGeneratorImageFilterIUC3IUS3.New()

class itkUnaryGeneratorImageFilterIUC3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUC3IUS3

        Create a new object of the class itkUnaryGeneratorImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUC3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUC3IUS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUS3_swigregister(itkUnaryGeneratorImageFilterIUC3IUS3)
itkUnaryGeneratorImageFilterIUC3IUS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUS3___New_orig__
itkUnaryGeneratorImageFilterIUC3IUS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUS3_cast


def itkUnaryGeneratorImageFilterIUS2ICF2_New():
    return itkUnaryGeneratorImageFilterIUS2ICF2.New()

class itkUnaryGeneratorImageFilterIUS2ICF2(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS2ICF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ICF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS2ICF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ICF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS2ICF2

        Create a new object of the class itkUnaryGeneratorImageFilterIUS2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS2ICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS2ICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS2ICF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ICF2_swigregister(itkUnaryGeneratorImageFilterIUS2ICF2)
itkUnaryGeneratorImageFilterIUS2ICF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ICF2___New_orig__
itkUnaryGeneratorImageFilterIUS2ICF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ICF2_cast


def itkUnaryGeneratorImageFilterIUS2ID2_New():
    return itkUnaryGeneratorImageFilterIUS2ID2.New()

class itkUnaryGeneratorImageFilterIUS2ID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ID2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ID2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS2ID2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS2ID2

        Create a new object of the class itkUnaryGeneratorImageFilterIUS2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS2ID2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ID2_swigregister(itkUnaryGeneratorImageFilterIUS2ID2)
itkUnaryGeneratorImageFilterIUS2ID2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ID2___New_orig__
itkUnaryGeneratorImageFilterIUS2ID2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ID2_cast


def itkUnaryGeneratorImageFilterIUS2IF2_New():
    return itkUnaryGeneratorImageFilterIUS2IF2.New()

class itkUnaryGeneratorImageFilterIUS2IF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IF2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IF2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS2IF2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS2IF2

        Create a new object of the class itkUnaryGeneratorImageFilterIUS2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS2IF2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IF2_swigregister(itkUnaryGeneratorImageFilterIUS2IF2)
itkUnaryGeneratorImageFilterIUS2IF2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IF2___New_orig__
itkUnaryGeneratorImageFilterIUS2IF2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IF2_cast


def itkUnaryGeneratorImageFilterIUS2ISS2_New():
    return itkUnaryGeneratorImageFilterIUS2ISS2.New()

class itkUnaryGeneratorImageFilterIUS2ISS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2ISS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ISS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS2ISS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS2ISS2

        Create a new object of the class itkUnaryGeneratorImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS2ISS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ISS2_swigregister(itkUnaryGeneratorImageFilterIUS2ISS2)
itkUnaryGeneratorImageFilterIUS2ISS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ISS2___New_orig__
itkUnaryGeneratorImageFilterIUS2ISS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2ISS2_cast


def itkUnaryGeneratorImageFilterIUS2IUC2_New():
    return itkUnaryGeneratorImageFilterIUS2IUC2.New()

class itkUnaryGeneratorImageFilterIUS2IUC2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUC2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUC2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS2IUC2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS2IUC2

        Create a new object of the class itkUnaryGeneratorImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS2IUC2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUC2_swigregister(itkUnaryGeneratorImageFilterIUS2IUC2)
itkUnaryGeneratorImageFilterIUS2IUC2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUC2___New_orig__
itkUnaryGeneratorImageFilterIUS2IUC2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUC2_cast


def itkUnaryGeneratorImageFilterIUS2IUS2_New():
    return itkUnaryGeneratorImageFilterIUS2IUS2.New()

class itkUnaryGeneratorImageFilterIUS2IUS2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS2IUS2

        Create a new object of the class itkUnaryGeneratorImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS2IUS2 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2_swigregister(itkUnaryGeneratorImageFilterIUS2IUS2)
itkUnaryGeneratorImageFilterIUS2IUS2___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2___New_orig__
itkUnaryGeneratorImageFilterIUS2IUS2_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2_cast


def itkUnaryGeneratorImageFilterIUS3ICF3_New():
    return itkUnaryGeneratorImageFilterIUS3ICF3.New()

class itkUnaryGeneratorImageFilterIUS3ICF3(itk.itkInPlaceImageFilterBPython.itkInPlaceImageFilterIUS3ICF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ICF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS3ICF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ICF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS3ICF3

        Create a new object of the class itkUnaryGeneratorImageFilterIUS3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS3ICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS3ICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS3ICF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ICF3_swigregister(itkUnaryGeneratorImageFilterIUS3ICF3)
itkUnaryGeneratorImageFilterIUS3ICF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ICF3___New_orig__
itkUnaryGeneratorImageFilterIUS3ICF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ICF3_cast


def itkUnaryGeneratorImageFilterIUS3ID3_New():
    return itkUnaryGeneratorImageFilterIUS3ID3.New()

class itkUnaryGeneratorImageFilterIUS3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ID3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ID3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS3ID3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS3ID3

        Create a new object of the class itkUnaryGeneratorImageFilterIUS3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS3ID3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ID3_swigregister(itkUnaryGeneratorImageFilterIUS3ID3)
itkUnaryGeneratorImageFilterIUS3ID3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ID3___New_orig__
itkUnaryGeneratorImageFilterIUS3ID3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ID3_cast


def itkUnaryGeneratorImageFilterIUS3IF3_New():
    return itkUnaryGeneratorImageFilterIUS3IF3.New()

class itkUnaryGeneratorImageFilterIUS3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IF3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IF3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS3IF3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS3IF3

        Create a new object of the class itkUnaryGeneratorImageFilterIUS3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS3IF3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IF3_swigregister(itkUnaryGeneratorImageFilterIUS3IF3)
itkUnaryGeneratorImageFilterIUS3IF3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IF3___New_orig__
itkUnaryGeneratorImageFilterIUS3IF3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IF3_cast


def itkUnaryGeneratorImageFilterIUS3ISS3_New():
    return itkUnaryGeneratorImageFilterIUS3ISS3.New()

class itkUnaryGeneratorImageFilterIUS3ISS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3ISS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ISS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS3ISS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS3ISS3

        Create a new object of the class itkUnaryGeneratorImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS3ISS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ISS3_swigregister(itkUnaryGeneratorImageFilterIUS3ISS3)
itkUnaryGeneratorImageFilterIUS3ISS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ISS3___New_orig__
itkUnaryGeneratorImageFilterIUS3ISS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3ISS3_cast


def itkUnaryGeneratorImageFilterIUS3IUC3_New():
    return itkUnaryGeneratorImageFilterIUS3IUC3.New()

class itkUnaryGeneratorImageFilterIUS3IUC3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUC3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUC3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS3IUC3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS3IUC3

        Create a new object of the class itkUnaryGeneratorImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS3IUC3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUC3_swigregister(itkUnaryGeneratorImageFilterIUS3IUC3)
itkUnaryGeneratorImageFilterIUS3IUC3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUC3___New_orig__
itkUnaryGeneratorImageFilterIUS3IUC3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUC3_cast


def itkUnaryGeneratorImageFilterIUS3IUS3_New():
    return itkUnaryGeneratorImageFilterIUS3IUS3.New()

class itkUnaryGeneratorImageFilterIUS3IUS3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    r"""


    Implements pixel-wise generic "operation" on one image.

    This class is parameterized over the type of the input image and the
    type of the output image.

    This filter allows per-pixel operations to be specified in several
    way: ITK traditional "Functor" class with operator()

    C++11 lambda functions, with closures

    C++ std::function

    C-style function pointers

    UnaryGeneratorImageFilter allows the output dimension of the filter to
    be larger than the input dimension. Thus subclasses of the
    UnaryGeneratorImageFilter can be used to promote a 2D image to a 3D
    image, etc.

    See:  UnaryFunctorImageFilter

    See:   BinaryGeneratorImageFilter TernaryGeneratormageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3_Clone)
    __swig_destroy__ = _itkUnaryGeneratorImageFilterPython.delete_itkUnaryGeneratorImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkUnaryGeneratorImageFilterIUS3IUS3

        Create a new object of the class itkUnaryGeneratorImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkUnaryGeneratorImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkUnaryGeneratorImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkUnaryGeneratorImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkUnaryGeneratorImageFilterIUS3IUS3 in _itkUnaryGeneratorImageFilterPython:
_itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3_swigregister(itkUnaryGeneratorImageFilterIUS3IUS3)
itkUnaryGeneratorImageFilterIUS3IUS3___New_orig__ = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3___New_orig__
itkUnaryGeneratorImageFilterIUS3IUS3_cast = _itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_generator_image_filter(*args, **kwargs):
    """Procedural interface for UnaryGeneratorImageFilter"""
    import itk
    instance = itk.UnaryGeneratorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_generator_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryGeneratorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryGeneratorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryGeneratorImageFilter

    unary_generator_image_filter.__doc__ = filter_object.__doc__
    unary_generator_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_generator_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryGeneratorImageFilter, itkTemplate.itkTemplate):
        unary_generator_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_generator_image_filter.__doc__ += "\n"
        unary_generator_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_generator_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



