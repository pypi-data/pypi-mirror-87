# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBoundedReciprocalImageFilterPython
else:
    import _itkBoundedReciprocalImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBoundedReciprocalImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBoundedReciprocalImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkUnaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkBoundedReciprocalImageFilterID2ID2_New():
    return itkBoundedReciprocalImageFilterID2ID2.New()

class itkBoundedReciprocalImageFilterID2ID2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID2ID2):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID2ID2
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID2ID2

        Create a new object of the class itkBoundedReciprocalImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterID2ID2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_swigregister(itkBoundedReciprocalImageFilterID2ID2)
itkBoundedReciprocalImageFilterID2ID2___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2___New_orig__
itkBoundedReciprocalImageFilterID2ID2_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_cast


def itkBoundedReciprocalImageFilterID3ID3_New():
    return itkBoundedReciprocalImageFilterID3ID3.New()

class itkBoundedReciprocalImageFilterID3ID3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterID3ID3):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID3ID3
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID3ID3

        Create a new object of the class itkBoundedReciprocalImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterID3ID3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_swigregister(itkBoundedReciprocalImageFilterID3ID3)
itkBoundedReciprocalImageFilterID3ID3___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3___New_orig__
itkBoundedReciprocalImageFilterID3ID3_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_cast


def itkBoundedReciprocalImageFilterIF2IF2_New():
    return itkBoundedReciprocalImageFilterIF2IF2.New()

class itkBoundedReciprocalImageFilterIF2IF2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF2IF2):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF2IF2
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF2IF2

        Create a new object of the class itkBoundedReciprocalImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIF2IF2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_swigregister(itkBoundedReciprocalImageFilterIF2IF2)
itkBoundedReciprocalImageFilterIF2IF2___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2___New_orig__
itkBoundedReciprocalImageFilterIF2IF2_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_cast


def itkBoundedReciprocalImageFilterIF3IF3_New():
    return itkBoundedReciprocalImageFilterIF3IF3.New()

class itkBoundedReciprocalImageFilterIF3IF3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIF3IF3):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF3IF3
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF3IF3

        Create a new object of the class itkBoundedReciprocalImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIF3IF3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_swigregister(itkBoundedReciprocalImageFilterIF3IF3)
itkBoundedReciprocalImageFilterIF3IF3___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3___New_orig__
itkBoundedReciprocalImageFilterIF3IF3_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_cast


def itkBoundedReciprocalImageFilterISS2ISS2_New():
    return itkBoundedReciprocalImageFilterISS2ISS2.New()

class itkBoundedReciprocalImageFilterISS2ISS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS2ISS2):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterISS2ISS2

        Create a new object of the class itkBoundedReciprocalImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterISS2ISS2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_swigregister(itkBoundedReciprocalImageFilterISS2ISS2)
itkBoundedReciprocalImageFilterISS2ISS2___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2___New_orig__
itkBoundedReciprocalImageFilterISS2ISS2_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS2ISS2_cast


def itkBoundedReciprocalImageFilterISS3ISS3_New():
    return itkBoundedReciprocalImageFilterISS3ISS3.New()

class itkBoundedReciprocalImageFilterISS3ISS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterISS3ISS3):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterISS3ISS3

        Create a new object of the class itkBoundedReciprocalImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterISS3ISS3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_swigregister(itkBoundedReciprocalImageFilterISS3ISS3)
itkBoundedReciprocalImageFilterISS3ISS3___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3___New_orig__
itkBoundedReciprocalImageFilterISS3ISS3_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterISS3ISS3_cast


def itkBoundedReciprocalImageFilterIUC2IUC2_New():
    return itkBoundedReciprocalImageFilterIUC2IUC2.New()

class itkBoundedReciprocalImageFilterIUC2IUC2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC2IUC2):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC2IUC2

        Create a new object of the class itkBoundedReciprocalImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUC2IUC2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_swigregister(itkBoundedReciprocalImageFilterIUC2IUC2)
itkBoundedReciprocalImageFilterIUC2IUC2___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2___New_orig__
itkBoundedReciprocalImageFilterIUC2IUC2_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_cast


def itkBoundedReciprocalImageFilterIUC3IUC3_New():
    return itkBoundedReciprocalImageFilterIUC3IUC3.New()

class itkBoundedReciprocalImageFilterIUC3IUC3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUC3IUC3):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC3IUC3

        Create a new object of the class itkBoundedReciprocalImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUC3IUC3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_swigregister(itkBoundedReciprocalImageFilterIUC3IUC3)
itkBoundedReciprocalImageFilterIUC3IUC3___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3___New_orig__
itkBoundedReciprocalImageFilterIUC3IUC3_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_cast


def itkBoundedReciprocalImageFilterIUS2IUS2_New():
    return itkBoundedReciprocalImageFilterIUS2IUS2.New()

class itkBoundedReciprocalImageFilterIUS2IUS2(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS2IUS2):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS2IUS2

        Create a new object of the class itkBoundedReciprocalImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUS2IUS2 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_swigregister(itkBoundedReciprocalImageFilterIUS2IUS2)
itkBoundedReciprocalImageFilterIUS2IUS2___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2___New_orig__
itkBoundedReciprocalImageFilterIUS2IUS2_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_cast


def itkBoundedReciprocalImageFilterIUS3IUS3_New():
    return itkBoundedReciprocalImageFilterIUS3IUS3.New()

class itkBoundedReciprocalImageFilterIUS3IUS3(itk.itkUnaryGeneratorImageFilterPython.itkUnaryGeneratorImageFilterIUS3IUS3):
    r"""


    Computes 1/(1+x) for each pixel in the image.

    The filter expect both the input and output images to have the same
    number of dimensions, and both of a scalar image type. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Clone)
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS3IUS3

        Create a new object of the class itkBoundedReciprocalImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBoundedReciprocalImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBoundedReciprocalImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBoundedReciprocalImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBoundedReciprocalImageFilterIUS3IUS3 in _itkBoundedReciprocalImageFilterPython:
_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_swigregister(itkBoundedReciprocalImageFilterIUS3IUS3)
itkBoundedReciprocalImageFilterIUS3IUS3___New_orig__ = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3___New_orig__
itkBoundedReciprocalImageFilterIUS3IUS3_cast = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def bounded_reciprocal_image_filter(*args, **kwargs):
    """Procedural interface for BoundedReciprocalImageFilter"""
    import itk
    instance = itk.BoundedReciprocalImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def bounded_reciprocal_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BoundedReciprocalImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BoundedReciprocalImageFilter.values()[0]
    else:
        filter_object = itk.BoundedReciprocalImageFilter

    bounded_reciprocal_image_filter.__doc__ = filter_object.__doc__
    bounded_reciprocal_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    bounded_reciprocal_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BoundedReciprocalImageFilter, itkTemplate.itkTemplate):
        bounded_reciprocal_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        bounded_reciprocal_image_filter.__doc__ += "\n"
        bounded_reciprocal_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        bounded_reciprocal_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



