# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKMathematicalMorphologyPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkReconstructionByDilationImageFilterPython
else:
    import _itkReconstructionByDilationImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkReconstructionByDilationImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkReconstructionByDilationImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImagePython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkReconstructionByDilationImageFilterID2ID2_Superclass_New():
    return itkReconstructionByDilationImageFilterID2ID2_Superclass.New()

class itkReconstructionByDilationImageFilterID2ID2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterID2ID2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterID2ID2_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterID2ID2_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterID2ID2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterID2ID2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterID2ID2_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_swigregister(itkReconstructionByDilationImageFilterID2ID2_Superclass)
itkReconstructionByDilationImageFilterID2ID2_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass___New_orig__
itkReconstructionByDilationImageFilterID2ID2_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Superclass_cast


def itkReconstructionByDilationImageFilterID3ID3_Superclass_New():
    return itkReconstructionByDilationImageFilterID3ID3_Superclass.New()

class itkReconstructionByDilationImageFilterID3ID3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterID3ID3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterID3ID3_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterID3ID3_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterID3ID3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterID3ID3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterID3ID3_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_swigregister(itkReconstructionByDilationImageFilterID3ID3_Superclass)
itkReconstructionByDilationImageFilterID3ID3_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass___New_orig__
itkReconstructionByDilationImageFilterID3ID3_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Superclass_cast


def itkReconstructionByDilationImageFilterIF2IF2_Superclass_New():
    return itkReconstructionByDilationImageFilterIF2IF2_Superclass.New()

class itkReconstructionByDilationImageFilterIF2IF2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterIF2IF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIF2IF2_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIF2IF2_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIF2IF2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIF2IF2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIF2IF2_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_swigregister(itkReconstructionByDilationImageFilterIF2IF2_Superclass)
itkReconstructionByDilationImageFilterIF2IF2_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass___New_orig__
itkReconstructionByDilationImageFilterIF2IF2_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Superclass_cast


def itkReconstructionByDilationImageFilterIF3IF3_Superclass_New():
    return itkReconstructionByDilationImageFilterIF3IF3_Superclass.New()

class itkReconstructionByDilationImageFilterIF3IF3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterIF3IF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIF3IF3_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIF3IF3_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIF3IF3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIF3IF3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIF3IF3_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_swigregister(itkReconstructionByDilationImageFilterIF3IF3_Superclass)
itkReconstructionByDilationImageFilterIF3IF3_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass___New_orig__
itkReconstructionByDilationImageFilterIF3IF3_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Superclass_cast


def itkReconstructionByDilationImageFilterISS2ISS2_Superclass_New():
    return itkReconstructionByDilationImageFilterISS2ISS2_Superclass.New()

class itkReconstructionByDilationImageFilterISS2ISS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterISS2ISS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterISS2ISS2_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterISS2ISS2_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterISS2ISS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterISS2ISS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterISS2ISS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterISS2ISS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterISS2ISS2_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_swigregister(itkReconstructionByDilationImageFilterISS2ISS2_Superclass)
itkReconstructionByDilationImageFilterISS2ISS2_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass___New_orig__
itkReconstructionByDilationImageFilterISS2ISS2_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Superclass_cast


def itkReconstructionByDilationImageFilterISS3ISS3_Superclass_New():
    return itkReconstructionByDilationImageFilterISS3ISS3_Superclass.New()

class itkReconstructionByDilationImageFilterISS3ISS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterISS3ISS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterISS3ISS3_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterISS3ISS3_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterISS3ISS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterISS3ISS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterISS3ISS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterISS3ISS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterISS3ISS3_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_swigregister(itkReconstructionByDilationImageFilterISS3ISS3_Superclass)
itkReconstructionByDilationImageFilterISS3ISS3_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass___New_orig__
itkReconstructionByDilationImageFilterISS3ISS3_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Superclass_cast


def itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_New():
    return itkReconstructionByDilationImageFilterIUC2IUC2_Superclass.New()

class itkReconstructionByDilationImageFilterIUC2IUC2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterIUC2IUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIUC2IUC2_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIUC2IUC2_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIUC2IUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIUC2IUC2_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_swigregister(itkReconstructionByDilationImageFilterIUC2IUC2_Superclass)
itkReconstructionByDilationImageFilterIUC2IUC2_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass___New_orig__
itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Superclass_cast


def itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_New():
    return itkReconstructionByDilationImageFilterIUC3IUC3_Superclass.New()

class itkReconstructionByDilationImageFilterIUC3IUC3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterIUC3IUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIUC3IUC3_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIUC3IUC3_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIUC3IUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIUC3IUC3_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_swigregister(itkReconstructionByDilationImageFilterIUC3IUC3_Superclass)
itkReconstructionByDilationImageFilterIUC3IUC3_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass___New_orig__
itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Superclass_cast


def itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_New():
    return itkReconstructionByDilationImageFilterIUS2IUS2_Superclass.New()

class itkReconstructionByDilationImageFilterIUS2IUS2_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIUS2IUS2_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIUS2IUS2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIUS2IUS2_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_swigregister(itkReconstructionByDilationImageFilterIUS2IUS2_Superclass)
itkReconstructionByDilationImageFilterIUS2IUS2_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass___New_orig__
itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Superclass_cast


def itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_New():
    return itkReconstructionByDilationImageFilterIUS3IUS3_Superclass.New()

class itkReconstructionByDilationImageFilterIUS3IUS3_Superclass(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""Proxy of C++ itkReconstructionByDilationImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_GetMarkerImage)
    SetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_SetMaskImage)
    GetMaskImage = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_GetMaskImage)
    SetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_FullyConnectedOff)
    SetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_SetUseInternalCopy)
    GetUseInternalCopy = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_GetUseInternalCopy)
    UseInternalCopyOn = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_UseInternalCopyOn)
    UseInternalCopyOff = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_UseInternalCopyOff)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIUS3IUS3_Superclass

        Create a new object of the class itkReconstructionByDilationImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIUS3IUS3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIUS3IUS3_Superclass in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_swigregister(itkReconstructionByDilationImageFilterIUS3IUS3_Superclass)
itkReconstructionByDilationImageFilterIUS3IUS3_Superclass___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass___New_orig__
itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Superclass_cast


def itkReconstructionByDilationImageFilterID2ID2_New():
    return itkReconstructionByDilationImageFilterID2ID2.New()

class itkReconstructionByDilationImageFilterID2ID2(itkReconstructionByDilationImageFilterID2ID2_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterID2ID2
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterID2ID2

        Create a new object of the class itkReconstructionByDilationImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterID2ID2 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_swigregister(itkReconstructionByDilationImageFilterID2ID2)
itkReconstructionByDilationImageFilterID2ID2___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2___New_orig__
itkReconstructionByDilationImageFilterID2ID2_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID2ID2_cast


def itkReconstructionByDilationImageFilterID3ID3_New():
    return itkReconstructionByDilationImageFilterID3ID3.New()

class itkReconstructionByDilationImageFilterID3ID3(itkReconstructionByDilationImageFilterID3ID3_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterID3ID3
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterID3ID3

        Create a new object of the class itkReconstructionByDilationImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterID3ID3 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_swigregister(itkReconstructionByDilationImageFilterID3ID3)
itkReconstructionByDilationImageFilterID3ID3___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3___New_orig__
itkReconstructionByDilationImageFilterID3ID3_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterID3ID3_cast


def itkReconstructionByDilationImageFilterIF2IF2_New():
    return itkReconstructionByDilationImageFilterIF2IF2.New()

class itkReconstructionByDilationImageFilterIF2IF2(itkReconstructionByDilationImageFilterIF2IF2_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIF2IF2
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIF2IF2

        Create a new object of the class itkReconstructionByDilationImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIF2IF2 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_swigregister(itkReconstructionByDilationImageFilterIF2IF2)
itkReconstructionByDilationImageFilterIF2IF2___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2___New_orig__
itkReconstructionByDilationImageFilterIF2IF2_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF2IF2_cast


def itkReconstructionByDilationImageFilterIF3IF3_New():
    return itkReconstructionByDilationImageFilterIF3IF3.New()

class itkReconstructionByDilationImageFilterIF3IF3(itkReconstructionByDilationImageFilterIF3IF3_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIF3IF3
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIF3IF3

        Create a new object of the class itkReconstructionByDilationImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIF3IF3 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_swigregister(itkReconstructionByDilationImageFilterIF3IF3)
itkReconstructionByDilationImageFilterIF3IF3___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3___New_orig__
itkReconstructionByDilationImageFilterIF3IF3_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIF3IF3_cast


def itkReconstructionByDilationImageFilterISS2ISS2_New():
    return itkReconstructionByDilationImageFilterISS2ISS2.New()

class itkReconstructionByDilationImageFilterISS2ISS2(itkReconstructionByDilationImageFilterISS2ISS2_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterISS2ISS2

        Create a new object of the class itkReconstructionByDilationImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterISS2ISS2 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_swigregister(itkReconstructionByDilationImageFilterISS2ISS2)
itkReconstructionByDilationImageFilterISS2ISS2___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2___New_orig__
itkReconstructionByDilationImageFilterISS2ISS2_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS2ISS2_cast


def itkReconstructionByDilationImageFilterISS3ISS3_New():
    return itkReconstructionByDilationImageFilterISS3ISS3.New()

class itkReconstructionByDilationImageFilterISS3ISS3(itkReconstructionByDilationImageFilterISS3ISS3_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterISS3ISS3

        Create a new object of the class itkReconstructionByDilationImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterISS3ISS3 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_swigregister(itkReconstructionByDilationImageFilterISS3ISS3)
itkReconstructionByDilationImageFilterISS3ISS3___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3___New_orig__
itkReconstructionByDilationImageFilterISS3ISS3_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterISS3ISS3_cast


def itkReconstructionByDilationImageFilterIUC2IUC2_New():
    return itkReconstructionByDilationImageFilterIUC2IUC2.New()

class itkReconstructionByDilationImageFilterIUC2IUC2(itkReconstructionByDilationImageFilterIUC2IUC2_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIUC2IUC2

        Create a new object of the class itkReconstructionByDilationImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIUC2IUC2 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_swigregister(itkReconstructionByDilationImageFilterIUC2IUC2)
itkReconstructionByDilationImageFilterIUC2IUC2___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2___New_orig__
itkReconstructionByDilationImageFilterIUC2IUC2_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC2IUC2_cast


def itkReconstructionByDilationImageFilterIUC3IUC3_New():
    return itkReconstructionByDilationImageFilterIUC3IUC3.New()

class itkReconstructionByDilationImageFilterIUC3IUC3(itkReconstructionByDilationImageFilterIUC3IUC3_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIUC3IUC3

        Create a new object of the class itkReconstructionByDilationImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIUC3IUC3 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_swigregister(itkReconstructionByDilationImageFilterIUC3IUC3)
itkReconstructionByDilationImageFilterIUC3IUC3___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3___New_orig__
itkReconstructionByDilationImageFilterIUC3IUC3_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUC3IUC3_cast


def itkReconstructionByDilationImageFilterIUS2IUS2_New():
    return itkReconstructionByDilationImageFilterIUS2IUS2.New()

class itkReconstructionByDilationImageFilterIUS2IUS2(itkReconstructionByDilationImageFilterIUS2IUS2_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIUS2IUS2

        Create a new object of the class itkReconstructionByDilationImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIUS2IUS2 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_swigregister(itkReconstructionByDilationImageFilterIUS2IUS2)
itkReconstructionByDilationImageFilterIUS2IUS2___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2___New_orig__
itkReconstructionByDilationImageFilterIUS2IUS2_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS2IUS2_cast


def itkReconstructionByDilationImageFilterIUS3IUS3_New():
    return itkReconstructionByDilationImageFilterIUS3IUS3.New()

class itkReconstructionByDilationImageFilterIUS3IUS3(itkReconstructionByDilationImageFilterIUS3IUS3_Superclass):
    r"""


    grayscale reconstruction by dilation of an image

    Reconstruction by dilation operates on a "marker" image and a
    "mask" image, and is defined as the dilation of the marker image
    with respect to the mask image iterated until stability.

    The marker image must be less than or equal to the mask image (on a
    pixel by pixel basis).

    Geodesic morphology is described in Chapter 6.2 of Pierre Soille's
    book "Morphological Image Analysis: Principles and Applications",
    Second Edition, Springer, 2003.

    Algorithm implemented in this filter is based on algorithm described
    by Kevin Robinson and Paul F. Whelan in "Efficient Morphological
    Reconstruction: A Downhill Filter", Pattern Recognition Letters,
    Volume 25, Issue 15, November 2004, Pages 1759-1767.

    The algorithm, a description of the transform and some applications
    can be found in "Morphological Grayscale Reconstruction in Image
    Analysis:    Applications and Efficient Algorithms", Luc Vincent,
    IEEE Transactions on image processing, Vol. 2, April 1993.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:  MorphologyImageFilter, GrayscaleDilateImageFilter,
    GrayscaleFunctionDilateImageFilter, BinaryDilateImageFilter,
    ReconstructionByErosionImageFilter,
    OpeningByReconstructionImageFilter,
    ClosingByReconstructionImageFilter, ReconstructionImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_Clone)
    __swig_destroy__ = _itkReconstructionByDilationImageFilterPython.delete_itkReconstructionByDilationImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkReconstructionByDilationImageFilterIUS3IUS3

        Create a new object of the class itkReconstructionByDilationImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkReconstructionByDilationImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkReconstructionByDilationImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkReconstructionByDilationImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkReconstructionByDilationImageFilterIUS3IUS3 in _itkReconstructionByDilationImageFilterPython:
_itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_swigregister(itkReconstructionByDilationImageFilterIUS3IUS3)
itkReconstructionByDilationImageFilterIUS3IUS3___New_orig__ = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3___New_orig__
itkReconstructionByDilationImageFilterIUS3IUS3_cast = _itkReconstructionByDilationImageFilterPython.itkReconstructionByDilationImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def reconstruction_by_dilation_image_filter(*args, **kwargs):
    """Procedural interface for ReconstructionByDilationImageFilter"""
    import itk
    instance = itk.ReconstructionByDilationImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def reconstruction_by_dilation_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ReconstructionByDilationImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ReconstructionByDilationImageFilter.values()[0]
    else:
        filter_object = itk.ReconstructionByDilationImageFilter

    reconstruction_by_dilation_image_filter.__doc__ = filter_object.__doc__
    reconstruction_by_dilation_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    reconstruction_by_dilation_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ReconstructionByDilationImageFilter, itkTemplate.itkTemplate):
        reconstruction_by_dilation_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        reconstruction_by_dilation_image_filter.__doc__ += "\n"
        reconstruction_by_dilation_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        reconstruction_by_dilation_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def reconstruction_image_filter(*args, **kwargs):
    """Procedural interface for ReconstructionImageFilter"""
    import itk
    instance = itk.ReconstructionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def reconstruction_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ReconstructionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ReconstructionImageFilter.values()[0]
    else:
        filter_object = itk.ReconstructionImageFilter

    reconstruction_image_filter.__doc__ = filter_object.__doc__
    reconstruction_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    reconstruction_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ReconstructionImageFilter, itkTemplate.itkTemplate):
        reconstruction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        reconstruction_image_filter.__doc__ += "\n"
        reconstruction_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        reconstruction_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



