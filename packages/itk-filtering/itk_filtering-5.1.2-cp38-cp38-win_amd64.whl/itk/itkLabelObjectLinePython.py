# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLabelMapPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelObjectLinePython
else:
    import _itkLabelObjectLinePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLabelObjectLinePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLabelObjectLinePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
class itkLabelObjectLine2(object):
    r"""


    LabelObjectLine is the line object used in the LabelObject class to
    store the line which are part of the object. A line is formed of and
    index and a length in the dimension 0. It is used in a run-length
    encoding

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkLabelObjectLinePython.delete_itkLabelObjectLine2
    SetIndex = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine2_SetIndex)
    GetIndex = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine2_GetIndex)
    SetLength = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine2_SetLength)
    GetLength = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine2_GetLength)
    HasIndex = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine2_HasIndex)
    IsNextIndex = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine2_IsNextIndex)
    Print = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine2_Print)

    def __init__(self, *args):
        r"""
        __init__(itkLabelObjectLine2 self) -> itkLabelObjectLine2
        __init__(itkLabelObjectLine2 self, itkIndex2 idx, unsigned long long const & length) -> itkLabelObjectLine2
        __init__(itkLabelObjectLine2 self, itkLabelObjectLine2 arg0) -> itkLabelObjectLine2


        LabelObjectLine is the line object used in the LabelObject class to
        store the line which are part of the object. A line is formed of and
        index and a length in the dimension 0. It is used in a run-length
        encoding

        Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
        de Jouy-en-Josas, France.  This implementation was taken from the
        Insight Journal paper:https://hdl.handle.net/1926/584
        orhttp://www.insight-journal.org/browse/publication/176 
        """
        _itkLabelObjectLinePython.itkLabelObjectLine2_swiginit(self, _itkLabelObjectLinePython.new_itkLabelObjectLine2(*args))

# Register itkLabelObjectLine2 in _itkLabelObjectLinePython:
_itkLabelObjectLinePython.itkLabelObjectLine2_swigregister(itkLabelObjectLine2)

class itkLabelObjectLine3(object):
    r"""


    LabelObjectLine is the line object used in the LabelObject class to
    store the line which are part of the object. A line is formed of and
    index and a length in the dimension 0. It is used in a run-length
    encoding

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/1926/584
    orhttp://www.insight-journal.org/browse/publication/176 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _itkLabelObjectLinePython.delete_itkLabelObjectLine3
    SetIndex = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine3_SetIndex)
    GetIndex = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine3_GetIndex)
    SetLength = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine3_SetLength)
    GetLength = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine3_GetLength)
    HasIndex = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine3_HasIndex)
    IsNextIndex = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine3_IsNextIndex)
    Print = _swig_new_instance_method(_itkLabelObjectLinePython.itkLabelObjectLine3_Print)

    def __init__(self, *args):
        r"""
        __init__(itkLabelObjectLine3 self) -> itkLabelObjectLine3
        __init__(itkLabelObjectLine3 self, itkIndex3 idx, unsigned long long const & length) -> itkLabelObjectLine3
        __init__(itkLabelObjectLine3 self, itkLabelObjectLine3 arg0) -> itkLabelObjectLine3


        LabelObjectLine is the line object used in the LabelObject class to
        store the line which are part of the object. A line is formed of and
        index and a length in the dimension 0. It is used in a run-length
        encoding

        Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
        de Jouy-en-Josas, France.  This implementation was taken from the
        Insight Journal paper:https://hdl.handle.net/1926/584
        orhttp://www.insight-journal.org/browse/publication/176 
        """
        _itkLabelObjectLinePython.itkLabelObjectLine3_swiginit(self, _itkLabelObjectLinePython.new_itkLabelObjectLine3(*args))

# Register itkLabelObjectLine3 in _itkLabelObjectLinePython:
_itkLabelObjectLinePython.itkLabelObjectLine3_swigregister(itkLabelObjectLine3)



