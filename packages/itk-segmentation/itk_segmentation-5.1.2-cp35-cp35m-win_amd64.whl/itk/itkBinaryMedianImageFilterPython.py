# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLabelVotingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBinaryMedianImageFilterPython
else:
    import _itkBinaryMedianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBinaryMedianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBinaryMedianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkBinaryMedianImageFilterID2ID2_New():
    return itkBinaryMedianImageFilterID2ID2.New()

class itkBinaryMedianImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterID2ID2
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterID2ID2

        Create a new object of the class itkBinaryMedianImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterID2ID2 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_swigregister(itkBinaryMedianImageFilterID2ID2)
itkBinaryMedianImageFilterID2ID2___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2___New_orig__
itkBinaryMedianImageFilterID2ID2_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID2ID2_cast


def itkBinaryMedianImageFilterID3ID3_New():
    return itkBinaryMedianImageFilterID3ID3.New()

class itkBinaryMedianImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterID3ID3
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterID3ID3

        Create a new object of the class itkBinaryMedianImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterID3ID3 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_swigregister(itkBinaryMedianImageFilterID3ID3)
itkBinaryMedianImageFilterID3ID3___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3___New_orig__
itkBinaryMedianImageFilterID3ID3_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterID3ID3_cast


def itkBinaryMedianImageFilterIF2IF2_New():
    return itkBinaryMedianImageFilterIF2IF2.New()

class itkBinaryMedianImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterIF2IF2
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterIF2IF2

        Create a new object of the class itkBinaryMedianImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterIF2IF2 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_swigregister(itkBinaryMedianImageFilterIF2IF2)
itkBinaryMedianImageFilterIF2IF2___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2___New_orig__
itkBinaryMedianImageFilterIF2IF2_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF2IF2_cast


def itkBinaryMedianImageFilterIF3IF3_New():
    return itkBinaryMedianImageFilterIF3IF3.New()

class itkBinaryMedianImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterIF3IF3
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterIF3IF3

        Create a new object of the class itkBinaryMedianImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterIF3IF3 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_swigregister(itkBinaryMedianImageFilterIF3IF3)
itkBinaryMedianImageFilterIF3IF3___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3___New_orig__
itkBinaryMedianImageFilterIF3IF3_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIF3IF3_cast


def itkBinaryMedianImageFilterISS2ISS2_New():
    return itkBinaryMedianImageFilterISS2ISS2.New()

class itkBinaryMedianImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterISS2ISS2

        Create a new object of the class itkBinaryMedianImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterISS2ISS2 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_swigregister(itkBinaryMedianImageFilterISS2ISS2)
itkBinaryMedianImageFilterISS2ISS2___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2___New_orig__
itkBinaryMedianImageFilterISS2ISS2_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS2ISS2_cast


def itkBinaryMedianImageFilterISS3ISS3_New():
    return itkBinaryMedianImageFilterISS3ISS3.New()

class itkBinaryMedianImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterISS3ISS3

        Create a new object of the class itkBinaryMedianImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterISS3ISS3 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_swigregister(itkBinaryMedianImageFilterISS3ISS3)
itkBinaryMedianImageFilterISS3ISS3___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3___New_orig__
itkBinaryMedianImageFilterISS3ISS3_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterISS3ISS3_cast


def itkBinaryMedianImageFilterIUC2IUC2_New():
    return itkBinaryMedianImageFilterIUC2IUC2.New()

class itkBinaryMedianImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterIUC2IUC2

        Create a new object of the class itkBinaryMedianImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterIUC2IUC2 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_swigregister(itkBinaryMedianImageFilterIUC2IUC2)
itkBinaryMedianImageFilterIUC2IUC2___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2___New_orig__
itkBinaryMedianImageFilterIUC2IUC2_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC2IUC2_cast


def itkBinaryMedianImageFilterIUC3IUC3_New():
    return itkBinaryMedianImageFilterIUC3IUC3.New()

class itkBinaryMedianImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterIUC3IUC3

        Create a new object of the class itkBinaryMedianImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterIUC3IUC3 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_swigregister(itkBinaryMedianImageFilterIUC3IUC3)
itkBinaryMedianImageFilterIUC3IUC3___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3___New_orig__
itkBinaryMedianImageFilterIUC3IUC3_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUC3IUC3_cast


def itkBinaryMedianImageFilterIUS2IUS2_New():
    return itkBinaryMedianImageFilterIUS2IUS2.New()

class itkBinaryMedianImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterIUS2IUS2

        Create a new object of the class itkBinaryMedianImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterIUS2IUS2 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_swigregister(itkBinaryMedianImageFilterIUS2IUS2)
itkBinaryMedianImageFilterIUS2IUS2___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2___New_orig__
itkBinaryMedianImageFilterIUS2IUS2_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS2IUS2_cast


def itkBinaryMedianImageFilterIUS3IUS3_New():
    return itkBinaryMedianImageFilterIUS3IUS3.New()

class itkBinaryMedianImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Applies a version of the median filter optimized for binary images.

    This filter was contributed by Bjorn Hanch Sollie after identifying
    that the generic Median filter performed unnecessary operations when
    the input image is binary.

    This filter computes an image where a given pixel is the median value
    of the pixels in a neighborhood about the corresponding input pixel.
    For the case of binary images the median can be obtained by simply
    counting the neighbors that are foreground.

    A median filter is one of the family of nonlinear filters. It is used
    to smooth an image without being biased by outliers or shot noise.

    See:  Image

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_Clone)
    SetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_GetForegroundValue)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    InputEqualityComparableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_InputEqualityComparableCheck
    
    InputConvertibleToOutputCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    SameDimensionCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_SameDimensionCheck
    
    InputOStreamWritableCheck = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_InputOStreamWritableCheck
    
    __swig_destroy__ = _itkBinaryMedianImageFilterPython.delete_itkBinaryMedianImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkBinaryMedianImageFilterIUS3IUS3

        Create a new object of the class itkBinaryMedianImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBinaryMedianImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBinaryMedianImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBinaryMedianImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBinaryMedianImageFilterIUS3IUS3 in _itkBinaryMedianImageFilterPython:
_itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_swigregister(itkBinaryMedianImageFilterIUS3IUS3)
itkBinaryMedianImageFilterIUS3IUS3___New_orig__ = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3___New_orig__
itkBinaryMedianImageFilterIUS3IUS3_cast = _itkBinaryMedianImageFilterPython.itkBinaryMedianImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def binary_median_image_filter(*args, **kwargs):
    """Procedural interface for BinaryMedianImageFilter"""
    import itk
    instance = itk.BinaryMedianImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def binary_median_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.BinaryMedianImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.BinaryMedianImageFilter.values()[0]
    else:
        filter_object = itk.BinaryMedianImageFilter

    binary_median_image_filter.__doc__ = filter_object.__doc__
    binary_median_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    binary_median_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.BinaryMedianImageFilter, itkTemplate.itkTemplate):
        binary_median_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        binary_median_image_filter.__doc__ += "\n"
        binary_median_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        binary_median_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



