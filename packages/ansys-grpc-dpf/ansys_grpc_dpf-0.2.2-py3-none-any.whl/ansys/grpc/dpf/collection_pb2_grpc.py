# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ansys.grpc.dpf.base_pb2 as base__pb2
import ansys.grpc.dpf.collection_pb2 as collection__pb2
import ansys.grpc.dpf.support_pb2 as support__pb2


class CollectionServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Create = channel.unary_unary(
        '/ansys.api.dpf.collection.v0.CollectionService/Create',
        request_serializer=collection__pb2.CollectionRequest.SerializeToString,
        response_deserializer=collection__pb2.Collection.FromString,
        )
    self.UpdateLabels = channel.unary_unary(
        '/ansys.api.dpf.collection.v0.CollectionService/UpdateLabels',
        request_serializer=collection__pb2.UpdateLabelsRequest.SerializeToString,
        response_deserializer=base__pb2.Empty.FromString,
        )
    self.UpdateEntry = channel.unary_unary(
        '/ansys.api.dpf.collection.v0.CollectionService/UpdateEntry',
        request_serializer=collection__pb2.UpdateRequest.SerializeToString,
        response_deserializer=base__pb2.Empty.FromString,
        )
    self.List = channel.unary_unary(
        '/ansys.api.dpf.collection.v0.CollectionService/List',
        request_serializer=collection__pb2.Collection.SerializeToString,
        response_deserializer=collection__pb2.ListResponse.FromString,
        )
    self.GetEntries = channel.unary_unary(
        '/ansys.api.dpf.collection.v0.CollectionService/GetEntries',
        request_serializer=collection__pb2.EntryRequest.SerializeToString,
        response_deserializer=collection__pb2.GetEntriesResponse.FromString,
        )
    self.GetSupport = channel.unary_unary(
        '/ansys.api.dpf.collection.v0.CollectionService/GetSupport',
        request_serializer=collection__pb2.SupportRequest.SerializeToString,
        response_deserializer=support__pb2.Support.FromString,
        )
    self.Delete = channel.unary_unary(
        '/ansys.api.dpf.collection.v0.CollectionService/Delete',
        request_serializer=collection__pb2.Collection.SerializeToString,
        response_deserializer=base__pb2.Empty.FromString,
        )


class CollectionServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Create(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateLabels(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateEntry(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def List(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetEntries(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSupport(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Delete(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CollectionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Create': grpc.unary_unary_rpc_method_handler(
          servicer.Create,
          request_deserializer=collection__pb2.CollectionRequest.FromString,
          response_serializer=collection__pb2.Collection.SerializeToString,
      ),
      'UpdateLabels': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateLabels,
          request_deserializer=collection__pb2.UpdateLabelsRequest.FromString,
          response_serializer=base__pb2.Empty.SerializeToString,
      ),
      'UpdateEntry': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateEntry,
          request_deserializer=collection__pb2.UpdateRequest.FromString,
          response_serializer=base__pb2.Empty.SerializeToString,
      ),
      'List': grpc.unary_unary_rpc_method_handler(
          servicer.List,
          request_deserializer=collection__pb2.Collection.FromString,
          response_serializer=collection__pb2.ListResponse.SerializeToString,
      ),
      'GetEntries': grpc.unary_unary_rpc_method_handler(
          servicer.GetEntries,
          request_deserializer=collection__pb2.EntryRequest.FromString,
          response_serializer=collection__pb2.GetEntriesResponse.SerializeToString,
      ),
      'GetSupport': grpc.unary_unary_rpc_method_handler(
          servicer.GetSupport,
          request_deserializer=collection__pb2.SupportRequest.FromString,
          response_serializer=support__pb2.Support.SerializeToString,
      ),
      'Delete': grpc.unary_unary_rpc_method_handler(
          servicer.Delete,
          request_deserializer=collection__pb2.Collection.FromString,
          response_serializer=base__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ansys.api.dpf.collection.v0.CollectionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
