# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageGridPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTileImageFilterPython
else:
    import _itkTileImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTileImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTileImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def itkTileImageFilterID2ID2_New():
    return itkTileImageFilterID2ID2.New()

class itkTileImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID2_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID2_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID2_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID2_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID2_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterID2ID2_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterID2ID2_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterID2ID2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterID2ID2
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterID2ID2

        Create a new object of the class itkTileImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterID2ID2 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterID2ID2_swigregister(itkTileImageFilterID2ID2)
itkTileImageFilterID2ID2___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterID2ID2___New_orig__
itkTileImageFilterID2ID2_cast = _itkTileImageFilterPython.itkTileImageFilterID2ID2_cast


def itkTileImageFilterID2ID3_New():
    return itkTileImageFilterID2ID3.New()

class itkTileImageFilterID2ID3(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2ID3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterID2ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID2ID3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterID2ID3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterID2ID3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterID2ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterID2ID3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterID2ID3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterID2ID3

        Create a new object of the class itkTileImageFilterID2ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterID2ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterID2ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterID2ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterID2ID3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterID2ID3_swigregister(itkTileImageFilterID2ID3)
itkTileImageFilterID2ID3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterID2ID3___New_orig__
itkTileImageFilterID2ID3_cast = _itkTileImageFilterPython.itkTileImageFilterID2ID3_cast


def itkTileImageFilterID3ID3_New():
    return itkTileImageFilterID3ID3.New()

class itkTileImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID3ID3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID3ID3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID3ID3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID3ID3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterID3ID3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterID3ID3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterID3ID3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterID3ID3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterID3ID3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterID3ID3

        Create a new object of the class itkTileImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterID3ID3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterID3ID3_swigregister(itkTileImageFilterID3ID3)
itkTileImageFilterID3ID3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterID3ID3___New_orig__
itkTileImageFilterID3ID3_cast = _itkTileImageFilterPython.itkTileImageFilterID3ID3_cast


def itkTileImageFilterIF2IF2_New():
    return itkTileImageFilterIF2IF2.New()

class itkTileImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF2_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF2_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF2_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF2_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF2_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIF2IF2_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIF2IF2_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIF2IF2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIF2IF2
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIF2IF2

        Create a new object of the class itkTileImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIF2IF2 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIF2IF2_swigregister(itkTileImageFilterIF2IF2)
itkTileImageFilterIF2IF2___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIF2IF2___New_orig__
itkTileImageFilterIF2IF2_cast = _itkTileImageFilterPython.itkTileImageFilterIF2IF2_cast


def itkTileImageFilterIF2IF3_New():
    return itkTileImageFilterIF2IF3.New()

class itkTileImageFilterIF2IF3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2IF3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIF2IF3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIF2IF3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIF2IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIF2IF3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIF2IF3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIF2IF3

        Create a new object of the class itkTileImageFilterIF2IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIF2IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIF2IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIF2IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIF2IF3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIF2IF3_swigregister(itkTileImageFilterIF2IF3)
itkTileImageFilterIF2IF3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIF2IF3___New_orig__
itkTileImageFilterIF2IF3_cast = _itkTileImageFilterPython.itkTileImageFilterIF2IF3_cast


def itkTileImageFilterIF3IF3_New():
    return itkTileImageFilterIF3IF3.New()

class itkTileImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF3IF3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF3IF3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF3IF3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF3IF3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIF3IF3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIF3IF3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIF3IF3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIF3IF3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIF3IF3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIF3IF3

        Create a new object of the class itkTileImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIF3IF3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIF3IF3_swigregister(itkTileImageFilterIF3IF3)
itkTileImageFilterIF3IF3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIF3IF3___New_orig__
itkTileImageFilterIF3IF3_cast = _itkTileImageFilterPython.itkTileImageFilterIF3IF3_cast


def itkTileImageFilterISS2ISS2_New():
    return itkTileImageFilterISS2ISS2.New()

class itkTileImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS2_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS2_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS2_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS2_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS2_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterISS2ISS2_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterISS2ISS2_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterISS2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterISS2ISS2

        Create a new object of the class itkTileImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterISS2ISS2 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterISS2ISS2_swigregister(itkTileImageFilterISS2ISS2)
itkTileImageFilterISS2ISS2___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterISS2ISS2___New_orig__
itkTileImageFilterISS2ISS2_cast = _itkTileImageFilterPython.itkTileImageFilterISS2ISS2_cast


def itkTileImageFilterISS2ISS3_New():
    return itkTileImageFilterISS2ISS3.New()

class itkTileImageFilterISS2ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2ISS3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterISS2ISS3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterISS2ISS3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterISS2ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterISS2ISS3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterISS2ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterISS2ISS3

        Create a new object of the class itkTileImageFilterISS2ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterISS2ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterISS2ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterISS2ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterISS2ISS3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterISS2ISS3_swigregister(itkTileImageFilterISS2ISS3)
itkTileImageFilterISS2ISS3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterISS2ISS3___New_orig__
itkTileImageFilterISS2ISS3_cast = _itkTileImageFilterPython.itkTileImageFilterISS2ISS3_cast


def itkTileImageFilterISS3ISS3_New():
    return itkTileImageFilterISS3ISS3.New()

class itkTileImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS3ISS3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS3ISS3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS3ISS3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS3ISS3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterISS3ISS3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterISS3ISS3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterISS3ISS3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterISS3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterISS3ISS3

        Create a new object of the class itkTileImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterISS3ISS3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterISS3ISS3_swigregister(itkTileImageFilterISS3ISS3)
itkTileImageFilterISS3ISS3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterISS3ISS3___New_orig__
itkTileImageFilterISS3ISS3_cast = _itkTileImageFilterPython.itkTileImageFilterISS3ISS3_cast


def itkTileImageFilterIUC2IUC2_New():
    return itkTileImageFilterIUC2IUC2.New()

class itkTileImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIUC2IUC2

        Create a new object of the class itkTileImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIUC2IUC2 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_swigregister(itkTileImageFilterIUC2IUC2)
itkTileImageFilterIUC2IUC2___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC2___New_orig__
itkTileImageFilterIUC2IUC2_cast = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC2_cast


def itkTileImageFilterIUC2IUC3_New():
    return itkTileImageFilterIUC2IUC3.New()

class itkTileImageFilterIUC2IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2IUC3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIUC2IUC3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIUC2IUC3

        Create a new object of the class itkTileImageFilterIUC2IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIUC2IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIUC2IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIUC2IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIUC2IUC3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_swigregister(itkTileImageFilterIUC2IUC3)
itkTileImageFilterIUC2IUC3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC3___New_orig__
itkTileImageFilterIUC2IUC3_cast = _itkTileImageFilterPython.itkTileImageFilterIUC2IUC3_cast


def itkTileImageFilterIUC3IUC3_New():
    return itkTileImageFilterIUC3IUC3.New()

class itkTileImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIUC3IUC3

        Create a new object of the class itkTileImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIUC3IUC3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_swigregister(itkTileImageFilterIUC3IUC3)
itkTileImageFilterIUC3IUC3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIUC3IUC3___New_orig__
itkTileImageFilterIUC3IUC3_cast = _itkTileImageFilterPython.itkTileImageFilterIUC3IUC3_cast


def itkTileImageFilterIUS2IUS2_New():
    return itkTileImageFilterIUS2IUS2.New()

class itkTileImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIUS2IUS2

        Create a new object of the class itkTileImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIUS2IUS2 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_swigregister(itkTileImageFilterIUS2IUS2)
itkTileImageFilterIUS2IUS2___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS2___New_orig__
itkTileImageFilterIUS2IUS2_cast = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS2_cast


def itkTileImageFilterIUS2IUS3_New():
    return itkTileImageFilterIUS2IUS3.New()

class itkTileImageFilterIUS2IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2IUS3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIUS2IUS3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIUS2IUS3

        Create a new object of the class itkTileImageFilterIUS2IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIUS2IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIUS2IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIUS2IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIUS2IUS3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_swigregister(itkTileImageFilterIUS2IUS3)
itkTileImageFilterIUS2IUS3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS3___New_orig__
itkTileImageFilterIUS2IUS3_cast = _itkTileImageFilterPython.itkTileImageFilterIUS2IUS3_cast


def itkTileImageFilterIUS3IUS3_New():
    return itkTileImageFilterIUS3IUS3.New()

class itkTileImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Tile multiple input images into a single output image.

    This filter will tile multiple images using a user-specified layout.
    The tile sizes will be large enough to accommodate the largest image
    for each tile. The layout is specified with the SetLayout method. The
    layout has the same dimension as the output image. If all entries of
    the layout are positive, the tiled output will contain the exact
    number of tiles. If the layout contains a 0 in the last dimension, the
    filter will compute a size that will accommodate all of the images.
    Empty tiles are filled with the value specified with the SetDefault
    value method. The input images must have a dimension less than or
    equal to the output image. The output image have a larger dimension
    than the input images. This filter can be used to create a volume from
    a series of inputs by specifying a layout of 1,1,0.

    example{Filtering/ImageGrid/Stack2DImagesInto3DImage,Stack 2D Images
    Into 3D Image} example{Filtering/ImageGrid/TileImagesSideBySide,Tile
    Images Side By Side} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_Clone)
    SetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_SetLayout)
    GetLayout = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_GetLayout)
    SetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_SetDefaultPixelValue)
    GetDefaultPixelValue = _swig_new_instance_method(_itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_GetDefaultPixelValue)
    OutputEqualityComparableCheck = _itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_OutputEqualityComparableCheck
    
    SameTypeCheck = _itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_SameTypeCheck
    
    OutputOStreamWritableCheck = _itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkTileImageFilterPython.delete_itkTileImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkTileImageFilterIUS3IUS3

        Create a new object of the class itkTileImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTileImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkTileImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkTileImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTileImageFilterIUS3IUS3 in _itkTileImageFilterPython:
_itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_swigregister(itkTileImageFilterIUS3IUS3)
itkTileImageFilterIUS3IUS3___New_orig__ = _itkTileImageFilterPython.itkTileImageFilterIUS3IUS3___New_orig__
itkTileImageFilterIUS3IUS3_cast = _itkTileImageFilterPython.itkTileImageFilterIUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def tile_image_filter(*args, **kwargs):
    """Procedural interface for TileImageFilter"""
    import itk
    instance = itk.TileImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def tile_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TileImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.TileImageFilter.values()[0]
    else:
        filter_object = itk.TileImageFilter

    tile_image_filter.__doc__ = filter_object.__doc__
    tile_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    tile_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.TileImageFilter, itkTemplate.itkTemplate):
        tile_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        tile_image_filter.__doc__ += "\n"
        tile_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        tile_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



