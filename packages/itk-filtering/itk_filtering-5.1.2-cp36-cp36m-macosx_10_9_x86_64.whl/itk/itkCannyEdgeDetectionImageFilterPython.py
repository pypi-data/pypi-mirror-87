# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFeaturePython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCannyEdgeDetectionImageFilterPython
else:
    import _itkCannyEdgeDetectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkCannyEdgeDetectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkCannyEdgeDetectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkCannyEdgeDetectionImageFilterID2ID2_New():
    return itkCannyEdgeDetectionImageFilterID2ID2.New()

class itkCannyEdgeDetectionImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    This filter is an implementation of a Canny edge detector for scalar-
    valued images.

    Based on John Canny's paper "A Computational Approach  to Edge
    Detection"(IEEE Transactions on Pattern Analysis and Machine
    Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
    steps used in the edge-detection scheme: (1) Smooth the input image
    with Gaussian filter. (2) Calculate the second directional derivatives
    of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
    of 2nd derivative are found, and the sign of third derivative is used
    to find the correct extrema. (4) The hysteresis thresholding is
    applied to the gradient magnitude (multiplied with zero-crossings) of
    the smoothed image to find and link edges.

    Inputs and Outputs The input to this filter should be a scalar, real-
    valued Itk image of arbitrary dimension. The output should also be a
    scalar, real-value Itk image of the same dimensionality. Parameters
    There are four parameters for this filter that control the sub-filters
    used by the algorithm.

    Variance and Maximum error are used in the Gaussian smoothing of the
    input image. See itkDiscreteGaussianImageFilter for information on
    these parameters.

    Threshold is the lowest allowed value in the output image. Its data
    type is the same as the data type of the output image. Any values
    below the Threshold level will be replaced with the OutsideValue
    parameter value, whose default is zero. Todo Edge-linking will be
    added when an itk connected component labeling algorithm is available.

    See:  DiscreteGaussianImageFilter

    See:   ZeroCrossingImageFilter

    See:  ThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_Clone)
    GetVariance = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetMaximumError)
    SetVariance = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetMaximumError)
    SetUpperThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetUpperThreshold)
    GetUpperThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetUpperThreshold)
    SetLowerThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SetLowerThreshold)
    GetLowerThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetLowerThreshold)
    GetNonMaximumSuppressionImage = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_GetNonMaximumSuppressionImage)
    InputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    SameDimensionCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_SameDimensionCheck
    
    InputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_InputIsFloatingPointCheck
    
    OutputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_OutputIsFloatingPointCheck
    
    __swig_destroy__ = _itkCannyEdgeDetectionImageFilterPython.delete_itkCannyEdgeDetectionImageFilterID2ID2
    cast = _swig_new_static_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkCannyEdgeDetectionImageFilterID2ID2

        Create a new object of the class itkCannyEdgeDetectionImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannyEdgeDetectionImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCannyEdgeDetectionImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCannyEdgeDetectionImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCannyEdgeDetectionImageFilterID2ID2 in _itkCannyEdgeDetectionImageFilterPython:
_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_swigregister(itkCannyEdgeDetectionImageFilterID2ID2)
itkCannyEdgeDetectionImageFilterID2ID2___New_orig__ = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2___New_orig__
itkCannyEdgeDetectionImageFilterID2ID2_cast = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID2ID2_cast


def itkCannyEdgeDetectionImageFilterID3ID3_New():
    return itkCannyEdgeDetectionImageFilterID3ID3.New()

class itkCannyEdgeDetectionImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    This filter is an implementation of a Canny edge detector for scalar-
    valued images.

    Based on John Canny's paper "A Computational Approach  to Edge
    Detection"(IEEE Transactions on Pattern Analysis and Machine
    Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
    steps used in the edge-detection scheme: (1) Smooth the input image
    with Gaussian filter. (2) Calculate the second directional derivatives
    of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
    of 2nd derivative are found, and the sign of third derivative is used
    to find the correct extrema. (4) The hysteresis thresholding is
    applied to the gradient magnitude (multiplied with zero-crossings) of
    the smoothed image to find and link edges.

    Inputs and Outputs The input to this filter should be a scalar, real-
    valued Itk image of arbitrary dimension. The output should also be a
    scalar, real-value Itk image of the same dimensionality. Parameters
    There are four parameters for this filter that control the sub-filters
    used by the algorithm.

    Variance and Maximum error are used in the Gaussian smoothing of the
    input image. See itkDiscreteGaussianImageFilter for information on
    these parameters.

    Threshold is the lowest allowed value in the output image. Its data
    type is the same as the data type of the output image. Any values
    below the Threshold level will be replaced with the OutsideValue
    parameter value, whose default is zero. Todo Edge-linking will be
    added when an itk connected component labeling algorithm is available.

    See:  DiscreteGaussianImageFilter

    See:   ZeroCrossingImageFilter

    See:  ThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_Clone)
    GetVariance = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetMaximumError)
    SetVariance = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetMaximumError)
    SetUpperThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetUpperThreshold)
    GetUpperThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetUpperThreshold)
    SetLowerThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SetLowerThreshold)
    GetLowerThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetLowerThreshold)
    GetNonMaximumSuppressionImage = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_GetNonMaximumSuppressionImage)
    InputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    SameDimensionCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_SameDimensionCheck
    
    InputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_InputIsFloatingPointCheck
    
    OutputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_OutputIsFloatingPointCheck
    
    __swig_destroy__ = _itkCannyEdgeDetectionImageFilterPython.delete_itkCannyEdgeDetectionImageFilterID3ID3
    cast = _swig_new_static_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkCannyEdgeDetectionImageFilterID3ID3

        Create a new object of the class itkCannyEdgeDetectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannyEdgeDetectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCannyEdgeDetectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCannyEdgeDetectionImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCannyEdgeDetectionImageFilterID3ID3 in _itkCannyEdgeDetectionImageFilterPython:
_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_swigregister(itkCannyEdgeDetectionImageFilterID3ID3)
itkCannyEdgeDetectionImageFilterID3ID3___New_orig__ = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3___New_orig__
itkCannyEdgeDetectionImageFilterID3ID3_cast = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterID3ID3_cast


def itkCannyEdgeDetectionImageFilterIF2IF2_New():
    return itkCannyEdgeDetectionImageFilterIF2IF2.New()

class itkCannyEdgeDetectionImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    This filter is an implementation of a Canny edge detector for scalar-
    valued images.

    Based on John Canny's paper "A Computational Approach  to Edge
    Detection"(IEEE Transactions on Pattern Analysis and Machine
    Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
    steps used in the edge-detection scheme: (1) Smooth the input image
    with Gaussian filter. (2) Calculate the second directional derivatives
    of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
    of 2nd derivative are found, and the sign of third derivative is used
    to find the correct extrema. (4) The hysteresis thresholding is
    applied to the gradient magnitude (multiplied with zero-crossings) of
    the smoothed image to find and link edges.

    Inputs and Outputs The input to this filter should be a scalar, real-
    valued Itk image of arbitrary dimension. The output should also be a
    scalar, real-value Itk image of the same dimensionality. Parameters
    There are four parameters for this filter that control the sub-filters
    used by the algorithm.

    Variance and Maximum error are used in the Gaussian smoothing of the
    input image. See itkDiscreteGaussianImageFilter for information on
    these parameters.

    Threshold is the lowest allowed value in the output image. Its data
    type is the same as the data type of the output image. Any values
    below the Threshold level will be replaced with the OutsideValue
    parameter value, whose default is zero. Todo Edge-linking will be
    added when an itk connected component labeling algorithm is available.

    See:  DiscreteGaussianImageFilter

    See:   ZeroCrossingImageFilter

    See:  ThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_Clone)
    GetVariance = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetMaximumError)
    SetVariance = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetMaximumError)
    SetUpperThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetUpperThreshold)
    GetUpperThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetUpperThreshold)
    SetLowerThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SetLowerThreshold)
    GetLowerThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetLowerThreshold)
    GetNonMaximumSuppressionImage = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_GetNonMaximumSuppressionImage)
    InputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    SameDimensionCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_SameDimensionCheck
    
    InputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_InputIsFloatingPointCheck
    
    OutputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_OutputIsFloatingPointCheck
    
    __swig_destroy__ = _itkCannyEdgeDetectionImageFilterPython.delete_itkCannyEdgeDetectionImageFilterIF2IF2
    cast = _swig_new_static_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkCannyEdgeDetectionImageFilterIF2IF2

        Create a new object of the class itkCannyEdgeDetectionImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannyEdgeDetectionImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCannyEdgeDetectionImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCannyEdgeDetectionImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCannyEdgeDetectionImageFilterIF2IF2 in _itkCannyEdgeDetectionImageFilterPython:
_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_swigregister(itkCannyEdgeDetectionImageFilterIF2IF2)
itkCannyEdgeDetectionImageFilterIF2IF2___New_orig__ = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2___New_orig__
itkCannyEdgeDetectionImageFilterIF2IF2_cast = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF2IF2_cast


def itkCannyEdgeDetectionImageFilterIF3IF3_New():
    return itkCannyEdgeDetectionImageFilterIF3IF3.New()

class itkCannyEdgeDetectionImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    This filter is an implementation of a Canny edge detector for scalar-
    valued images.

    Based on John Canny's paper "A Computational Approach  to Edge
    Detection"(IEEE Transactions on Pattern Analysis and Machine
    Intelligence, Vol. PAMI-8, No.6, November 1986), there are four major
    steps used in the edge-detection scheme: (1) Smooth the input image
    with Gaussian filter. (2) Calculate the second directional derivatives
    of the smoothed image. (3) Non-Maximum Suppression: the zero-crossings
    of 2nd derivative are found, and the sign of third derivative is used
    to find the correct extrema. (4) The hysteresis thresholding is
    applied to the gradient magnitude (multiplied with zero-crossings) of
    the smoothed image to find and link edges.

    Inputs and Outputs The input to this filter should be a scalar, real-
    valued Itk image of arbitrary dimension. The output should also be a
    scalar, real-value Itk image of the same dimensionality. Parameters
    There are four parameters for this filter that control the sub-filters
    used by the algorithm.

    Variance and Maximum error are used in the Gaussian smoothing of the
    input image. See itkDiscreteGaussianImageFilter for information on
    these parameters.

    Threshold is the lowest allowed value in the output image. Its data
    type is the same as the data type of the output image. Any values
    below the Threshold level will be replaced with the OutsideValue
    parameter value, whose default is zero. Todo Edge-linking will be
    added when an itk connected component labeling algorithm is available.

    See:  DiscreteGaussianImageFilter

    See:   ZeroCrossingImageFilter

    See:  ThresholdImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_Clone)
    GetVariance = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetVariance)
    GetMaximumError = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetMaximumError)
    SetVariance = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetVariance)
    SetMaximumError = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetMaximumError)
    SetUpperThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetUpperThreshold)
    GetUpperThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetUpperThreshold)
    SetLowerThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SetLowerThreshold)
    GetLowerThreshold = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetLowerThreshold)
    GetNonMaximumSuppressionImage = _swig_new_instance_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_GetNonMaximumSuppressionImage)
    InputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    SameDimensionCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_SameDimensionCheck
    
    InputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_InputIsFloatingPointCheck
    
    OutputIsFloatingPointCheck = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_OutputIsFloatingPointCheck
    
    __swig_destroy__ = _itkCannyEdgeDetectionImageFilterPython.delete_itkCannyEdgeDetectionImageFilterIF3IF3
    cast = _swig_new_static_method(_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkCannyEdgeDetectionImageFilterIF3IF3

        Create a new object of the class itkCannyEdgeDetectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCannyEdgeDetectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCannyEdgeDetectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCannyEdgeDetectionImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCannyEdgeDetectionImageFilterIF3IF3 in _itkCannyEdgeDetectionImageFilterPython:
_itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_swigregister(itkCannyEdgeDetectionImageFilterIF3IF3)
itkCannyEdgeDetectionImageFilterIF3IF3___New_orig__ = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3___New_orig__
itkCannyEdgeDetectionImageFilterIF3IF3_cast = _itkCannyEdgeDetectionImageFilterPython.itkCannyEdgeDetectionImageFilterIF3IF3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def canny_edge_detection_image_filter(*args, **kwargs):
    """Procedural interface for CannyEdgeDetectionImageFilter"""
    import itk
    instance = itk.CannyEdgeDetectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def canny_edge_detection_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.CannyEdgeDetectionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.CannyEdgeDetectionImageFilter.values()[0]
    else:
        filter_object = itk.CannyEdgeDetectionImageFilter

    canny_edge_detection_image_filter.__doc__ = filter_object.__doc__
    canny_edge_detection_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    canny_edge_detection_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.CannyEdgeDetectionImageFilter, itkTemplate.itkTemplate):
        canny_edge_detection_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        canny_edge_detection_image_filter.__doc__ += "\n"
        canny_edge_detection_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        canny_edge_detection_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



