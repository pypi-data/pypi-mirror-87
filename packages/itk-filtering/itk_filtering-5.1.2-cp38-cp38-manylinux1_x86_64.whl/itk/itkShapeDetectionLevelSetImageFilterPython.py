# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkShapeDetectionLevelSetImageFilterPython
else:
    import _itkShapeDetectionLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkShapeDetectionLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkShapeDetectionLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSegmentationLevelSetImageFilterPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkLevelSetFunctionPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkCovariantVectorPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkShapeDetectionLevelSetImageFilterID2ID2D_New():
    return itkShapeDetectionLevelSetImageFilterID2ID2D.New()

class itkShapeDetectionLevelSetImageFilterID2ID2D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2ID2D):
    r"""


    Segments structures in images based on a user supplied edge potential
    map.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ShapeDetectionLevelSetFunction class contain additional information
    necessary to gain full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. An
    initial contour is propagated outwards (or inwards) until it
    ''sticks'' to the shape boundaries. This is done by using a level set
    speed function based on a user supplied edge potential map. This
    approach for segmentation follows that of Malladi et al (1995). INPUTS
    This filter requires two inputs. The first input is a initial level
    set. The initial level set is a real image which contains the initial
    contour/surface contour/surface is typically used. Note that for this
    algorithm the initial contour has to be wholly within (or wholly
    outside) the structure to be segmented.

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute  \\[ g(I) = 1 / ( 1 + | (\\nabla * G)(I)|
    ) \\] \\[ g(I) = \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  The smoothness of the resulting contour/surface can be
    adjusted using a combination of PropagationScaling and
    CurvatureScaling parameters. The larger the CurvatureScaling
    parameter, the smoother the resulting contour. The CurvatureScaling
    parameter should be non-negative for proper operation of this
    algorithm. To follow the implementation in Malladi et al paper, set
    the PropagtionScaling to $\\pm 1.0$ and CurvatureScaling to $
    \\epsilon $.

    Note that there is no advection term for this filter. Setting the
    advection scaling will have no effect.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    "Shape Modeling with Front Propagation: A Level Set Approach", R.
    Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
    Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
    1995

    See:   SegmentationLevelSetImageFilter

    See:  ShapeDetectionLevelSetFunction

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_Clone)
    __swig_destroy__ = _itkShapeDetectionLevelSetImageFilterPython.delete_itkShapeDetectionLevelSetImageFilterID2ID2D
    cast = _swig_new_static_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_cast)

    def New(*args, **kargs):
        """New() -> itkShapeDetectionLevelSetImageFilterID2ID2D

        Create a new object of the class itkShapeDetectionLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeDetectionLevelSetImageFilterID2ID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapeDetectionLevelSetImageFilterID2ID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapeDetectionLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapeDetectionLevelSetImageFilterID2ID2D in _itkShapeDetectionLevelSetImageFilterPython:
_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_swigregister(itkShapeDetectionLevelSetImageFilterID2ID2D)
itkShapeDetectionLevelSetImageFilterID2ID2D___New_orig__ = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D___New_orig__
itkShapeDetectionLevelSetImageFilterID2ID2D_cast = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID2ID2D_cast


def itkShapeDetectionLevelSetImageFilterID3ID3D_New():
    return itkShapeDetectionLevelSetImageFilterID3ID3D.New()

class itkShapeDetectionLevelSetImageFilterID3ID3D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3ID3D):
    r"""


    Segments structures in images based on a user supplied edge potential
    map.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ShapeDetectionLevelSetFunction class contain additional information
    necessary to gain full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. An
    initial contour is propagated outwards (or inwards) until it
    ''sticks'' to the shape boundaries. This is done by using a level set
    speed function based on a user supplied edge potential map. This
    approach for segmentation follows that of Malladi et al (1995). INPUTS
    This filter requires two inputs. The first input is a initial level
    set. The initial level set is a real image which contains the initial
    contour/surface contour/surface is typically used. Note that for this
    algorithm the initial contour has to be wholly within (or wholly
    outside) the structure to be segmented.

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute  \\[ g(I) = 1 / ( 1 + | (\\nabla * G)(I)|
    ) \\] \\[ g(I) = \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  The smoothness of the resulting contour/surface can be
    adjusted using a combination of PropagationScaling and
    CurvatureScaling parameters. The larger the CurvatureScaling
    parameter, the smoother the resulting contour. The CurvatureScaling
    parameter should be non-negative for proper operation of this
    algorithm. To follow the implementation in Malladi et al paper, set
    the PropagtionScaling to $\\pm 1.0$ and CurvatureScaling to $
    \\epsilon $.

    Note that there is no advection term for this filter. Setting the
    advection scaling will have no effect.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    "Shape Modeling with Front Propagation: A Level Set Approach", R.
    Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
    Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
    1995

    See:   SegmentationLevelSetImageFilter

    See:  ShapeDetectionLevelSetFunction

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_Clone)
    __swig_destroy__ = _itkShapeDetectionLevelSetImageFilterPython.delete_itkShapeDetectionLevelSetImageFilterID3ID3D
    cast = _swig_new_static_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_cast)

    def New(*args, **kargs):
        """New() -> itkShapeDetectionLevelSetImageFilterID3ID3D

        Create a new object of the class itkShapeDetectionLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeDetectionLevelSetImageFilterID3ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapeDetectionLevelSetImageFilterID3ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapeDetectionLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapeDetectionLevelSetImageFilterID3ID3D in _itkShapeDetectionLevelSetImageFilterPython:
_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_swigregister(itkShapeDetectionLevelSetImageFilterID3ID3D)
itkShapeDetectionLevelSetImageFilterID3ID3D___New_orig__ = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D___New_orig__
itkShapeDetectionLevelSetImageFilterID3ID3D_cast = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterID3ID3D_cast


def itkShapeDetectionLevelSetImageFilterIF2IF2F_New():
    return itkShapeDetectionLevelSetImageFilterIF2IF2F.New()

class itkShapeDetectionLevelSetImageFilterIF2IF2F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IF2F):
    r"""


    Segments structures in images based on a user supplied edge potential
    map.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ShapeDetectionLevelSetFunction class contain additional information
    necessary to gain full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. An
    initial contour is propagated outwards (or inwards) until it
    ''sticks'' to the shape boundaries. This is done by using a level set
    speed function based on a user supplied edge potential map. This
    approach for segmentation follows that of Malladi et al (1995). INPUTS
    This filter requires two inputs. The first input is a initial level
    set. The initial level set is a real image which contains the initial
    contour/surface contour/surface is typically used. Note that for this
    algorithm the initial contour has to be wholly within (or wholly
    outside) the structure to be segmented.

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute  \\[ g(I) = 1 / ( 1 + | (\\nabla * G)(I)|
    ) \\] \\[ g(I) = \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  The smoothness of the resulting contour/surface can be
    adjusted using a combination of PropagationScaling and
    CurvatureScaling parameters. The larger the CurvatureScaling
    parameter, the smoother the resulting contour. The CurvatureScaling
    parameter should be non-negative for proper operation of this
    algorithm. To follow the implementation in Malladi et al paper, set
    the PropagtionScaling to $\\pm 1.0$ and CurvatureScaling to $
    \\epsilon $.

    Note that there is no advection term for this filter. Setting the
    advection scaling will have no effect.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    "Shape Modeling with Front Propagation: A Level Set Approach", R.
    Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
    Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
    1995

    See:   SegmentationLevelSetImageFilter

    See:  ShapeDetectionLevelSetFunction

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F___New_orig__)
    Clone = _swig_new_instance_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_Clone)
    __swig_destroy__ = _itkShapeDetectionLevelSetImageFilterPython.delete_itkShapeDetectionLevelSetImageFilterIF2IF2F
    cast = _swig_new_static_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_cast)

    def New(*args, **kargs):
        """New() -> itkShapeDetectionLevelSetImageFilterIF2IF2F

        Create a new object of the class itkShapeDetectionLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeDetectionLevelSetImageFilterIF2IF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapeDetectionLevelSetImageFilterIF2IF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapeDetectionLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapeDetectionLevelSetImageFilterIF2IF2F in _itkShapeDetectionLevelSetImageFilterPython:
_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_swigregister(itkShapeDetectionLevelSetImageFilterIF2IF2F)
itkShapeDetectionLevelSetImageFilterIF2IF2F___New_orig__ = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F___New_orig__
itkShapeDetectionLevelSetImageFilterIF2IF2F_cast = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF2IF2F_cast


def itkShapeDetectionLevelSetImageFilterIF3IF3F_New():
    return itkShapeDetectionLevelSetImageFilterIF3IF3F.New()

class itkShapeDetectionLevelSetImageFilterIF3IF3F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IF3F):
    r"""


    Segments structures in images based on a user supplied edge potential
    map.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ShapeDetectionLevelSetFunction class contain additional information
    necessary to gain full understanding of how to use this filter.
    OVERVIEW This class is a level set method segmentation filter. An
    initial contour is propagated outwards (or inwards) until it
    ''sticks'' to the shape boundaries. This is done by using a level set
    speed function based on a user supplied edge potential map. This
    approach for segmentation follows that of Malladi et al (1995). INPUTS
    This filter requires two inputs. The first input is a initial level
    set. The initial level set is a real image which contains the initial
    contour/surface contour/surface is typically used. Note that for this
    algorithm the initial contour has to be wholly within (or wholly
    outside) the structure to be segmented.

    The second input is the feature image. For this filter, this is the
    edge potential map. General characteristics of an edge potential map
    is that it has values close to zero in regions near the edges and
    values close to one inside the shape itself. Typically, the edge
    potential map is compute  \\[ g(I) = 1 / ( 1 + | (\\nabla * G)(I)|
    ) \\] \\[ g(I) = \\exp^{-|(\\nabla * G)(I)|} \\]

    where $ I $ is image intensity and $ (\\nabla * G) $ is the
    derivative of Gaussian operator.

    See SegmentationLevelSetImageFilter and SparseFieldLevelSetImageFilter
    for more information on Inputs. PARAMETERS The PropagationScaling
    parameter can be used to switch from propagation outwards (POSITIVE
    scaling parameter) versus propagating inwards (NEGATIVE scaling
    parameter).  The smoothness of the resulting contour/surface can be
    adjusted using a combination of PropagationScaling and
    CurvatureScaling parameters. The larger the CurvatureScaling
    parameter, the smoother the resulting contour. The CurvatureScaling
    parameter should be non-negative for proper operation of this
    algorithm. To follow the implementation in Malladi et al paper, set
    the PropagtionScaling to $\\pm 1.0$ and CurvatureScaling to $
    \\epsilon $.

    Note that there is no advection term for this filter. Setting the
    advection scaling will have no effect.

    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Negative values in the output image represent the inside of the
    segmented region and positive values in the image represent the
    outside of the segmented region. The zero crossings of the image
    correspond to the position of the propagating front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. REFERENCES

    "Shape Modeling with Front Propagation: A Level Set Approach", R.
    Malladi, J. A. Sethian and B. C. Vermuri. IEEE Trans. on Pattern
    Analysis and Machine Intelligence, Vol 17, No. 2, pp 158-174, February
    1995

    See:   SegmentationLevelSetImageFilter

    See:  ShapeDetectionLevelSetFunction

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F___New_orig__)
    Clone = _swig_new_instance_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_Clone)
    __swig_destroy__ = _itkShapeDetectionLevelSetImageFilterPython.delete_itkShapeDetectionLevelSetImageFilterIF3IF3F
    cast = _swig_new_static_method(_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_cast)

    def New(*args, **kargs):
        """New() -> itkShapeDetectionLevelSetImageFilterIF3IF3F

        Create a new object of the class itkShapeDetectionLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkShapeDetectionLevelSetImageFilterIF3IF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkShapeDetectionLevelSetImageFilterIF3IF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkShapeDetectionLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkShapeDetectionLevelSetImageFilterIF3IF3F in _itkShapeDetectionLevelSetImageFilterPython:
_itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_swigregister(itkShapeDetectionLevelSetImageFilterIF3IF3F)
itkShapeDetectionLevelSetImageFilterIF3IF3F___New_orig__ = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F___New_orig__
itkShapeDetectionLevelSetImageFilterIF3IF3F_cast = _itkShapeDetectionLevelSetImageFilterPython.itkShapeDetectionLevelSetImageFilterIF3IF3F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def shape_detection_level_set_image_filter(*args, **kwargs):
    """Procedural interface for ShapeDetectionLevelSetImageFilter"""
    import itk
    instance = itk.ShapeDetectionLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def shape_detection_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ShapeDetectionLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ShapeDetectionLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.ShapeDetectionLevelSetImageFilter

    shape_detection_level_set_image_filter.__doc__ = filter_object.__doc__
    shape_detection_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    shape_detection_level_set_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ShapeDetectionLevelSetImageFilter, itkTemplate.itkTemplate):
        shape_detection_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        shape_detection_level_set_image_filter.__doc__ += "\n"
        shape_detection_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        shape_detection_level_set_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



