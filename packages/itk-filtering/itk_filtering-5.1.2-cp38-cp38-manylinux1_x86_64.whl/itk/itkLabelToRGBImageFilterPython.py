# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageFusionPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelToRGBImageFilterPython
else:
    import _itkLabelToRGBImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLabelToRGBImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLabelToRGBImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImagePython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def itkLabelToRGBImageFilterISS2IRGBUC2_Superclass_New():
    return itkLabelToRGBImageFilterISS2IRGBUC2_Superclass.New()

class itkLabelToRGBImageFilterISS2IRGBUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS2IRGBUC2):
    r"""Proxy of C++ itkLabelToRGBImageFilterISS2IRGBUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterISS2IRGBUC2_Superclass
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterISS2IRGBUC2_Superclass

        Create a new object of the class itkLabelToRGBImageFilterISS2IRGBUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterISS2IRGBUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterISS2IRGBUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterISS2IRGBUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterISS2IRGBUC2_Superclass in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Superclass_swigregister(itkLabelToRGBImageFilterISS2IRGBUC2_Superclass)
itkLabelToRGBImageFilterISS2IRGBUC2_Superclass___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Superclass___New_orig__
itkLabelToRGBImageFilterISS2IRGBUC2_Superclass_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Superclass_cast


def itkLabelToRGBImageFilterISS3IRGBUC3_Superclass_New():
    return itkLabelToRGBImageFilterISS3IRGBUC3_Superclass.New()

class itkLabelToRGBImageFilterISS3IRGBUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterISS3IRGBUC3):
    r"""Proxy of C++ itkLabelToRGBImageFilterISS3IRGBUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterISS3IRGBUC3_Superclass
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterISS3IRGBUC3_Superclass

        Create a new object of the class itkLabelToRGBImageFilterISS3IRGBUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterISS3IRGBUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterISS3IRGBUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterISS3IRGBUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterISS3IRGBUC3_Superclass in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Superclass_swigregister(itkLabelToRGBImageFilterISS3IRGBUC3_Superclass)
itkLabelToRGBImageFilterISS3IRGBUC3_Superclass___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Superclass___New_orig__
itkLabelToRGBImageFilterISS3IRGBUC3_Superclass_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Superclass_cast


def itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass_New():
    return itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass.New()

class itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IRGBUC2):
    r"""Proxy of C++ itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass

        Create a new object of the class itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass_swigregister(itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass)
itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass___New_orig__
itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass_cast


def itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass_New():
    return itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass.New()

class itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IRGBUC3):
    r"""Proxy of C++ itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass

        Create a new object of the class itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass_swigregister(itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass)
itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass___New_orig__
itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass_cast


def itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass_New():
    return itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass.New()

class itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IRGBUC2):
    r"""Proxy of C++ itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass

        Create a new object of the class itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass_swigregister(itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass)
itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass___New_orig__
itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass_cast


def itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass_New():
    return itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass.New()

class itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IRGBUC3):
    r"""Proxy of C++ itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass

        Create a new object of the class itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass_swigregister(itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass)
itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass___New_orig__
itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass_cast


def itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass_New():
    return itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass.New()

class itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IRGBUC2):
    r"""Proxy of C++ itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass_SetFunctor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass

        Create a new object of the class itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass_swigregister(itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass)
itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass___New_orig__
itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass_cast


def itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass_New():
    return itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass.New()

class itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IRGBUC3):
    r"""Proxy of C++ itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass_Clone)
    GetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass_GetFunctor)
    SetFunctor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass_SetFunctor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass

        Create a new object of the class itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass_swigregister(itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass)
itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass___New_orig__
itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass_cast


def itkLabelToRGBImageFilterISS2IRGBUC2_New():
    return itkLabelToRGBImageFilterISS2IRGBUC2.New()

class itkLabelToRGBImageFilterISS2IRGBUC2(itkLabelToRGBImageFilterISS2IRGBUC2_Superclass):
    r"""


    Apply a colormap to a label image.

    Apply a colormap to a label image. The set of colors is a good
    selection of distinct colors. The user can choose to use a background
    value. In that case, a gray pixel with the same intensity than the
    background label is produced.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://hdl.handle.net/1926/202http://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   LabelOverlayImageFilter

    See:   LabelMapToRGBImageFilter, LabelToRGBFunctor,
    ScalarToRGBPixelFunctor 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_GetBackgroundValue)
    SetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_SetBackgroundColor)
    GetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_GetBackgroundColor)
    ResetColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_AddColor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterISS2IRGBUC2
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterISS2IRGBUC2

        Create a new object of the class itkLabelToRGBImageFilterISS2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterISS2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterISS2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterISS2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterISS2IRGBUC2 in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_swigregister(itkLabelToRGBImageFilterISS2IRGBUC2)
itkLabelToRGBImageFilterISS2IRGBUC2___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2___New_orig__
itkLabelToRGBImageFilterISS2IRGBUC2_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS2IRGBUC2_cast


def itkLabelToRGBImageFilterISS3IRGBUC3_New():
    return itkLabelToRGBImageFilterISS3IRGBUC3.New()

class itkLabelToRGBImageFilterISS3IRGBUC3(itkLabelToRGBImageFilterISS3IRGBUC3_Superclass):
    r"""


    Apply a colormap to a label image.

    Apply a colormap to a label image. The set of colors is a good
    selection of distinct colors. The user can choose to use a background
    value. In that case, a gray pixel with the same intensity than the
    background label is produced.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://hdl.handle.net/1926/202http://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   LabelOverlayImageFilter

    See:   LabelMapToRGBImageFilter, LabelToRGBFunctor,
    ScalarToRGBPixelFunctor 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_GetBackgroundValue)
    SetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_SetBackgroundColor)
    GetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_GetBackgroundColor)
    ResetColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_AddColor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterISS3IRGBUC3
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterISS3IRGBUC3

        Create a new object of the class itkLabelToRGBImageFilterISS3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterISS3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterISS3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterISS3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterISS3IRGBUC3 in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_swigregister(itkLabelToRGBImageFilterISS3IRGBUC3)
itkLabelToRGBImageFilterISS3IRGBUC3___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3___New_orig__
itkLabelToRGBImageFilterISS3IRGBUC3_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterISS3IRGBUC3_cast


def itkLabelToRGBImageFilterIUC2IRGBUC2_New():
    return itkLabelToRGBImageFilterIUC2IRGBUC2.New()

class itkLabelToRGBImageFilterIUC2IRGBUC2(itkLabelToRGBImageFilterIUC2IRGBUC2_Superclass):
    r"""


    Apply a colormap to a label image.

    Apply a colormap to a label image. The set of colors is a good
    selection of distinct colors. The user can choose to use a background
    value. In that case, a gray pixel with the same intensity than the
    background label is produced.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://hdl.handle.net/1926/202http://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   LabelOverlayImageFilter

    See:   LabelMapToRGBImageFilter, LabelToRGBFunctor,
    ScalarToRGBPixelFunctor 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_GetBackgroundValue)
    SetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_SetBackgroundColor)
    GetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_GetBackgroundColor)
    ResetColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_AddColor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUC2IRGBUC2
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUC2IRGBUC2

        Create a new object of the class itkLabelToRGBImageFilterIUC2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUC2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUC2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUC2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUC2IRGBUC2 in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_swigregister(itkLabelToRGBImageFilterIUC2IRGBUC2)
itkLabelToRGBImageFilterIUC2IRGBUC2___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2___New_orig__
itkLabelToRGBImageFilterIUC2IRGBUC2_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC2IRGBUC2_cast


def itkLabelToRGBImageFilterIUC3IRGBUC3_New():
    return itkLabelToRGBImageFilterIUC3IRGBUC3.New()

class itkLabelToRGBImageFilterIUC3IRGBUC3(itkLabelToRGBImageFilterIUC3IRGBUC3_Superclass):
    r"""


    Apply a colormap to a label image.

    Apply a colormap to a label image. The set of colors is a good
    selection of distinct colors. The user can choose to use a background
    value. In that case, a gray pixel with the same intensity than the
    background label is produced.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://hdl.handle.net/1926/202http://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   LabelOverlayImageFilter

    See:   LabelMapToRGBImageFilter, LabelToRGBFunctor,
    ScalarToRGBPixelFunctor 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_GetBackgroundValue)
    SetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_SetBackgroundColor)
    GetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_GetBackgroundColor)
    ResetColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_AddColor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUC3IRGBUC3
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUC3IRGBUC3

        Create a new object of the class itkLabelToRGBImageFilterIUC3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUC3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUC3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUC3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUC3IRGBUC3 in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_swigregister(itkLabelToRGBImageFilterIUC3IRGBUC3)
itkLabelToRGBImageFilterIUC3IRGBUC3___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3___New_orig__
itkLabelToRGBImageFilterIUC3IRGBUC3_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUC3IRGBUC3_cast


def itkLabelToRGBImageFilterIUL2IRGBUC2_New():
    return itkLabelToRGBImageFilterIUL2IRGBUC2.New()

class itkLabelToRGBImageFilterIUL2IRGBUC2(itkLabelToRGBImageFilterIUL2IRGBUC2_Superclass):
    r"""


    Apply a colormap to a label image.

    Apply a colormap to a label image. The set of colors is a good
    selection of distinct colors. The user can choose to use a background
    value. In that case, a gray pixel with the same intensity than the
    background label is produced.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://hdl.handle.net/1926/202http://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   LabelOverlayImageFilter

    See:   LabelMapToRGBImageFilter, LabelToRGBFunctor,
    ScalarToRGBPixelFunctor 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_GetBackgroundValue)
    SetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_SetBackgroundColor)
    GetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_GetBackgroundColor)
    ResetColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_AddColor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUL2IRGBUC2
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUL2IRGBUC2

        Create a new object of the class itkLabelToRGBImageFilterIUL2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUL2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUL2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUL2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUL2IRGBUC2 in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_swigregister(itkLabelToRGBImageFilterIUL2IRGBUC2)
itkLabelToRGBImageFilterIUL2IRGBUC2___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2___New_orig__
itkLabelToRGBImageFilterIUL2IRGBUC2_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL2IRGBUC2_cast


def itkLabelToRGBImageFilterIUL3IRGBUC3_New():
    return itkLabelToRGBImageFilterIUL3IRGBUC3.New()

class itkLabelToRGBImageFilterIUL3IRGBUC3(itkLabelToRGBImageFilterIUL3IRGBUC3_Superclass):
    r"""


    Apply a colormap to a label image.

    Apply a colormap to a label image. The set of colors is a good
    selection of distinct colors. The user can choose to use a background
    value. In that case, a gray pixel with the same intensity than the
    background label is produced.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://hdl.handle.net/1926/202http://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   LabelOverlayImageFilter

    See:   LabelMapToRGBImageFilter, LabelToRGBFunctor,
    ScalarToRGBPixelFunctor 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_GetBackgroundValue)
    SetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_SetBackgroundColor)
    GetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_GetBackgroundColor)
    ResetColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_AddColor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUL3IRGBUC3
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUL3IRGBUC3

        Create a new object of the class itkLabelToRGBImageFilterIUL3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUL3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUL3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUL3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUL3IRGBUC3 in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_swigregister(itkLabelToRGBImageFilterIUL3IRGBUC3)
itkLabelToRGBImageFilterIUL3IRGBUC3___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3___New_orig__
itkLabelToRGBImageFilterIUL3IRGBUC3_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUL3IRGBUC3_cast


def itkLabelToRGBImageFilterIUS2IRGBUC2_New():
    return itkLabelToRGBImageFilterIUS2IRGBUC2.New()

class itkLabelToRGBImageFilterIUS2IRGBUC2(itkLabelToRGBImageFilterIUS2IRGBUC2_Superclass):
    r"""


    Apply a colormap to a label image.

    Apply a colormap to a label image. The set of colors is a good
    selection of distinct colors. The user can choose to use a background
    value. In that case, a gray pixel with the same intensity than the
    background label is produced.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://hdl.handle.net/1926/202http://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   LabelOverlayImageFilter

    See:   LabelMapToRGBImageFilter, LabelToRGBFunctor,
    ScalarToRGBPixelFunctor 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_GetBackgroundValue)
    SetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_SetBackgroundColor)
    GetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_GetBackgroundColor)
    ResetColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_AddColor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUS2IRGBUC2
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUS2IRGBUC2

        Create a new object of the class itkLabelToRGBImageFilterIUS2IRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUS2IRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUS2IRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUS2IRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUS2IRGBUC2 in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_swigregister(itkLabelToRGBImageFilterIUS2IRGBUC2)
itkLabelToRGBImageFilterIUS2IRGBUC2___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2___New_orig__
itkLabelToRGBImageFilterIUS2IRGBUC2_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS2IRGBUC2_cast


def itkLabelToRGBImageFilterIUS3IRGBUC3_New():
    return itkLabelToRGBImageFilterIUS3IRGBUC3.New()

class itkLabelToRGBImageFilterIUS3IRGBUC3(itkLabelToRGBImageFilterIUS3IRGBUC3_Superclass):
    r"""


    Apply a colormap to a label image.

    Apply a colormap to a label image. The set of colors is a good
    selection of distinct colors. The user can choose to use a background
    value. In that case, a gray pixel with the same intensity than the
    background label is produced.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://hdl.handle.net/1926/202http://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   LabelOverlayImageFilter

    See:   LabelMapToRGBImageFilter, LabelToRGBFunctor,
    ScalarToRGBPixelFunctor 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_Clone)
    SetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_SetBackgroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_GetBackgroundValue)
    SetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_SetBackgroundColor)
    GetBackgroundColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_GetBackgroundColor)
    ResetColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_ResetColors)
    GetNumberOfColors = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_GetNumberOfColors)
    AddColor = _swig_new_instance_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_AddColor)
    __swig_destroy__ = _itkLabelToRGBImageFilterPython.delete_itkLabelToRGBImageFilterIUS3IRGBUC3
    cast = _swig_new_static_method(_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelToRGBImageFilterIUS3IRGBUC3

        Create a new object of the class itkLabelToRGBImageFilterIUS3IRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelToRGBImageFilterIUS3IRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelToRGBImageFilterIUS3IRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelToRGBImageFilterIUS3IRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelToRGBImageFilterIUS3IRGBUC3 in _itkLabelToRGBImageFilterPython:
_itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_swigregister(itkLabelToRGBImageFilterIUS3IRGBUC3)
itkLabelToRGBImageFilterIUS3IRGBUC3___New_orig__ = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3___New_orig__
itkLabelToRGBImageFilterIUS3IRGBUC3_cast = _itkLabelToRGBImageFilterPython.itkLabelToRGBImageFilterIUS3IRGBUC3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def unary_functor_image_filter(*args, **kwargs):
    """Procedural interface for UnaryFunctorImageFilter"""
    import itk
    instance = itk.UnaryFunctorImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def unary_functor_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.UnaryFunctorImageFilter.values()[0]
    else:
        filter_object = itk.UnaryFunctorImageFilter

    unary_functor_image_filter.__doc__ = filter_object.__doc__
    unary_functor_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    unary_functor_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.UnaryFunctorImageFilter, itkTemplate.itkTemplate):
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        unary_functor_image_filter.__doc__ += "\n"
        unary_functor_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        unary_functor_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])
import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def label_to_rgb_image_filter(*args, **kwargs):
    """Procedural interface for LabelToRGBImageFilter"""
    import itk
    instance = itk.LabelToRGBImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def label_to_rgb_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.LabelToRGBImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.LabelToRGBImageFilter.values()[0]
    else:
        filter_object = itk.LabelToRGBImageFilter

    label_to_rgb_image_filter.__doc__ = filter_object.__doc__
    label_to_rgb_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    label_to_rgb_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.LabelToRGBImageFilter, itkTemplate.itkTemplate):
        label_to_rgb_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        label_to_rgb_image_filter.__doc__ += "\n"
        label_to_rgb_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        label_to_rgb_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



