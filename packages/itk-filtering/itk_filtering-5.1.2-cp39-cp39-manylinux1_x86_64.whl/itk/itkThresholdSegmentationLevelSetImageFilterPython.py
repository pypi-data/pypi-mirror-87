# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKLevelSetsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkThresholdSegmentationLevelSetImageFilterPython
else:
    import _itkThresholdSegmentationLevelSetImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkThresholdSegmentationLevelSetImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkThresholdSegmentationLevelSetImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkSegmentationLevelSetImageFilterPython
import itk.itkSegmentationLevelSetFunctionPython
import itk.itkLevelSetFunctionPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.ITKCommonBasePython
import itk.itkCovariantVectorPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkSparseFieldLevelSetImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkThresholdSegmentationLevelSetImageFilterID2ID2D_New():
    return itkThresholdSegmentationLevelSetImageFilterID2ID2D.New()

class itkThresholdSegmentationLevelSetImageFilterID2ID2D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID2ID2D):
    r"""


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_Clone)
    SetUpperThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetUpperThreshold)
    SetLowerThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetLowerThreshold)
    GetUpperThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetUpperThreshold)
    GetLowerThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetLowerThreshold)
    SetEdgeWeight = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetEdgeWeight)
    GetEdgeWeight = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetEdgeWeight)
    SetSmoothingIterations = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingIterations)
    GetSmoothingIterations = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingIterations)
    SetSmoothingTimeStep = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingTimeStep)
    GetSmoothingTimeStep = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingTimeStep)
    SetSmoothingConductance = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_SetSmoothingConductance)
    GetSmoothingConductance = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_GetSmoothingConductance)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterID2ID2D
    cast = _swig_new_static_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterID2ID2D

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterID2ID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterID2ID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterID2ID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterID2ID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterID2ID2D in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_swigregister(itkThresholdSegmentationLevelSetImageFilterID2ID2D)
itkThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__ = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D___New_orig__
itkThresholdSegmentationLevelSetImageFilterID2ID2D_cast = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID2ID2D_cast


def itkThresholdSegmentationLevelSetImageFilterID3ID3D_New():
    return itkThresholdSegmentationLevelSetImageFilterID3ID3D.New()

class itkThresholdSegmentationLevelSetImageFilterID3ID3D(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterID3ID3D):
    r"""


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_Clone)
    SetUpperThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetUpperThreshold)
    SetLowerThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetLowerThreshold)
    GetUpperThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetUpperThreshold)
    GetLowerThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetLowerThreshold)
    SetEdgeWeight = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetEdgeWeight)
    GetEdgeWeight = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetEdgeWeight)
    SetSmoothingIterations = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingIterations)
    GetSmoothingIterations = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingIterations)
    SetSmoothingTimeStep = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingTimeStep)
    GetSmoothingTimeStep = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingTimeStep)
    SetSmoothingConductance = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_SetSmoothingConductance)
    GetSmoothingConductance = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_GetSmoothingConductance)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterID3ID3D
    cast = _swig_new_static_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterID3ID3D

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterID3ID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterID3ID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterID3ID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterID3ID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterID3ID3D in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_swigregister(itkThresholdSegmentationLevelSetImageFilterID3ID3D)
itkThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__ = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D___New_orig__
itkThresholdSegmentationLevelSetImageFilterID3ID3D_cast = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterID3ID3D_cast


def itkThresholdSegmentationLevelSetImageFilterIF2IF2F_New():
    return itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New()

class itkThresholdSegmentationLevelSetImageFilterIF2IF2F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF2IF2F):
    r"""


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_Clone)
    SetUpperThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetUpperThreshold)
    SetLowerThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetLowerThreshold)
    GetUpperThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetUpperThreshold)
    GetLowerThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetLowerThreshold)
    SetEdgeWeight = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetEdgeWeight)
    GetEdgeWeight = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetEdgeWeight)
    SetSmoothingIterations = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingIterations)
    GetSmoothingIterations = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingIterations)
    SetSmoothingTimeStep = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingTimeStep)
    GetSmoothingTimeStep = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingTimeStep)
    SetSmoothingConductance = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_SetSmoothingConductance)
    GetSmoothingConductance = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_GetSmoothingConductance)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterIF2IF2F
    cast = _swig_new_static_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterIF2IF2F

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterIF2IF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterIF2IF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterIF2IF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterIF2IF2F in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_swigregister(itkThresholdSegmentationLevelSetImageFilterIF2IF2F)
itkThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__ = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F___New_orig__
itkThresholdSegmentationLevelSetImageFilterIF2IF2F_cast = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF2IF2F_cast


def itkThresholdSegmentationLevelSetImageFilterIF3IF3F_New():
    return itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New()

class itkThresholdSegmentationLevelSetImageFilterIF3IF3F(itk.itkSegmentationLevelSetImageFilterPython.itkSegmentationLevelSetImageFilterIF3IF3F):
    r"""


    Segments structures in images based on intensity values.

    IMPORTANT The SegmentationLevelSetImageFilter class and the
    ThresholdSegmentationLevelSetFunction class contain additional
    information necessary to the full understanding of how to use this
    filter. OVERVIEW This class is a level set method segmentation filter.
    It constructs a speed function which is close to zero at the upper and
    lower bounds of an intensity window, effectively locking the
    propagating front onto those edges. Elsewhere, the front will
    propagate quickly. INPUTS This filter requires two inputs. The first
    input is a seed image. This seed image must contain an isosurface that
    you want to use as the seed for your segmentation. It can be a binary,
    graylevel, or floating point image. The only requirement is that it
    contain a closed isosurface that you will identify as the seed by
    setting the IsosurfaceValue parameter of the filter. For a binary
    image you will want to set your isosurface value halfway between your
    on and off values (i.e. for 0's and 1's, use an isosurface value of
    0.5).

    The second input is the feature image. This is the image from which
    the speed function will be calculated. For most applications, this is
    the image that you want to segment. The desired isosurface in your
    seed image should lie within the region of your feature image that you
    are trying to segment. Note that this filter does no preprocessing of
    the feature image before thresholding.

    See SegmentationLevelSetImageFilter for more information on Inputs.
    OUTPUTS The filter outputs a single, scalar, real-valued image.
    Positive values in the output image are inside the segmented region
    and negative values in the image are outside of the inside region. The
    zero crossings of the image correspond to the position of the level
    set front.

    See SparseFieldLevelSetImageFilter and SegmentationLevelSetImageFilter
    for more information. PARAMETERS In addition to parameters described
    in SegmentationLevelSetImageFilter, this filter adds the
    UpperThreshold and LowerThreshold. See
    ThresholdSegmentationLevelSetFunction for a description of how these
    values affect the segmentation.

    See:   SegmentationLevelSetImageFilter

    See:  ThresholdSegmentationLevelSetFunction,

    See:   SparseFieldLevelSetImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__)
    Clone = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_Clone)
    SetUpperThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetUpperThreshold)
    SetLowerThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetLowerThreshold)
    GetUpperThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetUpperThreshold)
    GetLowerThreshold = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetLowerThreshold)
    SetEdgeWeight = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetEdgeWeight)
    GetEdgeWeight = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetEdgeWeight)
    SetSmoothingIterations = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingIterations)
    GetSmoothingIterations = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingIterations)
    SetSmoothingTimeStep = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingTimeStep)
    GetSmoothingTimeStep = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingTimeStep)
    SetSmoothingConductance = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_SetSmoothingConductance)
    GetSmoothingConductance = _swig_new_instance_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_GetSmoothingConductance)
    __swig_destroy__ = _itkThresholdSegmentationLevelSetImageFilterPython.delete_itkThresholdSegmentationLevelSetImageFilterIF3IF3F
    cast = _swig_new_static_method(_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_cast)

    def New(*args, **kargs):
        """New() -> itkThresholdSegmentationLevelSetImageFilterIF3IF3F

        Create a new object of the class itkThresholdSegmentationLevelSetImageFilterIF3IF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkThresholdSegmentationLevelSetImageFilterIF3IF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkThresholdSegmentationLevelSetImageFilterIF3IF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkThresholdSegmentationLevelSetImageFilterIF3IF3F in _itkThresholdSegmentationLevelSetImageFilterPython:
_itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_swigregister(itkThresholdSegmentationLevelSetImageFilterIF3IF3F)
itkThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__ = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F___New_orig__
itkThresholdSegmentationLevelSetImageFilterIF3IF3F_cast = _itkThresholdSegmentationLevelSetImageFilterPython.itkThresholdSegmentationLevelSetImageFilterIF3IF3F_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def threshold_segmentation_level_set_image_filter(*args, **kwargs):
    """Procedural interface for ThresholdSegmentationLevelSetImageFilter"""
    import itk
    instance = itk.ThresholdSegmentationLevelSetImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def threshold_segmentation_level_set_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ThresholdSegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ThresholdSegmentationLevelSetImageFilter.values()[0]
    else:
        filter_object = itk.ThresholdSegmentationLevelSetImageFilter

    threshold_segmentation_level_set_image_filter.__doc__ = filter_object.__doc__
    threshold_segmentation_level_set_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    threshold_segmentation_level_set_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ThresholdSegmentationLevelSetImageFilter, itkTemplate.itkTemplate):
        threshold_segmentation_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        threshold_segmentation_level_set_image_filter.__doc__ += "\n"
        threshold_segmentation_level_set_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        threshold_segmentation_level_set_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



