# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkAddImageFilterPython
else:
    import _itkAddImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkAddImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkAddImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkArrayPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkInPlaceImageFilterBPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython

def itkAddImageFilterID2ID2ID2_New():
    return itkAddImageFilterID2ID2ID2.New()

class itkAddImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterID2ID2ID2
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterID2ID2ID2

        Create a new object of the class itkAddImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterID2ID2ID2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_swigregister(itkAddImageFilterID2ID2ID2)
itkAddImageFilterID2ID2ID2___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2___New_orig__
itkAddImageFilterID2ID2ID2_cast = _itkAddImageFilterPython.itkAddImageFilterID2ID2ID2_cast


def itkAddImageFilterID3ID3ID3_New():
    return itkAddImageFilterID3ID3ID3.New()

class itkAddImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterID3ID3ID3
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterID3ID3ID3

        Create a new object of the class itkAddImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterID3ID3ID3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_swigregister(itkAddImageFilterID3ID3ID3)
itkAddImageFilterID3ID3ID3___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3___New_orig__
itkAddImageFilterID3ID3ID3_cast = _itkAddImageFilterPython.itkAddImageFilterID3ID3ID3_cast


def itkAddImageFilterIF2IF2IF2_New():
    return itkAddImageFilterIF2IF2IF2.New()

class itkAddImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIF2IF2IF2
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIF2IF2IF2

        Create a new object of the class itkAddImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIF2IF2IF2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_swigregister(itkAddImageFilterIF2IF2IF2)
itkAddImageFilterIF2IF2IF2___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2___New_orig__
itkAddImageFilterIF2IF2IF2_cast = _itkAddImageFilterPython.itkAddImageFilterIF2IF2IF2_cast


def itkAddImageFilterIF3IF3IF3_New():
    return itkAddImageFilterIF3IF3IF3.New()

class itkAddImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIF3IF3IF3
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIF3IF3IF3

        Create a new object of the class itkAddImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIF3IF3IF3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_swigregister(itkAddImageFilterIF3IF3IF3)
itkAddImageFilterIF3IF3IF3___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3___New_orig__
itkAddImageFilterIF3IF3IF3_cast = _itkAddImageFilterPython.itkAddImageFilterIF3IF3IF3_cast


def itkAddImageFilterISS2ISS2ISS2_New():
    return itkAddImageFilterISS2ISS2ISS2.New()

class itkAddImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterISS2ISS2ISS2
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterISS2ISS2ISS2

        Create a new object of the class itkAddImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterISS2ISS2ISS2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_swigregister(itkAddImageFilterISS2ISS2ISS2)
itkAddImageFilterISS2ISS2ISS2___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2___New_orig__
itkAddImageFilterISS2ISS2ISS2_cast = _itkAddImageFilterPython.itkAddImageFilterISS2ISS2ISS2_cast


def itkAddImageFilterISS3ISS3ISS3_New():
    return itkAddImageFilterISS3ISS3ISS3.New()

class itkAddImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterISS3ISS3ISS3
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterISS3ISS3ISS3

        Create a new object of the class itkAddImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterISS3ISS3ISS3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_swigregister(itkAddImageFilterISS3ISS3ISS3)
itkAddImageFilterISS3ISS3ISS3___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3___New_orig__
itkAddImageFilterISS3ISS3ISS3_cast = _itkAddImageFilterPython.itkAddImageFilterISS3ISS3ISS3_cast


def itkAddImageFilterIUC2IUC2IUC2_New():
    return itkAddImageFilterIUC2IUC2IUC2.New()

class itkAddImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUC2IUC2IUC2

        Create a new object of the class itkAddImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUC2IUC2IUC2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_swigregister(itkAddImageFilterIUC2IUC2IUC2)
itkAddImageFilterIUC2IUC2IUC2___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2___New_orig__
itkAddImageFilterIUC2IUC2IUC2_cast = _itkAddImageFilterPython.itkAddImageFilterIUC2IUC2IUC2_cast


def itkAddImageFilterIUC3IUC3IUC3_New():
    return itkAddImageFilterIUC3IUC3IUC3.New()

class itkAddImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUC3IUC3IUC3

        Create a new object of the class itkAddImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUC3IUC3IUC3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_swigregister(itkAddImageFilterIUC3IUC3IUC3)
itkAddImageFilterIUC3IUC3IUC3___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3___New_orig__
itkAddImageFilterIUC3IUC3IUC3_cast = _itkAddImageFilterPython.itkAddImageFilterIUC3IUC3IUC3_cast


def itkAddImageFilterIUS2IUS2IUS2_New():
    return itkAddImageFilterIUS2IUS2IUS2.New()

class itkAddImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUS2IUS2IUS2
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUS2IUS2IUS2

        Create a new object of the class itkAddImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUS2IUS2IUS2 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_swigregister(itkAddImageFilterIUS2IUS2IUS2)
itkAddImageFilterIUS2IUS2IUS2___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2___New_orig__
itkAddImageFilterIUS2IUS2IUS2_cast = _itkAddImageFilterPython.itkAddImageFilterIUS2IUS2IUS2_cast


def itkAddImageFilterIUS3IUS3IUS3_New():
    return itkAddImageFilterIUS3IUS3IUS3.New()

class itkAddImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""


    Pixel-wise addition of two images.

    This class is templated over the types of the two input images and the
    type of the output image. Numeric conversions (castings) are done by
    the C++ defaults.

    The pixel type of the input 1 image must have a valid definition of
    the operator+ with a pixel type of the image 2. This condition is
    required because internally this filter will perform the operation

    Additionally the type resulting from the sum, will be cast to the
    pixel type of the output image.

    The total operation over one pixel will be

    For example, this filter could be used directly for adding images
    whose pixels are vectors of the same dimension, and to store the
    resulting vector in an output image of vector pixels.

    The images to be added are set using the methods:

    Additionally, this filter can be used to add a constant to every pixel
    of an image by using

    WARNING:  No numeric overflow checking is performed in this filter.
    {Filtering/ImageIntensity/AddTwoImages,Add Two Images Together}
    {Filtering/ImageIntensity/AddConstantToEveryPixel,Add Constant To
    Every Pixel} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_Clone)
    Input1Input2OutputAdditiveOperatorsCheck = _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_Input1Input2OutputAdditiveOperatorsCheck
    
    __swig_destroy__ = _itkAddImageFilterPython.delete_itkAddImageFilterIUS3IUS3IUS3
    cast = _swig_new_static_method(_itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkAddImageFilterIUS3IUS3IUS3

        Create a new object of the class itkAddImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkAddImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkAddImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkAddImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkAddImageFilterIUS3IUS3IUS3 in _itkAddImageFilterPython:
_itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_swigregister(itkAddImageFilterIUS3IUS3IUS3)
itkAddImageFilterIUS3IUS3IUS3___New_orig__ = _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3___New_orig__
itkAddImageFilterIUS3IUS3IUS3_cast = _itkAddImageFilterPython.itkAddImageFilterIUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def add_image_filter(*args, **kwargs):
    """Procedural interface for AddImageFilter"""
    import itk
    instance = itk.AddImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def add_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.AddImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.AddImageFilter.values()[0]
    else:
        filter_object = itk.AddImageFilter

    add_image_filter.__doc__ = filter_object.__doc__
    add_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    add_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.AddImageFilter, itkTemplate.itkTemplate):
        add_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        add_image_filter.__doc__ += "\n"
        add_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        add_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



