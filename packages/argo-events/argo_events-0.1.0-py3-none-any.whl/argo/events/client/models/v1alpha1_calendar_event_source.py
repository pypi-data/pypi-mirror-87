# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1CalendarEventSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'exclusion_dates': 'list[str]',
        'interval': 'str',
        'metadata': 'dict(str, str)',
        'persistence': 'V1alpha1EventPersistence',
        'schedule': 'str',
        'timezone': 'str',
        'user_payload': 'str'
    }

    attribute_map = {
        'exclusion_dates': 'exclusionDates',
        'interval': 'interval',
        'metadata': 'metadata',
        'persistence': 'persistence',
        'schedule': 'schedule',
        'timezone': 'timezone',
        'user_payload': 'userPayload'
    }

    def __init__(self, exclusion_dates=None, interval=None, metadata=None, persistence=None, schedule=None, timezone=None, user_payload=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1CalendarEventSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._exclusion_dates = None
        self._interval = None
        self._metadata = None
        self._persistence = None
        self._schedule = None
        self._timezone = None
        self._user_payload = None
        self.discriminator = None

        if exclusion_dates is not None:
            self.exclusion_dates = exclusion_dates
        self.interval = interval
        if metadata is not None:
            self.metadata = metadata
        if persistence is not None:
            self.persistence = persistence
        self.schedule = schedule
        if timezone is not None:
            self.timezone = timezone
        if user_payload is not None:
            self.user_payload = user_payload

    @property
    def exclusion_dates(self):
        """Gets the exclusion_dates of this V1alpha1CalendarEventSource.  # noqa: E501


        :return: The exclusion_dates of this V1alpha1CalendarEventSource.  # noqa: E501
        :rtype: list[str]
        """
        return self._exclusion_dates

    @exclusion_dates.setter
    def exclusion_dates(self, exclusion_dates):
        """Sets the exclusion_dates of this V1alpha1CalendarEventSource.


        :param exclusion_dates: The exclusion_dates of this V1alpha1CalendarEventSource.  # noqa: E501
        :type: list[str]
        """

        self._exclusion_dates = exclusion_dates

    @property
    def interval(self):
        """Gets the interval of this V1alpha1CalendarEventSource.  # noqa: E501

        Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...  # noqa: E501

        :return: The interval of this V1alpha1CalendarEventSource.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this V1alpha1CalendarEventSource.

        Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...  # noqa: E501

        :param interval: The interval of this V1alpha1CalendarEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and interval is None:  # noqa: E501
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def metadata(self):
        """Gets the metadata of this V1alpha1CalendarEventSource.  # noqa: E501

        Metadata holds the user defined metadata which will passed along the event payload.  # noqa: E501

        :return: The metadata of this V1alpha1CalendarEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1alpha1CalendarEventSource.

        Metadata holds the user defined metadata which will passed along the event payload.  # noqa: E501

        :param metadata: The metadata of this V1alpha1CalendarEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def persistence(self):
        """Gets the persistence of this V1alpha1CalendarEventSource.  # noqa: E501


        :return: The persistence of this V1alpha1CalendarEventSource.  # noqa: E501
        :rtype: V1alpha1EventPersistence
        """
        return self._persistence

    @persistence.setter
    def persistence(self, persistence):
        """Sets the persistence of this V1alpha1CalendarEventSource.


        :param persistence: The persistence of this V1alpha1CalendarEventSource.  # noqa: E501
        :type: V1alpha1EventPersistence
        """

        self._persistence = persistence

    @property
    def schedule(self):
        """Gets the schedule of this V1alpha1CalendarEventSource.  # noqa: E501

        Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron  # noqa: E501

        :return: The schedule of this V1alpha1CalendarEventSource.  # noqa: E501
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this V1alpha1CalendarEventSource.

        Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron  # noqa: E501

        :param schedule: The schedule of this V1alpha1CalendarEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and schedule is None:  # noqa: E501
            raise ValueError("Invalid value for `schedule`, must not be `None`")  # noqa: E501

        self._schedule = schedule

    @property
    def timezone(self):
        """Gets the timezone of this V1alpha1CalendarEventSource.  # noqa: E501

        Timezone in which to run the schedule  # noqa: E501

        :return: The timezone of this V1alpha1CalendarEventSource.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this V1alpha1CalendarEventSource.

        Timezone in which to run the schedule  # noqa: E501

        :param timezone: The timezone of this V1alpha1CalendarEventSource.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def user_payload(self):
        """Gets the user_payload of this V1alpha1CalendarEventSource.  # noqa: E501

        UserPayload will be sent to sensor as extra data once the event is triggered Deprecated. Please use Metadata instead.  # noqa: E501

        :return: The user_payload of this V1alpha1CalendarEventSource.  # noqa: E501
        :rtype: str
        """
        return self._user_payload

    @user_payload.setter
    def user_payload(self, user_payload):
        """Sets the user_payload of this V1alpha1CalendarEventSource.

        UserPayload will be sent to sensor as extra data once the event is triggered Deprecated. Please use Metadata instead.  # noqa: E501

        :param user_payload: The user_payload of this V1alpha1CalendarEventSource.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                user_payload is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', user_payload)):  # noqa: E501
            raise ValueError(r"Invalid value for `user_payload`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._user_payload = user_payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1CalendarEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1CalendarEventSource):
            return True

        return self.to_dict() != other.to_dict()
