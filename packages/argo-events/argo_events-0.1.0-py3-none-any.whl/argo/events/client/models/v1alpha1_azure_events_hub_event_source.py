# coding: utf-8

"""
    Argo Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.events.client.configuration import Configuration


class V1alpha1AzureEventsHubEventSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fqdn': 'str',
        'hub_name': 'str',
        'metadata': 'dict(str, str)',
        'shared_access_key': 'V1SecretKeySelector',
        'shared_access_key_name': 'V1SecretKeySelector'
    }

    attribute_map = {
        'fqdn': 'fqdn',
        'hub_name': 'hubName',
        'metadata': 'metadata',
        'shared_access_key': 'sharedAccessKey',
        'shared_access_key_name': 'sharedAccessKeyName'
    }

    def __init__(self, fqdn=None, hub_name=None, metadata=None, shared_access_key=None, shared_access_key_name=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1AzureEventsHubEventSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fqdn = None
        self._hub_name = None
        self._metadata = None
        self._shared_access_key = None
        self._shared_access_key_name = None
        self.discriminator = None

        self.fqdn = fqdn
        self.hub_name = hub_name
        if metadata is not None:
            self.metadata = metadata
        if shared_access_key is not None:
            self.shared_access_key = shared_access_key
        if shared_access_key_name is not None:
            self.shared_access_key_name = shared_access_key_name

    @property
    def fqdn(self):
        """Gets the fqdn of this V1alpha1AzureEventsHubEventSource.  # noqa: E501

        FQDN of the EventHubs namespace you created More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string  # noqa: E501

        :return: The fqdn of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this V1alpha1AzureEventsHubEventSource.

        FQDN of the EventHubs namespace you created More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string  # noqa: E501

        :param fqdn: The fqdn of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and fqdn is None:  # noqa: E501
            raise ValueError("Invalid value for `fqdn`, must not be `None`")  # noqa: E501

        self._fqdn = fqdn

    @property
    def hub_name(self):
        """Gets the hub_name of this V1alpha1AzureEventsHubEventSource.  # noqa: E501

        Event Hub path/name  # noqa: E501

        :return: The hub_name of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :rtype: str
        """
        return self._hub_name

    @hub_name.setter
    def hub_name(self, hub_name):
        """Sets the hub_name of this V1alpha1AzureEventsHubEventSource.

        Event Hub path/name  # noqa: E501

        :param hub_name: The hub_name of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and hub_name is None:  # noqa: E501
            raise ValueError("Invalid value for `hub_name`, must not be `None`")  # noqa: E501

        self._hub_name = hub_name

    @property
    def metadata(self):
        """Gets the metadata of this V1alpha1AzureEventsHubEventSource.  # noqa: E501

        Metadata holds the user defined metadata which will passed along the event payload.  # noqa: E501

        :return: The metadata of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1alpha1AzureEventsHubEventSource.

        Metadata holds the user defined metadata which will passed along the event payload.  # noqa: E501

        :param metadata: The metadata of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def shared_access_key(self):
        """Gets the shared_access_key of this V1alpha1AzureEventsHubEventSource.  # noqa: E501


        :return: The shared_access_key of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :rtype: V1SecretKeySelector
        """
        return self._shared_access_key

    @shared_access_key.setter
    def shared_access_key(self, shared_access_key):
        """Sets the shared_access_key of this V1alpha1AzureEventsHubEventSource.


        :param shared_access_key: The shared_access_key of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :type: V1SecretKeySelector
        """

        self._shared_access_key = shared_access_key

    @property
    def shared_access_key_name(self):
        """Gets the shared_access_key_name of this V1alpha1AzureEventsHubEventSource.  # noqa: E501


        :return: The shared_access_key_name of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :rtype: V1SecretKeySelector
        """
        return self._shared_access_key_name

    @shared_access_key_name.setter
    def shared_access_key_name(self, shared_access_key_name):
        """Sets the shared_access_key_name of this V1alpha1AzureEventsHubEventSource.


        :param shared_access_key_name: The shared_access_key_name of this V1alpha1AzureEventsHubEventSource.  # noqa: E501
        :type: V1SecretKeySelector
        """

        self._shared_access_key_name = shared_access_key_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1AzureEventsHubEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1AzureEventsHubEventSource):
            return True

        return self.to_dict() != other.to_dict()
