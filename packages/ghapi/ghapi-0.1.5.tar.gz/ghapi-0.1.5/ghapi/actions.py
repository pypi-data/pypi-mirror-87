# AUTOGENERATED! DO NOT EDIT! File to edit: 01_actions.ipynb (unless otherwise specified).

__all__ = ['contexts', 'context_github', 'context_env', 'context_job', 'context_steps', 'context_runner',
           'context_secrets', 'context_strategy', 'context_matrix', 'context_needs', 'Event', 'create_workflow_files',
           'fill_workflow_templates', 'env_contexts', 'def_pipinst', 'create_workflow', 'gh_create_workflow',
           'example_payload', 'github_token', 'actions_output', 'actions_debug', 'actions_warn', 'actions_error',
           'actions_group', 'actions_endgroup', 'actions_mask']

# Cell
from fastcore.utils import *
from fastcore.script import *
from fastcore.foundation import *
from fastcore.meta import *
from .core import *
from .templates import *

import textwrap
from enum import Enum

# Cell
# So we can run this outside of GitHub actions too, read from file if needed
if 'CONTEXT_GITHUB' not in os.environ: os.environ['CONTEXT_GITHUB'] = context_example
if 'CONTEXT_GITHUB' not in os.environ: os.environ['CONTEXT_NEEDS'] = needs_example

contexts = 'github', 'env', 'job', 'steps', 'runner', 'secrets', 'strategy', 'matrix', 'needs'
for context in contexts:
    globals()[f'context_{context}'] = dict2obj(loads(os.getenv(f"CONTEXT_{context.upper()}", "{}")))

# Cell
#nbdev_comment _all_ = ['context_github', 'context_env', 'context_job', 'context_steps', 'context_runner', 'context_secrets', 'context_strategy', 'context_matrix', 'context_needs']

# Cell
Event = str_enum('Event',
    'page_build','content_reference','repository_import','create','workflow_run','delete','organization','sponsorship',
    'project_column','push','context','milestone','project_card','project','package','pull_request','repository_dispatch',
    'team_add','workflow_dispatch','member','meta','code_scanning_alert','public','needs','check_run','security_advisory',
    'pull_request_review_comment','org_block','commit_comment','watch','marketplace_purchase','star','installation_repositories',
    'check_suite','github_app_authorization','team','status','repository_vulnerability_alert','pull_request_review','label',
    'installation','release','issues','repository','gollum','membership','deployment','deploy_key','issue_comment','ping',
    'deployment_status','fork')

# Cell
def _create_file(path:Path, fname:str, contents):
    if contents and not (path/fname).exists(): (path/fname).write_text(contents)

def _replace(s:str, find, repl, i:int=0, suf:str=''):
    return s.replace(find, textwrap.indent(repl, ' '*i)+suf)

# Cell
def create_workflow_files(fname:str, workflow:str, build_script:str, prebuild_script:str=''):
    "Create workflow and script files in suitable places in `github` folder"
    if not os.path.exists('.git'): return print('This does not appear to be the root of a git repo')
    wf_path  = Path('.github/workflows')
    scr_path = Path('.github/scripts')
    wf_path .mkdir(parents=True, exist_ok=True)
    scr_path.mkdir(parents=True, exist_ok=True)
    _create_file(wf_path, f'{fname}.yml', workflow)
    _create_file(scr_path, f'build-{fname}.py', build_script)
    _create_file(scr_path, f'prebuild-{fname}.py', prebuild_script)

# Cell
def fill_workflow_templates(name:str, event, run, context, script):
    "Function to create a simple Ubuntu workflow that calls a Python `ghapi` script"
    c = wf_tmpl
    for find,repl,i in (('NAME',name,0), ('EVENT',event,2), ('RUN',run,8), ('CONTEXTS',context,8)):
        c = _replace(c, find, repl, i)
    create_workflow_files(name, c, script)

# Cell
def env_contexts(contexts):
    contexts = uniqueify(['github'] + listify(contexts))
    return "\n".join("CONTEXT_" + o.upper() + ": ${{ toJson(" + o.lower() + ") }}" for o in contexts)

# Cell
def_pipinst = 'pip install -q ghapi'

# Cell
def create_workflow(name:str, event:Event, contexts:list=None):
    "Function to create a simple Ubuntu workflow that calls a Python `ghapi` script"
    contexts = env_contexts(['github'] + listify(contexts))
    script = "from fastcore.all import *\nfrom ghapi import *"
    fill_workflow_templates(f'{name}-{event}', f'{event}:', def_pipinst, env_contexts(contexts), script)

# Cell
@call_parse
def gh_create_workflow(
    name:Param("Name of the workflow file", str),
    event:Param("Event to listen for", str),
    contexts:Param("Space-delimited extra contexts to include in `env` in addition to 'github'", str)=''
):
    "Supports `gh-create-workflow`, a CLI wrapper for `create_workflow`."
    create_workflow(name, Event[event], contexts.split())

# Cell
_example_url = 'https://raw.githubusercontent.com/fastai/ghapi/master/examples/{}.json'

# Cell
def example_payload(event):
    "Get an example of a JSON payload for `event`"
    return dict2obj(urljson(_example_url.format(event)))

# Cell
def github_token():
    "Get GitHub token from `GITHUB_TOKEN` env var if available, or from `github` context"
    return os.getenv('GITHUB_TOKEN', context_github.get('token', None))

# Cell
def actions_output(name, value):
    "Print the special GitHub Actions `::set-output` line for `name::value`"
    print(f"::set-output name={name}::{value}")

# Cell
def actions_debug(message):
    "Print the special `::debug` line for `message`"
    print(f"::debug::{message}")

# Cell
def actions_warn(message, details=''):
    "Print the special `::warning` line for `message`"
    print(f"::warning {details}::{message}")

# Cell
def actions_error(message, details=''):
    "Print the special `::error` line for `message`"
    print(f"::error {details}::{message}")

# Cell
def actions_group(title):
    "Print the special `::group` line for `title`"
    print(f"::group::{title}")

# Cell
def actions_endgroup():
    "Print the special `::endgroup`"
    print(f"::endgroup::")

# Cell
def actions_mask(value):
    "Print the special `::add-mask` line for `value`"
    print(f"::add-mask::{value}")