# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKFFTPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkFFTPadImageFilterPython
else:
    import _itkFFTPadImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkFFTPadImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkFFTPadImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.itkPadImageFilterBasePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.stdcomplexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkImageBoundaryConditionPython

def itkFFTPadImageFilterICF2_New():
    return itkFFTPadImageFilterICF2.New()

class itkFFTPadImageFilterICF2(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseICF2ICF2):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF2_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF2_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF2_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterICF2
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterICF2

        Create a new object of the class itkFFTPadImageFilterICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterICF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterICF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterICF2 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF2_swigregister(itkFFTPadImageFilterICF2)
itkFFTPadImageFilterICF2___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICF2___New_orig__
itkFFTPadImageFilterICF2_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICF2_cast


def itkFFTPadImageFilterICF3_New():
    return itkFFTPadImageFilterICF3.New()

class itkFFTPadImageFilterICF3(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseICF3ICF3):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF3_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF3_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF3_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterICF3
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterICF3

        Create a new object of the class itkFFTPadImageFilterICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterICF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterICF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterICF3 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterICF3_swigregister(itkFFTPadImageFilterICF3)
itkFFTPadImageFilterICF3___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICF3___New_orig__
itkFFTPadImageFilterICF3_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICF3_cast


def itkFFTPadImageFilterICVF22_New():
    return itkFFTPadImageFilterICVF22.New()

class itkFFTPadImageFilterICVF22(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseICVF22ICVF22):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF22_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF22_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF22_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterICVF22
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF22_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterICVF22

        Create a new object of the class itkFFTPadImageFilterICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterICVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterICVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterICVF22 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF22_swigregister(itkFFTPadImageFilterICVF22)
itkFFTPadImageFilterICVF22___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF22___New_orig__
itkFFTPadImageFilterICVF22_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF22_cast


def itkFFTPadImageFilterICVF23_New():
    return itkFFTPadImageFilterICVF23.New()

class itkFFTPadImageFilterICVF23(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseICVF23ICVF23):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF23_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF23_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF23_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterICVF23
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF23_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterICVF23

        Create a new object of the class itkFFTPadImageFilterICVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterICVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterICVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterICVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterICVF23 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF23_swigregister(itkFFTPadImageFilterICVF23)
itkFFTPadImageFilterICVF23___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF23___New_orig__
itkFFTPadImageFilterICVF23_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF23_cast


def itkFFTPadImageFilterICVF32_New():
    return itkFFTPadImageFilterICVF32.New()

class itkFFTPadImageFilterICVF32(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseICVF32ICVF32):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF32_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF32_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF32_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterICVF32
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF32_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterICVF32

        Create a new object of the class itkFFTPadImageFilterICVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterICVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterICVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterICVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterICVF32 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF32_swigregister(itkFFTPadImageFilterICVF32)
itkFFTPadImageFilterICVF32___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF32___New_orig__
itkFFTPadImageFilterICVF32_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF32_cast


def itkFFTPadImageFilterICVF33_New():
    return itkFFTPadImageFilterICVF33.New()

class itkFFTPadImageFilterICVF33(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseICVF33ICVF33):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF33_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF33_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF33_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterICVF33
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF33_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterICVF33

        Create a new object of the class itkFFTPadImageFilterICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterICVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterICVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterICVF33 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF33_swigregister(itkFFTPadImageFilterICVF33)
itkFFTPadImageFilterICVF33___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF33___New_orig__
itkFFTPadImageFilterICVF33_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF33_cast


def itkFFTPadImageFilterICVF42_New():
    return itkFFTPadImageFilterICVF42.New()

class itkFFTPadImageFilterICVF42(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseICVF42ICVF42):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF42_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF42_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF42_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterICVF42
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF42_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterICVF42

        Create a new object of the class itkFFTPadImageFilterICVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterICVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterICVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterICVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterICVF42 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF42_swigregister(itkFFTPadImageFilterICVF42)
itkFFTPadImageFilterICVF42___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF42___New_orig__
itkFFTPadImageFilterICVF42_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF42_cast


def itkFFTPadImageFilterICVF43_New():
    return itkFFTPadImageFilterICVF43.New()

class itkFFTPadImageFilterICVF43(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseICVF43ICVF43):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF43_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF43_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF43_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterICVF43
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF43_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterICVF43

        Create a new object of the class itkFFTPadImageFilterICVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterICVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterICVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterICVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterICVF43 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF43_swigregister(itkFFTPadImageFilterICVF43)
itkFFTPadImageFilterICVF43___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF43___New_orig__
itkFFTPadImageFilterICVF43_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterICVF43_cast


def itkFFTPadImageFilterID2_New():
    return itkFFTPadImageFilterID2.New()

class itkFFTPadImageFilterID2(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseID2ID2):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID2_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID2_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID2_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterID2
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterID2

        Create a new object of the class itkFFTPadImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterID2 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterID2_swigregister(itkFFTPadImageFilterID2)
itkFFTPadImageFilterID2___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterID2___New_orig__
itkFFTPadImageFilterID2_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterID2_cast


def itkFFTPadImageFilterID3_New():
    return itkFFTPadImageFilterID3.New()

class itkFFTPadImageFilterID3(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseID3ID3):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID3_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID3_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID3_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterID3
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterID3

        Create a new object of the class itkFFTPadImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterID3 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterID3_swigregister(itkFFTPadImageFilterID3)
itkFFTPadImageFilterID3___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterID3___New_orig__
itkFFTPadImageFilterID3_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterID3_cast


def itkFFTPadImageFilterIF2_New():
    return itkFFTPadImageFilterIF2.New()

class itkFFTPadImageFilterIF2(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIF2IF2):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF2_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF2_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF2_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIF2
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIF2

        Create a new object of the class itkFFTPadImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIF2 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF2_swigregister(itkFFTPadImageFilterIF2)
itkFFTPadImageFilterIF2___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIF2___New_orig__
itkFFTPadImageFilterIF2_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIF2_cast


def itkFFTPadImageFilterIF3_New():
    return itkFFTPadImageFilterIF3.New()

class itkFFTPadImageFilterIF3(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIF3IF3):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF3_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF3_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF3_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIF3
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIF3

        Create a new object of the class itkFFTPadImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIF3 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIF3_swigregister(itkFFTPadImageFilterIF3)
itkFFTPadImageFilterIF3___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIF3___New_orig__
itkFFTPadImageFilterIF3_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIF3_cast


def itkFFTPadImageFilterIRGBAUC2_New():
    return itkFFTPadImageFilterIRGBAUC2.New()

class itkFFTPadImageFilterIRGBAUC2(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIRGBAUC2IRGBAUC2):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC2_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC2_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC2_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIRGBAUC2
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIRGBAUC2

        Create a new object of the class itkFFTPadImageFilterIRGBAUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIRGBAUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIRGBAUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIRGBAUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIRGBAUC2 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC2_swigregister(itkFFTPadImageFilterIRGBAUC2)
itkFFTPadImageFilterIRGBAUC2___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC2___New_orig__
itkFFTPadImageFilterIRGBAUC2_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC2_cast


def itkFFTPadImageFilterIRGBAUC3_New():
    return itkFFTPadImageFilterIRGBAUC3.New()

class itkFFTPadImageFilterIRGBAUC3(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIRGBAUC3IRGBAUC3):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC3_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC3_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC3_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIRGBAUC3
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIRGBAUC3

        Create a new object of the class itkFFTPadImageFilterIRGBAUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIRGBAUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIRGBAUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIRGBAUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIRGBAUC3 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC3_swigregister(itkFFTPadImageFilterIRGBAUC3)
itkFFTPadImageFilterIRGBAUC3___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC3___New_orig__
itkFFTPadImageFilterIRGBAUC3_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBAUC3_cast


def itkFFTPadImageFilterIRGBUC2_New():
    return itkFFTPadImageFilterIRGBUC2.New()

class itkFFTPadImageFilterIRGBUC2(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIRGBUC2IRGBUC2):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC2_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC2_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC2_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIRGBUC2
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIRGBUC2

        Create a new object of the class itkFFTPadImageFilterIRGBUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIRGBUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIRGBUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIRGBUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIRGBUC2 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC2_swigregister(itkFFTPadImageFilterIRGBUC2)
itkFFTPadImageFilterIRGBUC2___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC2___New_orig__
itkFFTPadImageFilterIRGBUC2_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC2_cast


def itkFFTPadImageFilterIRGBUC3_New():
    return itkFFTPadImageFilterIRGBUC3.New()

class itkFFTPadImageFilterIRGBUC3(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIRGBUC3IRGBUC3):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC3_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC3_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC3_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIRGBUC3
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIRGBUC3

        Create a new object of the class itkFFTPadImageFilterIRGBUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIRGBUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIRGBUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIRGBUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIRGBUC3 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC3_swigregister(itkFFTPadImageFilterIRGBUC3)
itkFFTPadImageFilterIRGBUC3___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC3___New_orig__
itkFFTPadImageFilterIRGBUC3_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIRGBUC3_cast


def itkFFTPadImageFilterISS2_New():
    return itkFFTPadImageFilterISS2.New()

class itkFFTPadImageFilterISS2(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseISS2ISS2):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS2_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS2_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS2_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterISS2
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterISS2

        Create a new object of the class itkFFTPadImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterISS2 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS2_swigregister(itkFFTPadImageFilterISS2)
itkFFTPadImageFilterISS2___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterISS2___New_orig__
itkFFTPadImageFilterISS2_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterISS2_cast


def itkFFTPadImageFilterISS3_New():
    return itkFFTPadImageFilterISS3.New()

class itkFFTPadImageFilterISS3(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseISS3ISS3):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS3_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS3_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS3_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterISS3
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterISS3

        Create a new object of the class itkFFTPadImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterISS3 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterISS3_swigregister(itkFFTPadImageFilterISS3)
itkFFTPadImageFilterISS3___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterISS3___New_orig__
itkFFTPadImageFilterISS3_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterISS3_cast


def itkFFTPadImageFilterIUC2_New():
    return itkFFTPadImageFilterIUC2.New()

class itkFFTPadImageFilterIUC2(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIUC2IUC2):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC2_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC2_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC2_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIUC2
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIUC2

        Create a new object of the class itkFFTPadImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIUC2 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC2_swigregister(itkFFTPadImageFilterIUC2)
itkFFTPadImageFilterIUC2___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC2___New_orig__
itkFFTPadImageFilterIUC2_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC2_cast


def itkFFTPadImageFilterIUC3_New():
    return itkFFTPadImageFilterIUC3.New()

class itkFFTPadImageFilterIUC3(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIUC3IUC3):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC3_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC3_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC3_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIUC3
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIUC3

        Create a new object of the class itkFFTPadImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIUC3 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC3_swigregister(itkFFTPadImageFilterIUC3)
itkFFTPadImageFilterIUC3___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC3___New_orig__
itkFFTPadImageFilterIUC3_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIUC3_cast


def itkFFTPadImageFilterIUS2_New():
    return itkFFTPadImageFilterIUS2.New()

class itkFFTPadImageFilterIUS2(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIUS2IUS2):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS2_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS2_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS2_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIUS2
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIUS2

        Create a new object of the class itkFFTPadImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIUS2 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS2_swigregister(itkFFTPadImageFilterIUS2)
itkFFTPadImageFilterIUS2___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS2___New_orig__
itkFFTPadImageFilterIUS2_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS2_cast


def itkFFTPadImageFilterIUS3_New():
    return itkFFTPadImageFilterIUS3.New()

class itkFFTPadImageFilterIUS3(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIUS3IUS3):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS3_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS3_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS3_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIUS3
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIUS3

        Create a new object of the class itkFFTPadImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIUS3 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS3_swigregister(itkFFTPadImageFilterIUS3)
itkFFTPadImageFilterIUS3___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS3___New_orig__
itkFFTPadImageFilterIUS3_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIUS3_cast


def itkFFTPadImageFilterIVF22_New():
    return itkFFTPadImageFilterIVF22.New()

class itkFFTPadImageFilterIVF22(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIVF22IVF22):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF22_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF22_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF22_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIVF22
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF22_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIVF22

        Create a new object of the class itkFFTPadImageFilterIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIVF22 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF22_swigregister(itkFFTPadImageFilterIVF22)
itkFFTPadImageFilterIVF22___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF22___New_orig__
itkFFTPadImageFilterIVF22_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF22_cast


def itkFFTPadImageFilterIVF23_New():
    return itkFFTPadImageFilterIVF23.New()

class itkFFTPadImageFilterIVF23(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIVF23IVF23):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF23___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF23_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF23_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF23_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIVF23
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF23_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIVF23

        Create a new object of the class itkFFTPadImageFilterIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIVF23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIVF23 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF23_swigregister(itkFFTPadImageFilterIVF23)
itkFFTPadImageFilterIVF23___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF23___New_orig__
itkFFTPadImageFilterIVF23_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF23_cast


def itkFFTPadImageFilterIVF32_New():
    return itkFFTPadImageFilterIVF32.New()

class itkFFTPadImageFilterIVF32(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIVF32IVF32):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF32___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF32_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF32_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF32_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIVF32
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF32_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIVF32

        Create a new object of the class itkFFTPadImageFilterIVF32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIVF32.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIVF32.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIVF32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIVF32 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF32_swigregister(itkFFTPadImageFilterIVF32)
itkFFTPadImageFilterIVF32___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF32___New_orig__
itkFFTPadImageFilterIVF32_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF32_cast


def itkFFTPadImageFilterIVF33_New():
    return itkFFTPadImageFilterIVF33.New()

class itkFFTPadImageFilterIVF33(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIVF33IVF33):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF33_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF33_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF33_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIVF33
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF33_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIVF33

        Create a new object of the class itkFFTPadImageFilterIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIVF33 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF33_swigregister(itkFFTPadImageFilterIVF33)
itkFFTPadImageFilterIVF33___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF33___New_orig__
itkFFTPadImageFilterIVF33_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF33_cast


def itkFFTPadImageFilterIVF42_New():
    return itkFFTPadImageFilterIVF42.New()

class itkFFTPadImageFilterIVF42(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIVF42IVF42):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF42___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF42_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF42_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF42_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIVF42
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF42_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIVF42

        Create a new object of the class itkFFTPadImageFilterIVF42 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIVF42.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIVF42.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIVF42.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIVF42 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF42_swigregister(itkFFTPadImageFilterIVF42)
itkFFTPadImageFilterIVF42___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF42___New_orig__
itkFFTPadImageFilterIVF42_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF42_cast


def itkFFTPadImageFilterIVF43_New():
    return itkFFTPadImageFilterIVF43.New()

class itkFFTPadImageFilterIVF43(itk.itkPadImageFilterBasePython.itkPadImageFilterBaseIVF43IVF43):
    r"""


    Pad an image to make it suitable for an FFT transformation.

    FFT filters usually requires a specific image size. The size is
    decomposed in several prime factors, and the filter only supports
    prime factors up to a maximum value. This filter automatically finds
    the greatest prime factor required by the available implementation and
    pads the input appropriately.

    This code was adapted from the Insight Journal contribution:

    "FFT Based Convolution" by Gaetan
    Lehmannhttps://hdl.handle.net/10380/3154

    Gaetan Lehmann

    See:   FFTShiftImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF43___New_orig__)
    Clone = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF43_Clone)
    GetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF43_GetSizeGreatestPrimeFactor)
    SetSizeGreatestPrimeFactor = _swig_new_instance_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF43_SetSizeGreatestPrimeFactor)
    __swig_destroy__ = _itkFFTPadImageFilterPython.delete_itkFFTPadImageFilterIVF43
    cast = _swig_new_static_method(_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF43_cast)

    def New(*args, **kargs):
        """New() -> itkFFTPadImageFilterIVF43

        Create a new object of the class itkFFTPadImageFilterIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkFFTPadImageFilterIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkFFTPadImageFilterIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkFFTPadImageFilterIVF43.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkFFTPadImageFilterIVF43 in _itkFFTPadImageFilterPython:
_itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF43_swigregister(itkFFTPadImageFilterIVF43)
itkFFTPadImageFilterIVF43___New_orig__ = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF43___New_orig__
itkFFTPadImageFilterIVF43_cast = _itkFFTPadImageFilterPython.itkFFTPadImageFilterIVF43_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def fft_pad_image_filter(*args, **kwargs):
    """Procedural interface for FFTPadImageFilter"""
    import itk
    instance = itk.FFTPadImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fft_pad_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.FFTPadImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.FFTPadImageFilter.values()[0]
    else:
        filter_object = itk.FFTPadImageFilter

    fft_pad_image_filter.__doc__ = filter_object.__doc__
    fft_pad_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    fft_pad_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.FFTPadImageFilter, itkTemplate.itkTemplate):
        fft_pad_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        fft_pad_image_filter.__doc__ += "\n"
        fft_pad_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        fft_pad_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



