# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKThresholdingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIsoDataThresholdCalculatorPython
else:
    import _itkIsoDataThresholdCalculatorPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkIsoDataThresholdCalculatorPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkIsoDataThresholdCalculatorPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkHistogramThresholdCalculatorPython
import itk.itkHistogramPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkSamplePython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython

def itkIsoDataThresholdCalculatorHDD_New():
    return itkIsoDataThresholdCalculatorHDD.New()

class itkIsoDataThresholdCalculatorHDD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDD):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDD
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDD

        Create a new object of the class itkIsoDataThresholdCalculatorHDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHDD in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_swigregister(itkIsoDataThresholdCalculatorHDD)
itkIsoDataThresholdCalculatorHDD___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD___New_orig__
itkIsoDataThresholdCalculatorHDD_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDD_cast


def itkIsoDataThresholdCalculatorHDF_New():
    return itkIsoDataThresholdCalculatorHDF.New()

class itkIsoDataThresholdCalculatorHDF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDF):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDF
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDF

        Create a new object of the class itkIsoDataThresholdCalculatorHDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHDF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHDF in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_swigregister(itkIsoDataThresholdCalculatorHDF)
itkIsoDataThresholdCalculatorHDF___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF___New_orig__
itkIsoDataThresholdCalculatorHDF_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDF_cast


def itkIsoDataThresholdCalculatorHDSS_New():
    return itkIsoDataThresholdCalculatorHDSS.New()

class itkIsoDataThresholdCalculatorHDSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDSS):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDSS
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDSS

        Create a new object of the class itkIsoDataThresholdCalculatorHDSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHDSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHDSS in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_swigregister(itkIsoDataThresholdCalculatorHDSS)
itkIsoDataThresholdCalculatorHDSS___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS___New_orig__
itkIsoDataThresholdCalculatorHDSS_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDSS_cast


def itkIsoDataThresholdCalculatorHDUC_New():
    return itkIsoDataThresholdCalculatorHDUC.New()

class itkIsoDataThresholdCalculatorHDUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUC):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDUC
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDUC

        Create a new object of the class itkIsoDataThresholdCalculatorHDUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHDUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHDUC in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_swigregister(itkIsoDataThresholdCalculatorHDUC)
itkIsoDataThresholdCalculatorHDUC___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC___New_orig__
itkIsoDataThresholdCalculatorHDUC_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUC_cast


def itkIsoDataThresholdCalculatorHDUS_New():
    return itkIsoDataThresholdCalculatorHDUS.New()

class itkIsoDataThresholdCalculatorHDUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHDUS):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHDUS
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHDUS

        Create a new object of the class itkIsoDataThresholdCalculatorHDUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHDUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHDUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHDUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHDUS in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_swigregister(itkIsoDataThresholdCalculatorHDUS)
itkIsoDataThresholdCalculatorHDUS___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS___New_orig__
itkIsoDataThresholdCalculatorHDUS_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHDUS_cast


def itkIsoDataThresholdCalculatorHFD_New():
    return itkIsoDataThresholdCalculatorHFD.New()

class itkIsoDataThresholdCalculatorHFD(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFD):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFD
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFD

        Create a new object of the class itkIsoDataThresholdCalculatorHFD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHFD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHFD in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_swigregister(itkIsoDataThresholdCalculatorHFD)
itkIsoDataThresholdCalculatorHFD___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD___New_orig__
itkIsoDataThresholdCalculatorHFD_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFD_cast


def itkIsoDataThresholdCalculatorHFF_New():
    return itkIsoDataThresholdCalculatorHFF.New()

class itkIsoDataThresholdCalculatorHFF(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFF):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFF
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFF

        Create a new object of the class itkIsoDataThresholdCalculatorHFF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHFF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHFF in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_swigregister(itkIsoDataThresholdCalculatorHFF)
itkIsoDataThresholdCalculatorHFF___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF___New_orig__
itkIsoDataThresholdCalculatorHFF_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFF_cast


def itkIsoDataThresholdCalculatorHFSS_New():
    return itkIsoDataThresholdCalculatorHFSS.New()

class itkIsoDataThresholdCalculatorHFSS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFSS):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFSS
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFSS

        Create a new object of the class itkIsoDataThresholdCalculatorHFSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFSS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFSS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHFSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHFSS in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_swigregister(itkIsoDataThresholdCalculatorHFSS)
itkIsoDataThresholdCalculatorHFSS___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS___New_orig__
itkIsoDataThresholdCalculatorHFSS_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFSS_cast


def itkIsoDataThresholdCalculatorHFUC_New():
    return itkIsoDataThresholdCalculatorHFUC.New()

class itkIsoDataThresholdCalculatorHFUC(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUC):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFUC
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFUC

        Create a new object of the class itkIsoDataThresholdCalculatorHFUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFUC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFUC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHFUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHFUC in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_swigregister(itkIsoDataThresholdCalculatorHFUC)
itkIsoDataThresholdCalculatorHFUC___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC___New_orig__
itkIsoDataThresholdCalculatorHFUC_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUC_cast


def itkIsoDataThresholdCalculatorHFUS_New():
    return itkIsoDataThresholdCalculatorHFUS.New()

class itkIsoDataThresholdCalculatorHFUS(itk.itkHistogramThresholdCalculatorPython.itkHistogramThresholdCalculatorHFUS):
    r"""


    Computes the IsoData threshold for an image. Aka intermeans.

    Iterative procedure based on the isodata algorithm [T.W. Ridler, S.
    Calvard, Picture thresholding using an iterative selection method,
    IEEE Trans. System, Man and Cybernetics, SMC-8 (1978) 630-632.] The
    procedure divides the image into objects and background by taking an
    initial threshold, then the averages of the pixels at or below the
    threshold and pixels above are computed. The averages of those two
    values are computed, the threshold is incremented and the process is
    repeated until the threshold is larger than the composite average.
    That is, threshold = (average background + average objects)/2

    This class is templated over the input histogram type. WARNING:  This
    calculator assumes that the input histogram has only one dimension.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.  This implementation was taken from the
    Insight Journal paper:https://hdl.handle.net/10380/3279
    orhttp://www.insight-journal.org/browse/publication/811 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS___New_orig__)
    Clone = _swig_new_instance_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_Clone)
    __swig_destroy__ = _itkIsoDataThresholdCalculatorPython.delete_itkIsoDataThresholdCalculatorHFUS
    cast = _swig_new_static_method(_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_cast)

    def New(*args, **kargs):
        """New() -> itkIsoDataThresholdCalculatorHFUS

        Create a new object of the class itkIsoDataThresholdCalculatorHFUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsoDataThresholdCalculatorHFUS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsoDataThresholdCalculatorHFUS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsoDataThresholdCalculatorHFUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsoDataThresholdCalculatorHFUS in _itkIsoDataThresholdCalculatorPython:
_itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_swigregister(itkIsoDataThresholdCalculatorHFUS)
itkIsoDataThresholdCalculatorHFUS___New_orig__ = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS___New_orig__
itkIsoDataThresholdCalculatorHFUS_cast = _itkIsoDataThresholdCalculatorPython.itkIsoDataThresholdCalculatorHFUS_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def iso_data_threshold_calculator(*args, **kwargs):
    """Procedural interface for IsoDataThresholdCalculator"""
    import itk
    instance = itk.IsoDataThresholdCalculator.New(*args, **kwargs)
    return instance.__internal_call__()

def iso_data_threshold_calculator_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.IsoDataThresholdCalculator, itkTemplate.itkTemplate):
        filter_object = itk.IsoDataThresholdCalculator.values()[0]
    else:
        filter_object = itk.IsoDataThresholdCalculator

    iso_data_threshold_calculator.__doc__ = filter_object.__doc__
    iso_data_threshold_calculator.__doc__ += "\n Args are Input(s) to the filter.\n"
    iso_data_threshold_calculator.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.IsoDataThresholdCalculator, itkTemplate.itkTemplate):
        iso_data_threshold_calculator.__doc__ += itkHelpers.filter_args(filter_object)[0]
        iso_data_threshold_calculator.__doc__ += "\n"
        iso_data_threshold_calculator.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        iso_data_threshold_calculator.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



