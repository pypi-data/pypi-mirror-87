# coding: utf-8

"""
    ExaVault API

    See our API reference documentation at https://www.exavault.com/developer/api-docs/  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: support@exavault.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PreviewFileAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image': 'str',
        'size': 'int',
        'image_hash': 'str',
        'page_count': 'int'
    }

    attribute_map = {
        'image': 'image',
        'size': 'size',
        'image_hash': 'imageHash',
        'page_count': 'pageCount'
    }

    def __init__(self, image=None, size=None, image_hash=None, page_count=None):  # noqa: E501
        """PreviewFileAttributes - a model defined in Swagger"""  # noqa: E501
        self._image = None
        self._size = None
        self._image_hash = None
        self._page_count = None
        self.discriminator = None
        if image is not None:
            self.image = image
        if size is not None:
            self.size = size
        if image_hash is not None:
            self.image_hash = image_hash
        if page_count is not None:
            self.page_count = page_count

    @property
    def image(self):
        """Gets the image of this PreviewFileAttributes.  # noqa: E501

        Binary image content, base64 encoded.  # noqa: E501

        :return: The image of this PreviewFileAttributes.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PreviewFileAttributes.

        Binary image content, base64 encoded.  # noqa: E501

        :param image: The image of this PreviewFileAttributes.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def size(self):
        """Gets the size of this PreviewFileAttributes.  # noqa: E501

        Size of the image in bytes.  # noqa: E501

        :return: The size of this PreviewFileAttributes.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PreviewFileAttributes.

        Size of the image in bytes.  # noqa: E501

        :param size: The size of this PreviewFileAttributes.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def image_hash(self):
        """Gets the image_hash of this PreviewFileAttributes.  # noqa: E501

        hash of the image.  # noqa: E501

        :return: The image_hash of this PreviewFileAttributes.  # noqa: E501
        :rtype: str
        """
        return self._image_hash

    @image_hash.setter
    def image_hash(self, image_hash):
        """Sets the image_hash of this PreviewFileAttributes.

        hash of the image.  # noqa: E501

        :param image_hash: The image_hash of this PreviewFileAttributes.  # noqa: E501
        :type: str
        """

        self._image_hash = image_hash

    @property
    def page_count(self):
        """Gets the page_count of this PreviewFileAttributes.  # noqa: E501

        Amount of pages available in the file. Used only for multipage documents.  # noqa: E501

        :return: The page_count of this PreviewFileAttributes.  # noqa: E501
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this PreviewFileAttributes.

        Amount of pages available in the file. Used only for multipage documents.  # noqa: E501

        :param page_count: The page_count of this PreviewFileAttributes.  # noqa: E501
        :type: int
        """

        self._page_count = page_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreviewFileAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreviewFileAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
