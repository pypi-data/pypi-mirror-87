# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_vector_refPython
else:
    import _vnl_vector_refPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _vnl_vector_refPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _vnl_vector_refPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
class vnl_vector_refCF(itk.vnl_vectorPython.vnl_vectorCF):
    r"""Proxy of C++ vnl_vector_refCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refCF self, unsigned long n, stdcomplexF space) -> vnl_vector_refCF
        __init__(vnl_vector_refCF self, vnl_vector_refCF v) -> vnl_vector_refCF
        """
        _vnl_vector_refPython.vnl_vector_refCF_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refCF(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refCF
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refCF_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refCF_as_vector)

# Register vnl_vector_refCF in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refCF_swigregister(vnl_vector_refCF)

class vnl_vector_refD(itk.vnl_vectorPython.vnl_vectorD):
    r"""Proxy of C++ vnl_vector_refD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refD self, unsigned long n, double * space) -> vnl_vector_refD
        __init__(vnl_vector_refD self, vnl_vector_refD v) -> vnl_vector_refD
        """
        _vnl_vector_refPython.vnl_vector_refD_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refD(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refD
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refD_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refD_as_vector)

# Register vnl_vector_refD in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refD_swigregister(vnl_vector_refD)

class vnl_vector_refF(itk.vnl_vectorPython.vnl_vectorF):
    r"""Proxy of C++ vnl_vector_refF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refF self, unsigned long n, float * space) -> vnl_vector_refF
        __init__(vnl_vector_refF self, vnl_vector_refF v) -> vnl_vector_refF
        """
        _vnl_vector_refPython.vnl_vector_refF_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refF(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refF
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refF_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refF_as_vector)

# Register vnl_vector_refF in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refF_swigregister(vnl_vector_refF)

class vnl_vector_refLD(itk.vnl_vectorPython.vnl_vectorLD):
    r"""Proxy of C++ vnl_vector_refLD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refLD self, unsigned long n, long double * space) -> vnl_vector_refLD
        __init__(vnl_vector_refLD self, vnl_vector_refLD v) -> vnl_vector_refLD
        """
        _vnl_vector_refPython.vnl_vector_refLD_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refLD(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refLD
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refLD_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refLD_as_vector)

# Register vnl_vector_refLD in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refLD_swigregister(vnl_vector_refLD)

class vnl_vector_refSC(itk.vnl_vectorPython.vnl_vectorSC):
    r"""Proxy of C++ vnl_vector_refSC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refSC self, unsigned long n, signed char * space) -> vnl_vector_refSC
        __init__(vnl_vector_refSC self, vnl_vector_refSC v) -> vnl_vector_refSC
        """
        _vnl_vector_refPython.vnl_vector_refSC_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSC(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSC
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSC_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSC_as_vector)

# Register vnl_vector_refSC in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refSC_swigregister(vnl_vector_refSC)

class vnl_vector_refSI(itk.vnl_vectorPython.vnl_vectorSI):
    r"""Proxy of C++ vnl_vector_refSI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refSI self, unsigned long n, int * space) -> vnl_vector_refSI
        __init__(vnl_vector_refSI self, vnl_vector_refSI v) -> vnl_vector_refSI
        """
        _vnl_vector_refPython.vnl_vector_refSI_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSI(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSI
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSI_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSI_as_vector)

# Register vnl_vector_refSI in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refSI_swigregister(vnl_vector_refSI)

class vnl_vector_refSL(itk.vnl_vectorPython.vnl_vectorSL):
    r"""Proxy of C++ vnl_vector_refSL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refSL self, unsigned long n, long * space) -> vnl_vector_refSL
        __init__(vnl_vector_refSL self, vnl_vector_refSL v) -> vnl_vector_refSL
        """
        _vnl_vector_refPython.vnl_vector_refSL_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSL(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSL
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSL_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSL_as_vector)

# Register vnl_vector_refSL in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refSL_swigregister(vnl_vector_refSL)

class vnl_vector_refSLL(itk.vnl_vectorPython.vnl_vectorSLL):
    r"""Proxy of C++ vnl_vector_refSLL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refSLL self, unsigned long n, long long * space) -> vnl_vector_refSLL
        __init__(vnl_vector_refSLL self, vnl_vector_refSLL v) -> vnl_vector_refSLL
        """
        _vnl_vector_refPython.vnl_vector_refSLL_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSLL(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSLL
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSLL_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSLL_as_vector)

# Register vnl_vector_refSLL in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refSLL_swigregister(vnl_vector_refSLL)

class vnl_vector_refSS(itk.vnl_vectorPython.vnl_vectorSS):
    r"""Proxy of C++ vnl_vector_refSS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refSS self, unsigned long n, short * space) -> vnl_vector_refSS
        __init__(vnl_vector_refSS self, vnl_vector_refSS v) -> vnl_vector_refSS
        """
        _vnl_vector_refPython.vnl_vector_refSS_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refSS(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refSS
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSS_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refSS_as_vector)

# Register vnl_vector_refSS in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refSS_swigregister(vnl_vector_refSS)

class vnl_vector_refUC(itk.vnl_vectorPython.vnl_vectorUC):
    r"""Proxy of C++ vnl_vector_refUC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refUC self, unsigned long n, unsigned char * space) -> vnl_vector_refUC
        __init__(vnl_vector_refUC self, vnl_vector_refUC v) -> vnl_vector_refUC
        """
        _vnl_vector_refPython.vnl_vector_refUC_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refUC(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refUC
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refUC_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refUC_as_vector)

# Register vnl_vector_refUC in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refUC_swigregister(vnl_vector_refUC)

class vnl_vector_refUI(itk.vnl_vectorPython.vnl_vectorUI):
    r"""Proxy of C++ vnl_vector_refUI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refUI self, unsigned long n, unsigned int * space) -> vnl_vector_refUI
        __init__(vnl_vector_refUI self, vnl_vector_refUI v) -> vnl_vector_refUI
        """
        _vnl_vector_refPython.vnl_vector_refUI_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refUI(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refUI
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refUI_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refUI_as_vector)

# Register vnl_vector_refUI in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refUI_swigregister(vnl_vector_refUI)

class vnl_vector_refUL(itk.vnl_vectorPython.vnl_vectorUL):
    r"""Proxy of C++ vnl_vector_refUL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refUL self, unsigned long n, unsigned long * space) -> vnl_vector_refUL
        __init__(vnl_vector_refUL self, vnl_vector_refUL v) -> vnl_vector_refUL
        """
        _vnl_vector_refPython.vnl_vector_refUL_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refUL(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refUL
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refUL_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refUL_as_vector)

# Register vnl_vector_refUL in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refUL_swigregister(vnl_vector_refUL)

class vnl_vector_refULL(itk.vnl_vectorPython.vnl_vectorULL):
    r"""Proxy of C++ vnl_vector_refULL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refULL self, unsigned long n, unsigned long long * space) -> vnl_vector_refULL
        __init__(vnl_vector_refULL self, vnl_vector_refULL v) -> vnl_vector_refULL
        """
        _vnl_vector_refPython.vnl_vector_refULL_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refULL(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refULL
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refULL_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refULL_as_vector)

# Register vnl_vector_refULL in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refULL_swigregister(vnl_vector_refULL)

class vnl_vector_refUS(itk.vnl_vectorPython.vnl_vectorUS):
    r"""Proxy of C++ vnl_vector_refUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vnl_vector_refUS self, unsigned long n, unsigned short * space) -> vnl_vector_refUS
        __init__(vnl_vector_refUS self, vnl_vector_refUS v) -> vnl_vector_refUS
        """
        _vnl_vector_refPython.vnl_vector_refUS_swiginit(self, _vnl_vector_refPython.new_vnl_vector_refUS(*args))
    __swig_destroy__ = _vnl_vector_refPython.delete_vnl_vector_refUS
    non_const = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refUS_non_const)
    as_vector = _swig_new_instance_method(_vnl_vector_refPython.vnl_vector_refUS_as_vector)

# Register vnl_vector_refUS in _vnl_vector_refPython:
_vnl_vector_refPython.vnl_vector_refUS_swigregister(vnl_vector_refUS)



