# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKImageIntensityPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkConstrainedValueAdditionImageFilterPython
else:
    import _itkConstrainedValueAdditionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkConstrainedValueAdditionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkConstrainedValueAdditionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkBinaryGeneratorImageFilterPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterBPython
import itk.itkSimpleDataObjectDecoratorPython
import itk.itkArrayPython

def itkConstrainedValueAdditionImageFilterID2ID2ID2_New():
    return itkConstrainedValueAdditionImageFilterID2ID2ID2.New()

class itkConstrainedValueAdditionImageFilterID2ID2ID2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID2ID2ID2):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterID2ID2ID2
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterID2ID2ID2

        Create a new object of the class itkConstrainedValueAdditionImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterID2ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterID2ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterID2ID2ID2 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2_swigregister(itkConstrainedValueAdditionImageFilterID2ID2ID2)
itkConstrainedValueAdditionImageFilterID2ID2ID2___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2___New_orig__
itkConstrainedValueAdditionImageFilterID2ID2ID2_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID2ID2ID2_cast


def itkConstrainedValueAdditionImageFilterID3ID3ID3_New():
    return itkConstrainedValueAdditionImageFilterID3ID3ID3.New()

class itkConstrainedValueAdditionImageFilterID3ID3ID3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterID3ID3ID3):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterID3ID3ID3
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterID3ID3ID3

        Create a new object of the class itkConstrainedValueAdditionImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterID3ID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterID3ID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterID3ID3ID3 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3_swigregister(itkConstrainedValueAdditionImageFilterID3ID3ID3)
itkConstrainedValueAdditionImageFilterID3ID3ID3___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3___New_orig__
itkConstrainedValueAdditionImageFilterID3ID3ID3_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterID3ID3ID3_cast


def itkConstrainedValueAdditionImageFilterIF2IF2IF2_New():
    return itkConstrainedValueAdditionImageFilterIF2IF2IF2.New()

class itkConstrainedValueAdditionImageFilterIF2IF2IF2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF2IF2IF2):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterIF2IF2IF2
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterIF2IF2IF2

        Create a new object of the class itkConstrainedValueAdditionImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterIF2IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterIF2IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterIF2IF2IF2 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2_swigregister(itkConstrainedValueAdditionImageFilterIF2IF2IF2)
itkConstrainedValueAdditionImageFilterIF2IF2IF2___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2___New_orig__
itkConstrainedValueAdditionImageFilterIF2IF2IF2_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF2IF2IF2_cast


def itkConstrainedValueAdditionImageFilterIF3IF3IF3_New():
    return itkConstrainedValueAdditionImageFilterIF3IF3IF3.New()

class itkConstrainedValueAdditionImageFilterIF3IF3IF3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIF3IF3IF3):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterIF3IF3IF3
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterIF3IF3IF3

        Create a new object of the class itkConstrainedValueAdditionImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterIF3IF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterIF3IF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterIF3IF3IF3 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3_swigregister(itkConstrainedValueAdditionImageFilterIF3IF3IF3)
itkConstrainedValueAdditionImageFilterIF3IF3IF3___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3___New_orig__
itkConstrainedValueAdditionImageFilterIF3IF3IF3_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIF3IF3IF3_cast


def itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_New():
    return itkConstrainedValueAdditionImageFilterISS2ISS2ISS2.New()

class itkConstrainedValueAdditionImageFilterISS2ISS2ISS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS2ISS2ISS2):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterISS2ISS2ISS2
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterISS2ISS2ISS2

        Create a new object of the class itkConstrainedValueAdditionImageFilterISS2ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterISS2ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterISS2ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterISS2ISS2ISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterISS2ISS2ISS2 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_swigregister(itkConstrainedValueAdditionImageFilterISS2ISS2ISS2)
itkConstrainedValueAdditionImageFilterISS2ISS2ISS2___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2___New_orig__
itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS2ISS2ISS2_cast


def itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_New():
    return itkConstrainedValueAdditionImageFilterISS3ISS3ISS3.New()

class itkConstrainedValueAdditionImageFilterISS3ISS3ISS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterISS3ISS3ISS3):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterISS3ISS3ISS3
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterISS3ISS3ISS3

        Create a new object of the class itkConstrainedValueAdditionImageFilterISS3ISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterISS3ISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterISS3ISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterISS3ISS3ISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterISS3ISS3ISS3 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_swigregister(itkConstrainedValueAdditionImageFilterISS3ISS3ISS3)
itkConstrainedValueAdditionImageFilterISS3ISS3ISS3___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3___New_orig__
itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterISS3ISS3ISS3_cast


def itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_New():
    return itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2.New()

class itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC2IUC2IUC2):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2

        Create a new object of the class itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_swigregister(itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2)
itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2___New_orig__
itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC2IUC2IUC2_cast


def itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_New():
    return itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3.New()

class itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUC3IUC3IUC3):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3

        Create a new object of the class itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_swigregister(itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3)
itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3___New_orig__
itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUC3IUC3IUC3_cast


def itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_New():
    return itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2.New()

class itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS2IUS2IUS2):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2

        Create a new object of the class itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_swigregister(itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2)
itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2___New_orig__
itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS2IUS2IUS2_cast


def itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_New():
    return itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3.New()

class itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3(itk.itkBinaryGeneratorImageFilterPython.itkBinaryGeneratorImageFilterIUS3IUS3IUS3):
    r"""


    Implements pixel-wise the computation of constrained value addition.

    This filter is templated over the types of the two input images and
    the type of the output image.

    Numeric conversions (castings) are done by the C++ defaults.

    The filter will walk over all the pixels in the two input images, and
    for each one of them it will do the following:

    cast the input 1 pixel value to double

    cast the input 2 pixel value to double

    compute the addition of the two pixel values

    compute the constrained value (constrained to be between the
    NonpositiveMin and max of the output pixel type)

    cast the double value resulting from the constrained value to the
    pixel type of the output image

    store the cast value into the output image.  The filter expects all
    images to have the same dimension (e.g. all 2D, or all 3D, or all ND)

    Lino Ramirez. Dept. of Electrical and Computer Engineering. University
    of Alberta. Canada 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_Clone)
    Input1ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_Input1ConvertibleToDoubleCheck
    
    Input2ConvertibleToDoubleCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_Input2ConvertibleToDoubleCheck
    
    DoubleConvertibleToOutputCastCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_DoubleConvertibleToOutputCastCheck
    
    DoubleLessThanOutputCheck = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_DoubleLessThanOutputCheck
    
    __swig_destroy__ = _itkConstrainedValueAdditionImageFilterPython.delete_itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3
    cast = _swig_new_static_method(_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3

        Create a new object of the class itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3 in _itkConstrainedValueAdditionImageFilterPython:
_itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_swigregister(itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3)
itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3___New_orig__ = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3___New_orig__
itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_cast = _itkConstrainedValueAdditionImageFilterPython.itkConstrainedValueAdditionImageFilterIUS3IUS3IUS3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def constrained_value_addition_image_filter(*args, **kwargs):
    """Procedural interface for ConstrainedValueAdditionImageFilter"""
    import itk
    instance = itk.ConstrainedValueAdditionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def constrained_value_addition_image_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.ConstrainedValueAdditionImageFilter, itkTemplate.itkTemplate):
        filter_object = itk.ConstrainedValueAdditionImageFilter.values()[0]
    else:
        filter_object = itk.ConstrainedValueAdditionImageFilter

    constrained_value_addition_image_filter.__doc__ = filter_object.__doc__
    constrained_value_addition_image_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    constrained_value_addition_image_filter.__doc__ += "\n Available Keyword Arguments:\n"
    if isinstance(itk.ConstrainedValueAdditionImageFilter, itkTemplate.itkTemplate):
        constrained_value_addition_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        constrained_value_addition_image_filter.__doc__ += "\n"
        constrained_value_addition_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        constrained_value_addition_image_filter.__doc__ += "".join([
            "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
            for item in dir(filter_object)
            if item.startswith("Set")])



