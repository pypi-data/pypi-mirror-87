# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


from . import _ITKCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vnl_least_squares_functionPython
else:
    import _vnl_least_squares_functionPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _vnl_least_squares_functionPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _vnl_least_squares_functionPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
class vnl_least_squares_function(object):
    r"""Proxy of C++ vnl_least_squares_function class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UseGradient_no_gradient = _vnl_least_squares_functionPython.vnl_least_squares_function_UseGradient_no_gradient
    
    UseGradient_use_gradient = _vnl_least_squares_functionPython.vnl_least_squares_function_UseGradient_use_gradient
    
    __swig_destroy__ = _vnl_least_squares_functionPython.delete_vnl_least_squares_function
    throw_failure = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_throw_failure)
    clear_failure = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_clear_failure)
    f = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_f)
    gradf = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_gradf)
    fdgradf = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_fdgradf)
    ffdgradf = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_ffdgradf)
    trace = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_trace)
    rms = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_rms)
    get_number_of_unknowns = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_get_number_of_unknowns)
    get_number_of_residuals = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_get_number_of_residuals)
    has_gradient = _swig_new_instance_method(_vnl_least_squares_functionPython.vnl_least_squares_function_has_gradient)

# Register vnl_least_squares_function in _vnl_least_squares_functionPython:
_vnl_least_squares_functionPython.vnl_least_squares_function_swigregister(vnl_least_squares_function)



